[
    {
        "desc": "Returns the 20 most recent mentions (tweets containing a users's @screen_name) for the authenticating user. The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com. This method can only return up to 800 tweets. See Working with Timelines for instructions on traversing timelines.",
        "params": [
            {
                "name": "count",
                "desc": "Specifies the number of tweets to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts=1 when using this API method.",
                "type": "int",
                "required": false
            },
            {
                "name": "since_id",
                "desc": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.",
                "type": "status_id",
                "example": "12345",
                "required": false
            },
            {
                "name": "max_id",
                "desc": "Returns results with an ID less than (that is, older than) or equal to the specified ID.",
                "type": "status_id",
                "example": "54321",
                "required": false
            },
            {
                "name": "trim_user",
                "desc": "When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.",
                "type": "bool",
                "example": "true",
                "required": false
            },
            {
                "name": "contributor_details",
                "desc": "This parameter enhances the contributors element of the status response to include the screen_name of the contributor. By default only the user_id of the contributor is included.",
                "type": "bool",
                "example": "true",
                "required": false
            },
            {
                "name": "include_entities",
                "desc": "The entities node will be disincluded when set to false.",
                "type": "bool",
                "example": "false",
                "required": false
            }
        ],
        "path": "statuses/mentions_timeline",
        "method": "GET"
    },
    {
        "desc": "Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters. User timelines belonging to protected users may only be requested when the authenticated user either \"owns\" the timeline or is an approved follower of the owner. The timeline returned is the equivalent of the one seen when you view a user's profile on twitter.com . This method can only return up to 3,200 of a user's most recent Tweets. Native retweets of other statuses by the user is included in this total, regardless of whether include_rts is set to false when requesting this resource. See Working with Timelines for instructions on traversing timelines. See Embeddable Timelines , Embeddable Tweets , and GET statuses/oembed for tools to render Tweets according to Display Requirements .",
        "params": [
            {
                "name": "user_id",
                "desc": "The ID of the user for whom to return results for.",
                "type": "user_id",
                "example": "12345",
                "required": false
            },
            {
                "name": "screen_name",
                "desc": "The screen name of the user for whom to return results for.",
                "type": "string",
                "example": "noradio",
                "required": false
            },
            {
                "name": "since_id",
                "desc": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.",
                "type": "status_id",
                "example": "12345",
                "required": false
            },
            {
                "name": "count",
                "desc": "Specifies the number of tweets to try and retrieve, up to a maximum of 200 per distinct request. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts=1 when using this API method.",
                "type": "int",
                "required": false
            },
            {
                "name": "max_id",
                "desc": "Returns results with an ID less than (that is, older than) or equal to the specified ID.",
                "type": "status_id",
                "example": "54321",
                "required": false
            },
            {
                "name": "trim_user",
                "desc": "When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.",
                "type": "bool",
                "example": "true",
                "required": false
            },
            {
                "name": "exclude_replies",
                "desc": "This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets \u2014 this is because the count parameter retrieves that many tweets before filtering out retweets and replies. This parameter is only supported for JSON and XML responses.",
                "type": "bool",
                "example": "true",
                "required": false
            },
            {
                "name": "contributor_details",
                "desc": "This parameter enhances the contributors element of the status response to include the screen_name of the contributor. By default only the user_id of the contributor is included.",
                "type": "bool",
                "example": "true",
                "required": false
            },
            {
                "name": "include_rts",
                "desc": "When set to false, the timeline will strip any native retweets (though they will still count toward both the maximal length of the timeline and the slice selected by the count parameter). Note: If you're using the trim_user parameter in conjunction with include_rts, the retweets will still contain a full user object.",
                "type": "bool",
                "example": "false",
                "required": false
            }
        ],
        "path": "statuses/user_timeline",
        "method": "GET"
    },
    {
        "desc": "Returns a collection of the most recent Tweets and retweets posted by the authenticating user and the users they follow. The home timeline is central to how most users interact with the Twitter service. Up to 800 Tweets are obtainable on the home timeline. It is more volatile for users that follow many users or follow users who tweet frequently. See Working with Timelines for instructions on traversing timelines efficiently.",
        "params": [
            {
                "name": "count",
                "desc": "Specifies the number of records to retrieve. Must be less than or equal to 200. Defaults to 20. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied.",
                "type": "int",
                "example": "5",
                "required": false
            },
            {
                "name": "since_id",
                "desc": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.",
                "type": "status_id",
                "example": "12345",
                "required": false
            },
            {
                "name": "max_id",
                "desc": "Returns results with an ID less than (that is, older than) or equal to the specified ID.",
                "type": "status_id",
                "example": "54321",
                "required": false
            },
            {
                "name": "trim_user",
                "desc": "When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.",
                "type": "bool",
                "example": "true",
                "required": false
            },
            {
                "name": "exclude_replies",
                "desc": "This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets \u2014 this is because the count parameter retrieves that many tweets before filtering out retweets and replies.",
                "type": "bool",
                "example": "true",
                "required": false
            },
            {
                "name": "contributor_details",
                "desc": "This parameter enhances the contributors element of the status response to include the screen_name of the contributor. By default only the user_id of the contributor is included.",
                "type": "bool",
                "example": "true",
                "required": false
            },
            {
                "name": "include_entities",
                "desc": "The entities node will be disincluded when set to false.",
                "type": "bool",
                "example": "false",
                "required": false
            }
        ],
        "path": "statuses/home_timeline",
        "method": "GET"
    },
    {
        "desc": "Returns the most recent tweets authored by the authenticating user that have been retweeted by others. This timeline is a subset of the user's GET statuses / user_timeline . See Working with Timelines for instructions on traversing timelines.",
        "params": [
            {
                "name": "count",
                "desc": "Specifies the number of records to retrieve. Must be less than or equal to 100. If omitted, 20 will be assumed.",
                "type": "int",
                "example": "5",
                "required": false
            },
            {
                "name": "since_id",
                "desc": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.",
                "type": "status_id",
                "example": "12345",
                "required": false
            },
            {
                "name": "max_id",
                "desc": "Returns results with an ID less than (that is, older than) or equal to the specified ID.",
                "type": "status_id",
                "example": "54321",
                "required": false
            },
            {
                "name": "trim_user",
                "desc": "When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.",
                "type": "bool",
                "example": "true",
                "required": false
            },
            {
                "name": "include_entities",
                "desc": "The tweet entities node will not be included when set to false.",
                "type": "bool",
                "example": "false",
                "required": false
            },
            {
                "name": "include_user_entities",
                "desc": "The user entities node will not be included when set to false.",
                "type": "bool",
                "example": "false",
                "required": false
            }
        ],
        "path": "statuses/retweets_of_me",
        "method": "GET"
    },
    {
        "desc": "Returns a collection of the 100 most recent retweets of the tweet specified by the id parameter.",
        "params": [
            {
                "name": "id",
                "desc": "The numerical ID of the desired status.",
                "type": "int",
                "example": "123",
                "required": true
            },
            {
                "name": "count",
                "desc": "Specifies the number of records to retrieve. Must be less than or equal to 100.",
                "type": "int",
                "example": "5",
                "required": false
            },
            {
                "name": "trim_user",
                "desc": "When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.",
                "type": "bool",
                "example": "true",
                "required": false
            }
        ],
        "path": "statuses/retweets/:id",
        "method": "GET"
    },
    {
        "desc": "Returns a single Tweet , specified by the id parameter. The Tweet's author will also be embedded within the tweet. See GET statuses / lookup for getting Tweets in bulk (up to 100 per call). See also Embeddable Timelines , Embeddable Tweets , and GET statuses/oembed for tools to render Tweets according to Display Requirements . About Geo If there is no geotag for a status, then there will be an empty <geo/> or \"geo\" : {} . This can only be populated if the user has used the Geotagging API to send a statuses/update. The JSON response mostly uses conventions laid out in GeoJSON. Unfortunately, the coordinates that Twitter renders are reversed from the GeoJSON specification (GeoJSON specifies a longitude then a latitude, whereas we are currently representing it as a latitude then a longitude). Our JSON renders as: \"geo\": { \"type\":\"Point\", \"coordinates\":[37.78029, -122.39697] } Contributors If there are no contributors for a Tweet, then there will be an empty or \"contributors\" : {} . This field will only be populated if the user has contributors enabled on his or her account \u2014 this is a beta feature that is not yet generally available to all. This object contains an array of user IDs for users who have contributed to this status (an example of a status that has been contributed to is this one). In practice, there is usually only one ID in this array. The JSON renders as such \"contributors\":[8285392] .",
        "params": [
            {
                "name": "id",
                "desc": "The numerical ID of the desired Tweet.",
                "type": "int",
                "example": "123",
                "required": true
            },
            {
                "name": "trim_user",
                "desc": "When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.",
                "type": "bool",
                "example": "true",
                "required": false
            },
            {
                "name": "include_my_retweet",
                "desc": "When set to either true, t or 1, any Tweets returned that have been retweeted by the authenticating user will include an additional current_user_retweet node, containing the ID of the source status for the retweet.",
                "type": "bool",
                "example": "true",
                "required": false
            },
            {
                "name": "include_entities",
                "desc": "The entities node will be disincluded when set to false.",
                "type": "bool",
                "example": "false",
                "required": false
            }
        ],
        "path": "statuses/show/:id",
        "method": "GET"
    },
    {
        "desc": "Destroys the status specified by the required ID parameter. The authenticating user must be the author of the specified status. Returns the destroyed status if successful.",
        "params": [
            {
                "name": "id",
                "desc": "The numerical ID of the desired status.",
                "type": "int",
                "example": "123",
                "required": true
            },
            {
                "name": "trim_user",
                "desc": "When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.",
                "type": "bool",
                "example": "true",
                "required": false
            }
        ],
        "path": "statuses/destroy/:id",
        "method": "POST"
    },
    {
        "desc": "Updates the authenticating user's current status, also known as Tweeting. For each update attempt, the update text is compared with the authenticating user's recent Tweets. Any attempt that would result in duplication will be blocked, resulting in a 403 error. Therefore, a user cannot submit the same status twice in a row. While not rate limited by the API a user is limited in the number of Tweets they can create at a time. If the number of updates posted by the user reaches the current allowed limit this method will return an HTTP 403 error. About Geo Any geo-tagging parameters in the update will be ignored if geo_enabled for the user is false (this is the default setting for all users unless the user has enabled geolocation in their settings) The number of digits passed the decimal separator passed to lat , up to 8, will be tracked so that the lat is returned in a status object it will have the same number of digits after the decimal separator. Please make sure to use to use a decimal point as the separator (and not the decimal comma) for the latitude and the longitude - usage of the decimal comma will cause the geo-tagged portion of the status update to be dropped. For JSON, the response mostly uses conventions described in GeoJSON . Unfortunately, the geo object has coordinates that Twitter renderers are reversed from the GeoJSON specification (GeoJSON specifies a longitude then a latitude, whereas we are currently representing it as a latitude then a longitude. Our JSON renders as: \"geo\": { \"type\":\"Point\", \"coordinates\":[37.78217, -122.40062] } The coordinates object is replacing the geo object (no deprecation date has been set for the geo object yet) \u2014 the difference is that the coordinates object, in JSON, is now rendered correctly in GeoJSON. If a place_id is passed into the status update, then that place will be attached to the status. If no place_id was explicitly provided, but latitude and longitude are, we attempt to implicitly provide a place by calling geo/reverse_geocode . Users will have the ability, from their settings page, to remove all the geotags from all their tweets en masse. Currently we are not doing any automatic scrubbing nor providing a method to remove geotags from individual tweets.",
        "params": [
            {
                "name": "status",
                "desc": "The text of your status update, typically up to 140 characters. URL encode as necessary. t.co link wrapping may affect character counts.",
                "type": "string",
                "required": true
            },
            {
                "name": "in_reply_to_status_id",
                "desc": "The ID of an existing status that the update is in reply to.",
                "type": "status_id",
                "required": false
            },
            {
                "name": "possibly_sensitive",
                "desc": "If you upload Tweet media that might be considered sensitive content such as nudity, violence, or medical procedures, you should set this value to true. See Media setting and best practices for more context. Defaults to false.",
                "type": "bool",
                "example": "true",
                "required": false
            },
            {
                "name": "lat",
                "desc": "The latitude of the location this tweet refers to. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding long parameter.",
                "type": "string",
                "example": "37.7821120598956",
                "required": false
            },
            {
                "name": "long",
                "desc": "The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter.",
                "type": "string",
                "example": "-122.400612831116",
                "required": false
            },
            {
                "name": "place_id",
                "desc": "A place in the world.",
                "type": "place_id",
                "example": "df51dec6f4ee2b2c",
                "required": false
            },
            {
                "name": "display_coordinates",
                "desc": "Whether or not to put a pin on the exact coordinates a tweet has been sent from.",
                "type": "bool",
                "example": "true",
                "required": false
            },
            {
                "name": "trim_user",
                "desc": "When set to either true, t or 1, each Tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.",
                "type": "bool",
                "example": "true",
                "required": false
            },
            {
                "name": "media_ids",
                "desc": "A list of media_ids to associate with the Tweet. You may include up to 4 photos or 1 animated GIF or 1 video in a Tweet. See Uploading Media for further details on uploading media.",
                "type": "media_ids",
                "example": "471592142565957632",
                "required": false
            }
        ],
        "path": "statuses/update",
        "method": "POST"
    },
    {
        "desc": "Retweets a tweet. Returns the original tweet with retweet details embedded. Usage Notes : This method is subject to update limits. A HTTP 403 will be returned if this limit as been hit. Twitter will ignore attempts to perform duplicate retweets. The retweet_count will be current as of when the payload is generated and may not reflect the exact count. It is intended as an approximation.",
        "params": [
            {
                "name": "id",
                "desc": "The numerical ID of the desired status.",
                "type": "int",
                "example": "123",
                "required": true
            },
            {
                "name": "trim_user",
                "desc": "When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.",
                "type": "bool",
                "example": "true",
                "required": false
            }
        ],
        "path": "statuses/retweet/:id",
        "method": "POST"
    },
    {
        "desc": "Untweets a retweeted status. Returns the original Tweet with retweet details embedded. Usage Notes : This method is subject to update limits. A HTTP 429 will be returned if this limit has been hit. The untweeted retweet status ID must be authored by the user backing the authentication token. An application must have write privileges to POST. A HTTP 401 will be returned for read-only applications. When passing a source status ID instead of the retweet status ID a HTTP 200 response will be returned with the same Tweet object but no action.",
        "params": [
            {
                "name": "id",
                "desc": "The numerical ID of the desired retweet status.",
                "type": "int",
                "example": "123",
                "required": true
            },
            {
                "name": "trim_user",
                "desc": "When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.",
                "type": "bool",
                "example": "true",
                "required": false
            }
        ],
        "path": "statuses/unretweet/:id",
        "method": "POST"
    },
    {
        "desc": "This endpoint has been DEPRECATED and does not support multiple images, animated GIFs, or video. Follow the Uploading media guide guide to upload one or more media entities, and then use POST statuses/update to attach them to a Tweet. Updates the authenticating user's current status and attaches media for upload. In other words, it creates a Tweet with a picture attached. Unlike POST statuses/update , this method expects raw multipart data. Your POST request's Content-Type should be set to multipart/form-data with the media[] parameter. The Tweet text will be rewritten to include the media URL(s), which will reduce the number of characters allowed in the Tweet text. If the URL(s) cannot be appended without text truncation, the tweet will be rejected and this method will return an HTTP 403 error. Users are limited to a specific daily media upload limit. Requests to this endpoint will return the following headers with information regarding the user's current media upload limits: X-MediaRateLimit-Limit - Indicates the total pieces of media the current user may upload before the time indicated in X-MediaRateLimit-Reset . X-MediaRateLimit-Remaining - The remaining pieces of media the current user may upload before the time indicated in X-MediaRateLimit-Reset . X-MediaRateLimit-Reset - A UTC-based timestamp (in seconds) indicating when X-MediaRateLimit-Remaining will reset to the value in X-MediaRateLimit-Limit and the user can resume uploading media. If the user is over the daily media limit, this method will return an HTTP 403 error. In addition to media upload limits, the user is still limited in the number of statuses they can publish daily. If the user tries to exceed the number of updates allowed, this method will also return an HTTP 403 error, similar to POST statuses/update . OAuth is handled differently for POST messages. See Uploading Media for more details on this. Example Request Note: The OAuth tool does not support multipart requests, so you will not be able to use it to generate an example request to this endpoint. An example request has been included to demonstrate the multipart request format. POST /1.1/statuses/update_with_media.json HTTP/1.1\nHost: api.twitter.com\nUser-Agent: Go http package\nContent-Length: 15532\nAuthorization: OAuth oauth_consumer_key=\"...\", oauth_nonce=\"...\", oauth_signature=\"...\", oauth_signature_method=\"HMAC-SHA1\", oauth_timestamp=\"1347058301\", oauth_token=\"...\", oauth_version=\"1.0\"\nContent-Type: multipart/form-data;boundary=cce6735153bf14e47e999e68bb183e70a1fa7fc89722fc1efdf03a917340\nAccept-Encoding: gzip\n\n--cce6735153bf14e47e999e68bb183e70a1fa7fc89722fc1efdf03a917340\nContent-Disposition: form-data; name=\"status\" Hello 2012-09-07 15:51:41.375247 -0700 PDT!\n--cce6735153bf14e47e999e68bb183e70a1fa7fc89722fc1efdf03a917340\n\nContent-Type: application/octet-stream\nContent-Disposition: form-data; name=\"media[]\"; filename=\"media.png\" ...\n--cce6735153bf14e47e999e68bb183e70a1fa7fc89722fc1efdf03a917340-- {\n  \"contributors\": null,\n  \"coordinates\": null,\n  \"created_at\": \"Fri Sep 07 22:46:18 +0000 2012\",\n  \"entities\": {\n    \"hashtags\": [],\n    \"media\": [\n      {\n        \"display_url\": \"pic.twitter.com/lX5LVZO\",\n        \"expanded_url\": \"https://twitter.com/fakekurrik/status/244204973972410368/photo/1\",\n        \"id\": 244204973989187584,\n        \"id_str\": \"244204973989187584\",\n        \"indices\": [\n          44,\n          63\n        ],\n        \"media_url\": \"http://pbs.twimg.com/media/A2OXIUcCUAAXj9k.png\",\n        \"media_url_https\": \"https://pbs.twimg.com/media/A2OXIUcCUAAXj9k.png\",\n        \"sizes\": {\n          \"large\": {\n            \"h\": 175,\n            \"resize\": \"fit\",\n            \"w\": 333\n          },\n          \"medium\": {\n            \"h\": 175,\n            \"resize\": \"fit\",\n            \"w\": 333\n          },\n          \"small\": {\n            \"h\": 175,\n            \"resize\": \"fit\",\n            \"w\": 333\n          },\n          \"thumb\": {\n            \"h\": 150,\n            \"resize\": \"crop\",\n            \"w\": 150\n          }\n        },\n        \"type\": \"photo\",\n        \"url\": \"http://t.co/lX5LVZO\"\n      }\n    ],\n    \"urls\": [],\n    \"user_mentions\": []\n  },\n  \"favorited\": false,\n  \"geo\": null,\n  \"id\": 244204973972410368,\n  \"id_str\": \"244204973972410368\",\n  \"in_reply_to_screen_name\": null,\n  \"in_reply_to_status_id\": null,\n  \"in_reply_to_status_id_str\": null,\n  \"in_reply_to_user_id\": null,\n  \"in_reply_to_user_id_str\": null,\n  \"place\": null,\n  \"possibly_sensitive\": false,\n  \"retweet_count\": 0,\n  \"retweeted\": false,\n  \"source\": \" Fakekurrik's Test Application \",\n  \"text\": \"Hello 2012-09-07 15:48:27.889593 -0700 PDT! http://t.co/lX5LVZO\",\n  \"truncated\": false,\n  \"user\": {\n    \"contributors_enabled\": false,\n    \"created_at\": \"Fri Sep 09 16:13:20 +0000 2011\",\n    \"default_profile\": false,\n    \"default_profile_image\": false,\n    \"description\": \"I am just a testing account, following me probably won't gain you very much\",\n    \"entities\": {\n      \"description\": {\n        \"urls\": []\n      },\n      \"url\": {\n        \"urls\": [\n          {\n            \"display_url\": null,\n            \"expanded_url\": null,\n            \"indices\": [\n              0,\n              24\n            ],\n            \"url\": \"http://blog.roomanna.com\"\n          }\n        ]\n      }\n    },\n    \"favourites_count\": 1,\n    \"follow_request_sent\": false,\n    \"followers_count\": 2,\n    \"following\": false,\n    \"friends_count\": 5,\n    \"geo_enabled\": true,\n    \"id\": 370773112,\n    \"id_str\": \"370773112\",\n    \"is_translator\": false,\n    \"lang\": \"en\",\n    \"listed_count\": 0,\n    \"location\": \"Trapped in factory\",\n    \"name\": \"fakekurrik\",\n    \"notifications\": false,\n    \"profile_background_color\": \"C0DEED\",\n    \"profile_background_image_url\": \"http://a0.twimg.com/profile_background_images/616512781/iarz5lvj7lg7zpg3zv8j.jpeg\",\n    \"profile_background_image_url_https\": \"https://si0.twimg.com/profile_background_images/616512781/iarz5lvj7lg7zpg3zv8j.jpeg\",\n    \"profile_background_tile\": true,\n    \"profile_image_url\": \"http://a0.twimg.com/profile_images/2440719659/x47xdzkguqxr1w1gg5un_normal.png\",\n    \"profile_image_url_https\": \"https://si0.twimg.com/profile_images/2440719659/x47xdzkguqxr1w1gg5un_normal.png\",\n    \"profile_link_color\": \"0084B4\",\n    \"profile_sidebar_border_color\": \"C0DEED\",\n    \"profile_sidebar_fill_color\": \"FFFFFF\",\n    \"profile_text_color\": \"333333\",\n    \"profile_use_background_image\": true,\n    \"protected\": true,\n    \"screen_name\": \"fakekurrik\",\n    \"show_all_inline_media\": false,\n    \"statuses_count\": 546,\n    \"time_zone\": \"Pacific Time (US & Canada)\",\n    \"url\": \"http://blog.roomanna.com\",\n    \"utc_offset\": -28800,\n    \"verified\": false\n  }\n}",
        "params": [
            {
                "name": "status",
                "desc": "The text of your status update. URL encode as necessary. t.co link wrapping may affect character counts if the post contains URLs. You must additionally account for the characters_reserved_per_media per uploaded media, additionally accounting for space characters in between finalized URLs.",
                "type": "string",
                "required": true
            },
            {
                "name": "media[]",
                "desc": "Up to max_media_per_upload files may be specified in the request, each named media[]. Supported image formats are PNG, JPG and GIF, including animated GIFs of up to 3MB . This data must be either the raw image bytes or encoded as base64.",
                "type": "string",
                "required": true
            },
            {
                "name": "possibly_sensitive",
                "desc": "Set to true for content which may not be suitable for every audience.",
                "type": "string",
                "required": false
            },
            {
                "name": "in_reply_to_status_id",
                "desc": "The ID of an existing status that the update is in reply to.",
                "type": "status_id",
                "required": false
            },
            {
                "name": "lat",
                "desc": "The latitude of the location this tweet refers to. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding long parameter.",
                "type": "string",
                "example": "37.7821120598956",
                "required": false
            },
            {
                "name": "long",
                "desc": "The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, not a number, geo_enabled is disabled, or if there not a corresponding lat parameter.",
                "type": "string",
                "example": "-122.400612831116",
                "required": false
            },
            {
                "name": "place_id",
                "desc": "A place in the world identified by a Twitter place ID. Place IDs can be retrieved from geo/reverse_geocode.",
                "type": "place_id",
                "example": "df51dec6f4ee2b2c",
                "required": false
            },
            {
                "name": "display_coordinates",
                "desc": "Whether or not to put a pin on the exact coordinates a tweet has been sent from.",
                "type": "bool",
                "example": "true",
                "required": false
            }
        ],
        "path": "statuses/update_with_media",
        "method": "POST"
    },
    {
        "desc": "Returns a single Tweet, specified by a Tweet web URL, in an oEmbed -compatible format. The returned HTML snippet will be automatically recognized as an embedded Tweet when Twitter's widget JavaScript is included on the page . The oEmbed endpoint allows customization of the final appearance of an Embedded Tweet by setting the corresponding properties in HTML markup to be interpreted by Twitter's JavaScript bundled with the HTML response by default. The format of the returned markup may change over time as Twitter adds new features or adjusts its Tweet representation. The Tweet fallback markup is meant to be cached on your servers for up to the suggested cache lifetime specified in the cache_age .",
        "params": [
            {
                "name": "url",
                "desc": "The URL of the Tweet to be embedded.",
                "type": "string",
                "required": true
            },
            {
                "name": "maxwidth",
                "desc": "The maximum width of a rendered Tweet in whole pixels. This value must be between 220 and 550 inclusive. A supplied value under or over the allowed range will be returned as the minimum or maximum supported width respectively; the reset width value will be reflected in the returned width property.",
                "type": "int",
                "example": "325",
                "required": false
            },
            {
                "name": "hide_media",
                "desc": "When set to true, t or 1 links in a Tweet are not expanded to photo, video, or link previews.",
                "type": "bool",
                "example": "true",
                "required": false
            },
            {
                "name": "hide_thread",
                "desc": "When set to true, t or 1 a collapsed version of the previous Tweet in a conversation thread will not be displayed when the requested Tweet is in reply to another Tweet.",
                "type": "bool",
                "example": "true",
                "required": false
            },
            {
                "name": "omit_script",
                "desc": "When set to true, t or 1 the <script> responsible for loading widgets.js will not be returned. Your webpages should include their own reference to widgets.js for use across all Twitter widgets including Embedded Tweets.",
                "type": "bool",
                "example": "true",
                "required": false
            },
            {
                "name": "align",
                "desc": "Specifies whether the embedded Tweet should be floated left, right, or center in the page relative to the parent element. Valid values are left, right, center, and none. Defaults to none, meaning no alignment styles are specified for the Tweet.",
                "type": "string",
                "example": "center",
                "required": false
            },
            {
                "name": "related",
                "desc": "A comma-separated list of Twitter usernames related to your content. This value will be forwarded to Tweet action intents if a viewer chooses to reply, favorite, or retweet the embedded Tweet.",
                "type": "string",
                "required": false
            },
            {
                "name": "lang",
                "desc": "Request returned HTML and a rendered Tweet in the specified Twitter language supported by embedded Tweets.",
                "type": "string",
                "example": "fr",
                "required": false
            },
            {
                "name": "widget_type",
                "desc": "Set to video to return a Twitter Video embed for the given Tweet.",
                "type": "string",
                "example": "video",
                "required": false
            },
            {
                "name": "hide_tweet",
                "desc": "Applies to video type only. Set to 1 or true to link directly to the Tweet URL instead of displaying a Tweet overlay when a viewer clicks on the Twitter bird logo.",
                "type": "int",
                "example": "1",
                "required": false
            }
        ],
        "path": "statuses/oembed",
        "method": "GET"
    },
    {
        "desc": "Returns a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter. This method offers similar data to GET statuses / retweets / :id .",
        "params": [
            {
                "name": "id",
                "desc": "The numerical ID of the desired status.",
                "type": "int",
                "example": "327473909412814850",
                "required": true
            },
            {
                "name": "cursor",
                "desc": "Causes the list of IDs to be broken into pages of no more than 100 IDs at a time. The number of IDs returned is not guaranteed to be 100 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\" The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See our cursor docs for more information. While this method supports the cursor parameter, the entire result set can be returned in a single cursored collection. Using the count parameter with this method will not provide segmented cursors for use with this parameter.",
                "type": "cursor",
                "example": "12893764510938",
                "required": false
            },
            {
                "name": "stringify_ids",
                "desc": "Many programming environments will not consume our ids due to their size. Provide this option to have ids returned as strings instead.",
                "type": "bool",
                "example": "true",
                "required": false
            }
        ],
        "path": "statuses/retweeters/ids",
        "method": "GET"
    },
    {
        "desc": "Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter. This method is especially useful to get the details (hydrate) a collection of Tweet IDs. GET statuses / show / :id is used to retrieve a single tweet object. There are a few things to note when using this method. You must be following a protected user to be able to see their most recent tweets. If you don't follow a protected user their status will be removed. The order of tweet IDs may not match the order of tweets in the returned array. If a requested tweet is unknown or deleted, then that tweet will not be returned in the results list, unless the map parameter is set to true , in which case it will be returned with a value of null . If none of your lookup criteria matches valid tweet IDs an empty array will be returned for map=false . You are strongly encouraged to use a POST for larger requests.",
        "params": [
            {
                "name": "id",
                "desc": "A comma separated list of tweet IDs, up to 100 are allowed in a single request.",
                "type": "int",
                "example": "20",
                "required": true
            },
            {
                "name": "include_entities",
                "desc": "The entities node that may appear within embedded statuses will be disincluded when set to false.",
                "type": "bool",
                "example": "false",
                "required": false
            },
            {
                "name": "trim_user",
                "desc": "When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.",
                "type": "bool",
                "example": "true",
                "required": false
            },
            {
                "name": "map",
                "desc": "When using the map parameter, tweets that do not exist or cannot be viewed by the current user will still have their key represented but with an explicitly null value paired with it",
                "type": "bool",
                "example": "true",
                "required": false
            }
        ],
        "path": "statuses/lookup",
        "method": "GET"
    },
    {
        "desc": "Returns the 20 most recent direct messages sent by the authenticating user. Includes detailed information about the sender and recipient user. You can request up to 200 direct messages per call, up to a maximum of 800 outgoing DMs. Important : This method requires an access token with RWD (read, write & direct message) permissions. Consult The Application Permission Model for more information.",
        "params": [
            {
                "name": "since_id",
                "desc": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.",
                "type": "status_id",
                "example": "12345",
                "required": false
            },
            {
                "name": "max_id",
                "desc": "Returns results with an ID less than (that is, older than) or equal to the specified ID.",
                "type": "status_id",
                "example": "54321",
                "required": false
            },
            {
                "name": "count",
                "desc": "Specifies the number of records to retrieve. Must be less than or equal to 200.",
                "type": "int",
                "example": "5",
                "required": false
            },
            {
                "name": "page",
                "desc": "Specifies the page of results to retrieve.",
                "type": "int",
                "example": "3",
                "required": false
            },
            {
                "name": "include_entities",
                "desc": "The entities node will not be included when set to false.",
                "type": "bool",
                "example": "false",
                "required": false
            }
        ],
        "path": "direct_messages/sent",
        "method": "GET"
    },
    {
        "desc": "Returns a single direct message, specified by an id parameter. Like the /1.1/direct_messages.format request, this method will include the user objects of the sender and recipient. Important : This method requires an access token with RWD (read, write & direct message) permissions. Consult The Application Permission Model for more information.",
        "params": [
            {
                "name": "id",
                "desc": "The ID of the direct message.",
                "type": "int",
                "example": "587424932",
                "required": true
            }
        ],
        "path": "direct_messages/show",
        "method": "GET"
    },
    {
        "desc": "Returns a collection of relevant Tweets matching a specified query. Please note that Twitter's search service and, by extension, the Search API is not meant to be an exhaustive source of Tweets. Not all Tweets will be indexed or made available via the search interface. In API v1.1, the response format of the Search API has been improved to return Tweet objects more similar to the objects you'll find across the REST API and platform. However, perspectival attributes (fields that pertain to the perspective of the authenticating user) are not currently supported on this endpoint. To learn how to use Twitter Search effectively, consult our guide to Using the Twitter Search API . See Working with Timelines to learn best practices for navigating results by since_id and max_id .",
        "params": [
            {
                "name": "q",
                "desc": "A UTF-8, URL-encoded search query of 500 characters maximum, including operators.  Queries may additionally be limited by complexity.",
                "type": "string",
                "example": "@noradio",
                "required": true
            },
            {
                "name": "geocode",
                "desc": "Returns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by \"latitude,longitude,radius\", where radius units must be specified as either \"mi\" (miles) or \"km\" (kilometers). Note that you cannot use the near operator via the API to geocode arbitrary locations; however you can use this geocode parameter to search near geocodes directly. A maximum of 1,000 distinct \"sub-regions\" will be considered when using the radius modifier.",
                "type": "string",
                "example": "37.781157,-122.398720,1mi",
                "required": false
            },
            {
                "name": "lang",
                "desc": "Restricts tweets to the given language, given by an ISO 639-1 code. Language detection is best-effort.",
                "type": "string",
                "example": "eu",
                "required": false
            },
            {
                "name": "locale",
                "desc": "Specify the language of the query you are sending (only ja is currently effective). This is intended for language-specific consumers and the default should work in the majority of cases.",
                "type": "string",
                "example": "ja",
                "required": false
            },
            {
                "name": "result_type",
                "desc": "Optional. Specifies what type of search results you would prefer to receive. The current default is \"recent.\" Valid values include:\n\u00a0\u00a0* mixed: Include both popular and real time results in the response.\n\u00a0\u00a0* recent: return only the most recent results in the response\n\u00a0\u00a0* popular: return only the most popular results in the response.",
                "type": "string",
                "example": "mixed",
                "required": false
            },
            {
                "name": "count",
                "desc": "The number of tweets to return per page, up to a maximum of 100. Defaults to 15. This was formerly the \"rpp\" parameter in the old Search API.",
                "type": "int",
                "example": "100",
                "required": false
            },
            {
                "name": "until",
                "desc": "Returns tweets created before the given date. Date should be formatted as YYYY-MM-DD. Keep in mind that the search index has a 7-day limit.  In other words, no tweets will be found for a date older than one week.",
                "type": "string",
                "example": "2015-07-19",
                "required": false
            },
            {
                "name": "since_id",
                "desc": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.",
                "type": "status_id",
                "example": "12345",
                "required": false
            },
            {
                "name": "max_id",
                "desc": "Returns results with an ID less than (that is, older than) or equal to the specified ID.",
                "type": "status_id",
                "example": "54321",
                "required": false
            },
            {
                "name": "include_entities",
                "desc": "The entities node will be disincluded when set to false.",
                "type": "bool",
                "example": "false",
                "required": false
            },
            {
                "name": "callback",
                "desc": "If supplied, the response will use the JSONP format with a callback of the given name. The usefulness of this parameter is somewhat diminished by the requirement of authentication for requests to this endpoint.",
                "type": "string",
                "example": "processTweets",
                "required": false
            }
        ],
        "path": "search/tweets",
        "method": "GET"
    },
    {
        "desc": "Returns the 20 most recent direct messages sent to the authenticating user. Includes detailed information about the sender and recipient user. You can request up to 200 direct messages per call, and only the most recent 200 DMs will be available using this endpoint. Important : This method requires an access token with RWD (read, write & direct message) permissions. Consult The Application Permission Model for more information.",
        "params": [
            {
                "name": "since_id",
                "desc": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.",
                "type": "status_id",
                "example": "12345",
                "required": false
            },
            {
                "name": "max_id",
                "desc": "Returns results with an ID less than (that is, older than) or equal to the specified ID.",
                "type": "status_id",
                "example": "54321",
                "required": false
            },
            {
                "name": "count",
                "desc": "Specifies the number of direct messages to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of Tweets to return because suspended or deleted content is removed after the count has been applied.",
                "type": "int",
                "example": "5",
                "required": false
            },
            {
                "name": "include_entities",
                "desc": "The entities node will not be included when set to false.",
                "type": "bool",
                "example": "false",
                "required": false
            },
            {
                "name": "skip_status",
                "desc": "When set to either true, t or 1 statuses will not be included in the returned user objects.",
                "type": "string",
                "required": false
            }
        ],
        "path": "direct_messages",
        "method": "GET"
    },
    {
        "desc": "Destroys the direct message specified in the required ID parameter. The authenticating user must be the recipient of the specified direct message. Important : This method requires an access token with RWD (read, write & direct message) permissions. Consult The Application Permission Model for more information.",
        "params": [
            {
                "name": "id",
                "desc": "The ID of the direct message to delete.",
                "type": "int",
                "example": "1270516771",
                "required": true
            },
            {
                "name": "include_entities",
                "desc": "The entities node will not be included when set to false.",
                "type": "bool",
                "example": "false",
                "required": false
            }
        ],
        "path": "direct_messages/destroy",
        "method": "POST"
    },
    {
        "desc": "Sends a new direct message to the specified user from the authenticating user. Requires both the user and text parameters and must be a POST. Returns the sent message in the requested format if successful. Direct Message Behavior The standard behavior of Direct Messages on Twitter requires that the recipient be following the sender. In most cases, any Direct Message sent to a recipient that is not following the sender will not be delivered and an error message will be returned. Alternatively, a recipient may have their allow_dms_from account setting set to \"all.\" In this case, any Direct Message sent to the recipient will be delivered, regardless of whether the recipient follows the sender. Once a Direct Message thread is established between two users, that thread can be used to send messages bi-directionally, regardless of the follow relationship. To discontinue the thread (effectively, leave the conversation), it is necessary to either explicitly leave the conversation in the Twitter client/website or perform a block of the user via the APIs or Twitter client/website. Note \nBesides determining the follow status between two users via friendships/lookup , you are unable to determine if you can Direct Message a user via the public API. If your app requires such behavior, you may apply for whitelisted access using this form . Your use case will be reviewed and not all requests will be granted. Your app may always attempt to send the Direct Message and handle any errors gracefully.",
        "params": [
            {
                "name": "user_id",
                "desc": "The ID of the user who should receive the direct message. Helpful for disambiguating when a valid user ID is also a valid screen name.",
                "type": "user_id",
                "example": "12345",
                "required": false
            },
            {
                "name": "screen_name",
                "desc": "The screen name of the user who should receive the direct message. Helpful for disambiguating when a valid screen name is also a user ID.",
                "type": "string",
                "example": "noradio",
                "required": false
            },
            {
                "name": "text",
                "desc": "The text of your direct message. Be sure to URL encode as necessary, and keep the message within the character count limit (available in the help/configuration endpoint)",
                "type": "string",
                "example": "Meet me behind the cafeteria after school",
                "required": true
            }
        ],
        "path": "direct_messages/new",
        "method": "POST"
    },
    {
        "desc": "Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from. Use POST friendships / update to set the \"no retweets\" status for a given user account on behalf of the current user.",
        "params": [
            {
                "name": "stringify_ids",
                "desc": "Many programming environments will not consume our ids due to their size. Provide this option to have ids returned as strings instead. Read more about [node:194]. This parameter is especially important to use in Javascript environments.",
                "type": "bool",
                "example": "true",
                "required": false
            }
        ],
        "path": "friendships/no_retweets/ids",
        "method": "GET"
    },
    {
        "desc": "Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their \"friends\"). At this time, results are ordered with the most recent following first \u2014 however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 5,000 user IDs and multiple \"pages\" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method is especially powerful when used in conjunction with GET users / lookup , a method that allows you to convert user IDs into full user objects in bulk.",
        "params": [
            {
                "name": "user_id",
                "desc": "The ID of the user for whom to return results for.",
                "type": "user_id",
                "example": "12345",
                "required": false
            },
            {
                "name": "screen_name",
                "desc": "The screen name of the user for whom to return results for.",
                "type": "string",
                "example": "noradio",
                "required": false
            },
            {
                "name": "cursor",
                "desc": "Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\" The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.",
                "type": "cursor",
                "example": "12893764510938",
                "required": false
            },
            {
                "name": "stringify_ids",
                "desc": "Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead. More about Twitter IDs.",
                "type": "bool",
                "example": "true",
                "required": false
            },
            {
                "name": "count",
                "desc": "Specifies the number of IDs attempt retrieval of, up to a maximum of 5,000 per distinct request. The value of count is best thought of as a limit to the number of results to return. When using the count parameter with this method, it is wise to use a consistent count value across all requests to the same user's collection. Usage of this parameter is encouraged in environments where all 5,000 IDs constitutes too large of a response.",
                "type": "int",
                "example": "2048",
                "required": false
            }
        ],
        "path": "friends/ids",
        "method": "GET"
    },
    {
        "desc": "Returns a cursored collection of user IDs for every user following the specified user. At this time, results are ordered with the most recent following first \u2014 however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 5,000 user IDs and multiple \"pages\" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method is especially powerful when used in conjunction with GET users / lookup , a method that allows you to convert user IDs into full user objects in bulk.",
        "params": [
            {
                "name": "user_id",
                "desc": "The ID of the user for whom to return results for.",
                "type": "user_id",
                "example": "12345",
                "required": false
            },
            {
                "name": "screen_name",
                "desc": "The screen name of the user for whom to return results for.",
                "type": "string",
                "example": "noradio",
                "required": false
            },
            {
                "name": "cursor",
                "desc": "Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\" \nThe response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.",
                "type": "cursor",
                "example": "12893764510938",
                "required": false
            },
            {
                "name": "stringify_ids",
                "desc": "Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead. More about [node:194].",
                "type": "bool",
                "example": "true",
                "required": false
            },
            {
                "name": "count",
                "desc": "Specifies the number of IDs attempt retrieval of, up to a maximum of 5,000 per distinct request. The value of count is best thought of as a limit to the number of results to return. When using the count parameter with this method, it is wise to use a consistent count value across all requests to the same user's collection. Usage of this parameter is encouraged in environments where all 5,000 IDs constitutes too large of a response.",
                "type": "int",
                "example": "2048",
                "required": false
            }
        ],
        "path": "followers/ids",
        "method": "GET"
    },
    {
        "desc": "Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.",
        "params": [
            {
                "name": "cursor",
                "desc": "Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\" \nThe response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See [node:10362, title=\"Using cursors to navigate collections\"] for more information.",
                "type": "cursor",
                "example": "12893764510938",
                "required": false
            },
            {
                "name": "stringify_ids",
                "desc": "Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead. More about [node:194].",
                "type": "bool",
                "example": "true",
                "required": false
            }
        ],
        "path": "friendships/incoming",
        "method": "GET"
    },
    {
        "desc": "Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.",
        "params": [
            {
                "name": "cursor",
                "desc": "Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\" \nThe response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See [node:10362, title=\"Using cursors to navigate collections\"] for more information.",
                "type": "cursor",
                "example": "12893764510938",
                "required": false
            },
            {
                "name": "stringify_ids",
                "desc": "Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead. More about [node:194].",
                "type": "bool",
                "example": "true",
                "required": false
            }
        ],
        "path": "friendships/outgoing",
        "method": "GET"
    },
    {
        "desc": "Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. If you are already friends with the user a HTTP 403 may be returned, though for performance reasons you may get a 200 OK message even if the friendship already exists. Actions taken in this method are asynchronous and changes will be eventually consistent.",
        "params": [
            {
                "name": "screen_name",
                "desc": "The screen name of the user for whom to befriend.",
                "type": "string",
                "example": "noradio",
                "required": false
            },
            {
                "name": "user_id",
                "desc": "The ID of the user for whom to befriend.",
                "type": "user_id",
                "example": "12345",
                "required": false
            },
            {
                "name": "follow",
                "desc": "Enable notifications for the target user.",
                "type": "bool",
                "example": "true",
                "required": false
            }
        ],
        "path": "friendships/create",
        "method": "POST"
    },
    {
        "desc": "Allows the authenticating user to unfollow the user specified in the ID parameter. Returns the unfollowed user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. Actions taken in this method are asynchronous and changes will be eventually consistent.",
        "params": [
            {
                "name": "screen_name",
                "desc": "The screen name of the user for whom to unfollow.",
                "type": "string",
                "example": "noradio",
                "required": false
            },
            {
                "name": "user_id",
                "desc": "The ID of the user for whom to unfollow.",
                "type": "user_id",
                "example": "12345",
                "required": false
            }
        ],
        "path": "friendships/destroy",
        "method": "POST"
    },
    {
        "desc": "Allows one to enable or disable retweets and device notifications from the specified user.",
        "params": [
            {
                "name": "screen_name",
                "desc": "The screen name of the user for whom to befriend.",
                "type": "string",
                "example": "noradio",
                "required": false
            },
            {
                "name": "user_id",
                "desc": "The ID of the user for whom to befriend.",
                "type": "user_id",
                "example": "12345",
                "required": false
            },
            {
                "name": "device",
                "desc": "Enable/disable device notifications from the target user.",
                "type": "bool",
                "example": "true",
                "required": false
            },
            {
                "name": "retweets",
                "desc": "Enable/disable retweets from the target user.",
                "type": "bool",
                "example": "true",
                "required": false
            }
        ],
        "path": "friendships/update",
        "method": "POST"
    },
    {
        "desc": "Returns detailed information about the relationship between two arbitrary users.",
        "params": [
            {
                "name": "source_id",
                "desc": "The user_id of the subject user.",
                "type": "status_id",
                "example": "3191321",
                "required": false
            },
            {
                "name": "source_screen_name",
                "desc": "The screen_name of the subject user.",
                "type": "string",
                "example": "raffi",
                "required": false
            },
            {
                "name": "target_id",
                "desc": "The user_id of the target user.",
                "type": "status_id",
                "example": "20",
                "required": false
            },
            {
                "name": "target_screen_name",
                "desc": "The screen_name of the target user.",
                "type": "string",
                "example": "noradio",
                "required": false
            }
        ],
        "path": "friendships/show",
        "method": "GET"
    },
    {
        "desc": "Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their \"friends\"). At this time, results are ordered with the most recent following first \u2014 however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple \"pages\" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information.",
        "params": [
            {
                "name": "user_id",
                "desc": "The ID of the user for whom to return results for.",
                "type": "user_id",
                "example": "12345",
                "required": false
            },
            {
                "name": "screen_name",
                "desc": "The screen name of the user for whom to return results for.",
                "type": "string",
                "example": "noradio",
                "required": false
            },
            {
                "name": "cursor",
                "desc": "Causes the results to be broken into pages. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\" The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See [node:10362, title=\"Using cursors to navigate collections\"] for more information.",
                "type": "cursor",
                "example": "12893764510938",
                "required": false
            },
            {
                "name": "count",
                "desc": "The number of users to return per page, up to a maximum of 200. Defaults to 20.",
                "type": "int",
                "example": "42",
                "required": false
            },
            {
                "name": "skip_status",
                "desc": "When set to either true, t or 1 statuses will not be included in the returned user objects.",
                "type": "bool",
                "example": "false",
                "required": false
            },
            {
                "name": "include_user_entities",
                "desc": "The user object entities node will be disincluded when set to false.",
                "type": "bool",
                "example": "false",
                "required": false
            }
        ],
        "path": "friends/list",
        "method": "GET"
    },
    {
        "desc": "Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first \u2014 however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple \"pages\" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information.",
        "params": [
            {
                "name": "user_id",
                "desc": "The ID of the user for whom to return results for.",
                "type": "user_id",
                "example": "12345",
                "required": false
            },
            {
                "name": "screen_name",
                "desc": "The screen name of the user for whom to return results for.",
                "type": "string",
                "example": "twitterdev",
                "required": false
            },
            {
                "name": "cursor",
                "desc": "Causes the results to be broken into pages. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\" The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.",
                "type": "cursor",
                "example": "12893764510938",
                "required": false
            },
            {
                "name": "count",
                "desc": "The number of users to return per page, up to a maximum of 200. Defaults to 20.",
                "type": "int",
                "example": "42",
                "required": false
            },
            {
                "name": "skip_status",
                "desc": "When set to either true, t or 1, statuses will not be included in the returned user objects. If set to any other value, statuses will be included.",
                "type": "bool",
                "example": "false",
                "required": false
            },
            {
                "name": "include_user_entities",
                "desc": "The user object entities node will not be included when set to false.",
                "type": "bool",
                "example": "false",
                "required": false
            }
        ],
        "path": "followers/list",
        "method": "GET"
    },
    {
        "desc": "Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided. Values for connections can be: following , following_requested , followed_by , none , blocking , muting .",
        "params": [
            {
                "name": "screen_name",
                "desc": "A comma separated list of screen names, up to 100 are allowed in a single request.",
                "type": "string",
                "example": "twitterapi,twitter",
                "required": false
            },
            {
                "name": "user_id",
                "desc": "A comma separated list of user IDs, up to 100 are allowed in a single request.",
                "type": "user_id",
                "example": "783214,6253282",
                "required": false
            }
        ],
        "path": "friendships/lookup",
        "method": "GET"
    },
    {
        "desc": "Returns settings (including current trend, geo and sleep time information) for the authenticating user.",
        "params": [],
        "path": "account/settings",
        "method": "GET"
    },
    {
        "desc": "Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful; returns a 401 status code and an error message if not. Use this method to test if supplied user credentials are valid. Request a User's Email Address Requesting a user's email address requires your application to be whitelisted by Twitter. To request access, please use this form . Once whitelisted, the \"Request email addresses from users\" checkbox will be available under your app permissions on apps.twitter.com . Privacy Policy URL and Terms of Service URL fields will also be available under settings which are required for email access. If enabled, users will be informed via the oauth/authorize dialog that your app can access their email address. Note \nYour app will need to regenerate the user access tokens for previously authenticated users to access their email address.",
        "params": [
            {
                "name": "include_entities",
                "desc": "The entities node will not be included when set to false.",
                "type": "bool",
                "example": "false",
                "required": false
            },
            {
                "name": "skip_status",
                "desc": "When set to either true, t or 1 statuses will not be included in the returned user object.",
                "type": "bool",
                "example": "true",
                "required": false
            },
            {
                "name": "include_email",
                "desc": "Use of this parameter requires whitelisting.",
                "type": "bool",
                "example": "true",
                "required": false
            }
        ],
        "path": "account/verify_credentials",
        "method": "GET"
    },
    {
        "desc": "Updates the authenticating user's settings.",
        "params": [
            {
                "name": "sleep_time_enabled",
                "desc": "When set to true, t or 1, will enable sleep time for the user. Sleep time is the time when push or SMS notifications should not be sent to the user.",
                "type": "bool",
                "example": "true",
                "required": false
            },
            {
                "name": "start_sleep_time",
                "desc": "The hour that sleep time should begin if it is enabled. The value for this parameter should be provided in ISO8601 format (i.e. 00-23). The time is considered to be in the same timezone as the user's time_zone setting.",
                "type": "int",
                "example": "13",
                "required": false
            },
            {
                "name": "end_sleep_time",
                "desc": "The hour that sleep time should end if it is enabled. The value for this parameter should be provided in ISO8601 format (i.e. 00-23). The time is considered to be in the same timezone as the user's time_zone setting.",
                "type": "int",
                "example": "13",
                "required": false
            },
            {
                "name": "time_zone",
                "desc": "The timezone dates and times should be displayed in for the user. The timezone must be one of the Rails TimeZone names.",
                "type": "string",
                "example": "Europe/Copenhagen",
                "required": false
            },
            {
                "name": "trend_location_woeid",
                "desc": "The Yahoo! Where On Earth ID to use as the user's default trend location. Global information is available by using 1 as the WOEID. The woeid must be one of the locations returned by [node:59].",
                "type": "int",
                "example": "1",
                "required": false
            },
            {
                "name": "allow_contributor_request",
                "desc": "Whether to allow others to include user as contributor. Possible values include \"all\" (anyone can include user), \"following\" (only followers can include user) or \"none\".",
                "type": "int",
                "example": "1",
                "required": false
            },
            {
                "name": "lang",
                "desc": "The language which Twitter should render in for this user. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by this endpoint.",
                "type": "string",
                "example": "it",
                "required": false
            }
        ],
        "path": "account/settings",
        "method": "POST"
    },
    {
        "desc": "Sets some values that users are able to set under the \"Account\" tab of their settings page. Only the parameters specified will be updated.",
        "params": [
            {
                "name": "name",
                "desc": "Full name associated with the profile. Maximum of 20 characters.",
                "type": "string",
                "example": "Marcel Molina",
                "required": false
            },
            {
                "name": "url",
                "desc": "URL associated with the profile. Will be prepended with \"http://\" if not present. Maximum of 100 characters.",
                "type": "string",
                "example": "http://project.ioni.st",
                "required": false
            },
            {
                "name": "location",
                "desc": "The city or country describing where the user of the account is located. The contents are not normalized or geocoded in any way. Maximum of 30 characters.",
                "type": "string",
                "example": "San Francisco, CA",
                "required": false
            },
            {
                "name": "description",
                "desc": "A description of the user owning the account. Maximum of 160 characters.",
                "type": "string",
                "example": "Flipped my wig at age 22 and it never grew back. Also: I work at Twitter.",
                "required": false
            },
            {
                "name": "profile_link_color",
                "desc": "Sets a hex value that controls the color scheme of links used on the authenticating user's profile page on twitter.com. This must be a valid hexadecimal value, and may be either three or six characters (ex: F00 or FF0000).",
                "type": "color",
                "required": false
            },
            {
                "name": "include_entities",
                "desc": "The entities node will not be included when set to false.",
                "type": "bool",
                "example": "false",
                "required": false
            },
            {
                "name": "skip_status",
                "desc": "When set to either true, t or 1 statuses will not be included in the returned user objects.",
                "type": "string",
                "required": false
            }
        ],
        "path": "account/update_profile",
        "method": "POST"
    },
    {
        "desc": "Updates the authenticating user's profile image. Note that this method expects raw multipart data, not a URL to an image. This method asynchronously processes the uploaded file before updating the user's profile image URL. You can either update your local cache the next time you request the user's information, or, at least 5 seconds after uploading the image, ask for the updated URL using GET users / show .",
        "params": [
            {
                "name": "image",
                "desc": "The avatar image for the profile, base64-encoded. Must be a valid GIF, JPG, or PNG image of less than 700 kilobytes in size. Images with width larger than 400 pixels will be scaled down. Animated GIFs will be converted to a static GIF of the first frame, removing the animation.",
                "type": "string",
                "required": true
            },
            {
                "name": "include_entities",
                "desc": "The entities node will not be included when set to false.",
                "type": "bool",
                "example": "false",
                "required": false
            },
            {
                "name": "skip_status",
                "desc": "When set to either true, t or 1 statuses will not be included in the returned user objects.",
                "type": "string",
                "required": false
            }
        ],
        "path": "account/update_profile_image",
        "method": "POST"
    },
    {
        "desc": "Returns a collection of user objects that the authenticating user is blocking. Important This method is cursored, meaning your app must make multiple requests in order to receive all blocks correctly. See Using cursors to navigate collections for more details on how cursoring works.",
        "params": [
            {
                "name": "include_entities",
                "desc": "The entities node will not be included when set to false.",
                "type": "bool",
                "example": "false",
                "required": false
            },
            {
                "name": "skip_status",
                "desc": "When set to either true, t or 1 statuses will not be included in the returned user objects.",
                "type": "string",
                "required": false
            },
            {
                "name": "cursor",
                "desc": "Causes the list of blocked users to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\" \nThe response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.",
                "type": "cursor",
                "example": "12893764510938",
                "required": false
            }
        ],
        "path": "blocks/list",
        "method": "GET"
    },
    {
        "desc": "Returns an array of numeric user ids the authenticating user is blocking. Important This method is cursored, meaning your app must make multiple requests in order to receive all blocks correctly. See Using cursors to navigate collections for more details on how cursoring works.",
        "params": [
            {
                "name": "stringify_ids",
                "desc": "Many programming environments will not consume our ids due to their size. Provide this option to have ids returned as strings instead. Read more about Twitter IDs.",
                "type": "bool",
                "example": "true",
                "required": false
            },
            {
                "name": "cursor",
                "desc": "Causes the list of IDs to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\" \nThe response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.",
                "type": "cursor",
                "example": "12893764510938",
                "required": false
            }
        ],
        "path": "blocks/ids",
        "method": "GET"
    },
    {
        "desc": "Blocks the specified user from following the authenticating user. In addition the blocked user will not show in the authenticating users mentions or timeline (unless retweeted by another user). If a follow or friend relationship exists it is destroyed. The URL pattern / version /block/create/:screen_name_or_user_id. format is still accepted but not recommended. As a sequence of numbers is a valid screen name we recommend using the screen_name or user_id parameter instead.",
        "params": [
            {
                "name": "screen_name",
                "desc": "The screen name of the potentially blocked user. Helpful for disambiguating when a valid screen name is also a user ID.",
                "type": "string",
                "example": "noradio",
                "required": false
            },
            {
                "name": "user_id",
                "desc": "The ID of the potentially blocked user. Helpful for disambiguating when a valid user ID is also a valid screen name.",
                "type": "user_id",
                "example": "12345",
                "required": false
            },
            {
                "name": "include_entities",
                "desc": "The entities node will not be included when set to false.",
                "type": "bool",
                "example": "false",
                "required": false
            },
            {
                "name": "skip_status",
                "desc": "When set to either true, t or 1 statuses will not be included in the returned user objects.",
                "type": "bool",
                "example": "true",
                "required": false
            }
        ],
        "path": "blocks/create",
        "method": "POST"
    },
    {
        "desc": "Un-blocks the user specified in the ID parameter for the authenticating user. Returns the un-blocked user in the requested format when successful.  If relationships existed before the block was instated, they will not be restored.",
        "params": [
            {
                "name": "screen_name",
                "desc": "The screen name of the potentially blocked user. Helpful for disambiguating when a valid screen name is also a user ID.",
                "type": "string",
                "example": "noradio",
                "required": false
            },
            {
                "name": "user_id",
                "desc": "The ID of the potentially blocked user. Helpful for disambiguating when a valid user ID is also a valid screen name.",
                "type": "user_id",
                "example": "12345",
                "required": false
            },
            {
                "name": "include_entities",
                "desc": "The entities node will not be included when set to false.",
                "type": "bool",
                "example": "false",
                "required": false
            },
            {
                "name": "skip_status",
                "desc": "When set to either true, t or 1 statuses will not be included in the returned user objects.",
                "type": "string",
                "required": false
            }
        ],
        "path": "blocks/destroy",
        "method": "POST"
    },
    {
        "desc": "Returns fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters. This method is especially useful when used in conjunction with collections of user IDs returned from GET friends / ids and GET followers / ids . GET users / show is used to retrieve a single user object. There are a few things to note when using this method. You must be following a protected user to be able to see their most recent status update. If you don't follow a protected user their status will be removed. The order of user IDs or screen names may not match the order of users in the returned array. If a requested user is unknown, suspended, or deleted, then that user will not be returned in the results list. If none of your lookup criteria can be satisfied by returning a user object, a HTTP 404 will be thrown. You are strongly encouraged to use a POST for larger requests.",
        "params": [
            {
                "name": "screen_name",
                "desc": "A comma separated list of screen names, up to 100 are allowed in a single request. You are strongly encouraged to use a POST for larger (up to 100 screen names) requests.",
                "type": "string",
                "example": "twitterapi,twitter",
                "required": false
            },
            {
                "name": "user_id",
                "desc": "A comma separated list of user IDs, up to 100 are allowed in a single request. You are strongly encouraged to use a POST for larger requests.",
                "type": "user_id",
                "example": "783214,6253282",
                "required": false
            },
            {
                "name": "include_entities",
                "desc": "The entities node that may appear within embedded statuses will be disincluded when set to false.",
                "type": "bool",
                "example": "false",
                "required": false
            }
        ],
        "path": "users/lookup",
        "method": "GET"
    },
    {
        "desc": "Returns a variety of information about the user specified by the required user_id or screen_name parameter. The author's most recent Tweet will be returned inline when possible. GET users / lookup is used to retrieve a bulk collection of user objects. You must be following a protected user to be able to see their most recent Tweet. If you don't follow a protected user, the users Tweet will be removed. A Tweet will not always be returned in the current_status field.",
        "params": [
            {
                "name": "user_id",
                "desc": "The ID of the user for whom to return results for. Either an id or screen_name is required for this method.",
                "type": "user_id",
                "example": "12345",
                "required": true
            },
            {
                "name": "screen_name",
                "desc": "The screen name of the user for whom to return results for. Either a id or screen_name is required for this method.",
                "type": "string",
                "example": "noradio",
                "required": true
            },
            {
                "name": "include_entities",
                "desc": "The entities node will be disincluded when set to false.",
                "type": "bool",
                "example": "false",
                "required": false
            }
        ],
        "path": "users/show",
        "method": "GET"
    },
    {
        "desc": "Provides a simple, relevance-based search interface to public user accounts on Twitter. Try querying by topical interest, full name, company name, location, or other criteria. Exact match searches are not supported. Only the first 1,000 matching results are available.",
        "params": [
            {
                "name": "q",
                "desc": "The search query to run against people search.",
                "type": "string",
                "example": "Twitter%20API",
                "required": true
            },
            {
                "name": "page",
                "desc": "Specifies the page of results to retrieve.",
                "type": "int",
                "example": "3",
                "required": false
            },
            {
                "name": "count",
                "desc": "The number of potential user results to retrieve per page. This value has a maximum of 20.",
                "type": "int",
                "example": "5",
                "required": false
            },
            {
                "name": "include_entities",
                "desc": "The entities node will be disincluded from embedded tweet objects when set to false.",
                "type": "bool",
                "example": "false",
                "required": false
            }
        ],
        "path": "users/search",
        "method": "GET"
    },
    {
        "desc": "Removes the uploaded profile banner for the authenticating user. Returns HTTP 200 upon success.",
        "params": [],
        "path": "account/remove_profile_banner",
        "method": "POST"
    },
    {
        "desc": "Uploads a profile banner on behalf of the authenticating user. More information about sizing variations can be found in User Profile Images and Banners and GET users / profile_banner . Profile banner images are processed asynchronously. The profile_banner_url and its variant sizes will not necessary be available directly after upload. HTTP Response Codes Code(s) Meaning 200, 201, 202 Profile banner image successfully uploaded 400 Either an image was not provided, or the image data could not be processed 422 The image could not be resized, or is too large.",
        "params": [
            {
                "name": "banner",
                "desc": "The Base64-encoded or raw image data being uploaded as the user's new profile banner.",
                "type": "string",
                "required": true
            },
            {
                "name": "width",
                "desc": "The width of the preferred section of the image being uploaded in pixels. Use with height, offset_left, and offset_top to select the desired region of the image to use.",
                "type": "string",
                "required": false
            },
            {
                "name": "height",
                "desc": "The height of the preferred section of the image being uploaded in pixels. Use with width, offset_left, and offset_top to select the desired region of the image to use.",
                "type": "string",
                "required": false
            },
            {
                "name": "offset_left",
                "desc": "The number of pixels by which to offset the uploaded image from the left. Use with height, width, and offset_top to select the desired region of the image to use.",
                "type": "string",
                "required": false
            },
            {
                "name": "offset_top",
                "desc": "The number of pixels by which to offset the uploaded image from the top. Use with height, width, and offset_left to select the desired region of the image to use.",
                "type": "string",
                "required": false
            }
        ],
        "path": "account/update_profile_banner",
        "method": "POST"
    },
    {
        "desc": "Returns a map of the available size variations of the specified user's profile banner. If the user has not uploaded a profile banner, a HTTP 404 will be served instead. This method can be used instead of string manipulation on the profile_banner_url returned in user objects as described in Profile Images and Banners . The profile banner data available at each size variant's URL is in PNG format.",
        "params": [
            {
                "name": "user_id",
                "desc": "The ID of the user for whom to return results. Helpful for disambiguating when a valid user ID is also a valid screen name.",
                "type": "user_id",
                "example": "12345",
                "required": false
            },
            {
                "name": "screen_name",
                "desc": "The screen name of the user for whom to return results. Helpful for disambiguating when a valid screen name is also a user ID.",
                "type": "string",
                "example": "noradio",
                "required": false
            }
        ],
        "path": "users/profile_banner",
        "method": "GET"
    },
    {
        "desc": "Mutes the user specified in the ID parameter for the authenticating user. Returns the muted user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. Actions taken in this method are asynchronous and changes will be eventually consistent.",
        "params": [
            {
                "name": "screen_name",
                "desc": "The screen name of the potentially muted user. Helpful for disambiguating when a valid screen name is also a user ID.",
                "type": "string",
                "example": "whiteleaf",
                "required": false
            },
            {
                "name": "user_id",
                "desc": "The ID of the potentially muted user. Helpful for disambiguating when a valid user ID is also a valid screen name.",
                "type": "user_id",
                "example": "12345",
                "required": false
            }
        ],
        "path": "mutes/users/create",
        "method": "POST"
    },
    {
        "desc": "Un-mutes the user specified in the ID parameter for the authenticating user. Returns the unmuted user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. Actions taken in this method are asynchronous and changes will be eventually consistent.",
        "params": [
            {
                "name": "screen_name",
                "desc": "The screen name of the potentially muted user. Helpful for disambiguating when a valid screen name is also a user ID.",
                "type": "string",
                "example": "whiteleaf",
                "required": false
            },
            {
                "name": "user_id",
                "desc": "The ID of the potentially muted user. Helpful for disambiguating when a valid user ID is also a valid screen name.",
                "type": "user_id",
                "example": "12345",
                "required": false
            }
        ],
        "path": "mutes/users/destroy",
        "method": "POST"
    },
    {
        "desc": "Returns an array of numeric user ids the authenticating user has muted.",
        "params": [
            {
                "name": "cursor",
                "desc": "Causes the list of IDs to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\"\nThe response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See [node:10362, title=\"Using cursors to navigate collections\"] for more information.",
                "type": "cursor",
                "example": "2",
                "required": false
            }
        ],
        "path": "mutes/users/ids",
        "method": "GET"
    },
    {
        "desc": "Returns an array of user objects the authenticating user has muted.",
        "params": [
            {
                "name": "cursor",
                "desc": "Causes the list of IDs to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\"\nThe response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See [node:10362, title=\"Using cursors to navigate collections\"] for more information.",
                "type": "cursor",
                "example": "2",
                "required": false
            },
            {
                "name": "include_entities",
                "desc": "The entities node will not be included when set to false.",
                "type": "bool",
                "example": "false",
                "required": false
            },
            {
                "name": "skip_status",
                "desc": "When set to either true, t or 1 statuses will not be included in the returned user objects.",
                "type": "bool",
                "example": "true",
                "required": false
            }
        ],
        "path": "mutes/users/list",
        "method": "GET"
    },
    {
        "desc": "Access the users in a given category of the Twitter suggested user list. It is recommended that applications cache this data for no more than one hour.",
        "params": [
            {
                "name": "slug",
                "desc": "The short name of list or a category",
                "type": "string",
                "example": "twitter",
                "required": true
            },
            {
                "name": "lang",
                "desc": "Restricts the suggested categories to the requested language. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by the GET help / languages API request. Unsupported language codes will receive English (en) results. If you use lang in this request, ensure you also include it when requesting the GET users / suggestions / :slug list.",
                "type": "string",
                "required": false
            }
        ],
        "path": "users/suggestions/:slug",
        "method": "GET"
    },
    {
        "desc": "Access to Twitter's suggested user list. This returns the list of suggested user categories. The category can be used in GET users / suggestions / :slug to get the users in that category.",
        "params": [
            {
                "name": "lang",
                "desc": "Restricts the suggested categories to the requested language. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by the GET help / languages API request. Unsupported language codes will receive English (en) results. If you use lang in this request, ensure you also include it when requesting the GET users / suggestions / :slug list.",
                "type": "string",
                "required": false
            }
        ],
        "path": "users/suggestions",
        "method": "GET"
    },
    {
        "desc": "Access the users in a given category of the Twitter suggested user list and return their most recent status if they are not a protected user.",
        "params": [
            {
                "name": "slug",
                "desc": "The short name of list or a category",
                "type": "string",
                "example": "twitter",
                "required": true
            }
        ],
        "path": "users/suggestions/:slug/members",
        "method": "GET"
    },
    {
        "desc": "Returns the 20 most recent Tweets liked by the authenticating or specified user. Note: the like action was known as favorite before November 3, 2015; the historical naming remains in API methods and object properties.",
        "params": [
            {
                "name": "user_id",
                "desc": "The ID of the user for whom to return results for.",
                "type": "user_id",
                "example": "12345",
                "required": false
            },
            {
                "name": "screen_name",
                "desc": "The screen name of the user for whom to return results for.",
                "type": "string",
                "example": "noradio",
                "required": false
            },
            {
                "name": "count",
                "desc": "Specifies the number of records to retrieve. Must be less than or equal to 200; defaults to 20. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied.",
                "type": "int",
                "example": "5",
                "required": false
            },
            {
                "name": "since_id",
                "desc": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.",
                "type": "status_id",
                "example": "12345",
                "required": false
            },
            {
                "name": "max_id",
                "desc": "Returns results with an ID less than (that is, older than) or equal to the specified ID.",
                "type": "status_id",
                "example": "54321",
                "required": false
            },
            {
                "name": "include_entities",
                "desc": "The entities node will be omitted when set to false.",
                "type": "bool",
                "example": "false",
                "required": false
            }
        ],
        "path": "favorites/list",
        "method": "GET"
    },
    {
        "desc": "Note: the like action was known as favorite before November 3, 2015; the historical naming remains in API methods and object properties. Un-likes the status specified in the ID parameter as the authenticating user. Returns the un-liked status in the requested format when successful. This process invoked by this method is asynchronous. The immediately returned status may not indicate the resultant liked status of the Tweet. A 200 OK response from this method will indicate whether the intended action was successful or not.",
        "params": [
            {
                "name": "id",
                "desc": "The numerical ID of the desired status.",
                "type": "int",
                "example": "123",
                "required": true
            },
            {
                "name": "include_entities",
                "desc": "The entities node will be omitted when set to false.",
                "type": "bool",
                "example": "false",
                "required": false
            }
        ],
        "path": "favorites/destroy",
        "method": "POST"
    },
    {
        "desc": "Note: the like action was known as favorite before November 3, 2015; the historical naming remains in API methods and object properties. Likes the status specified in the ID parameter as the authenticating user. Returns the liked status when successful. This process invoked by this method is asynchronous. The immediately returned status may not indicate the resultant liked status of the tweet. A 200 OK response from this method will indicate whether the intended action was successful or not.",
        "params": [
            {
                "name": "id",
                "desc": "The numerical ID of the desired status.",
                "type": "int",
                "example": "123",
                "required": true
            },
            {
                "name": "include_entities",
                "desc": "The entities node will be omitted when set to false.",
                "type": "bool",
                "example": "false",
                "required": false
            }
        ],
        "path": "favorites/create",
        "method": "POST"
    },
    {
        "desc": "Returns all lists the authenticating or specified user subscribes to, including their own. The user is specified using the user_id or screen_name parameters. If no user is given, the authenticating user is used. This method used to be GET lists in version 1.0 of the API and has been renamed for consistency with other call. A maximum of 100 results will be returned by this call.  Subscribed lists are returned first, followed by owned lists.  This means that if a user subscribes to 90 lists and owns 20 lists, this method returns 90 subscriptions and 10 owned lists.  The reverse method returns owned lists first, so with reverse=true , 20 owned lists and 80 subscriptions would be returned.  If your goal is to obtain every list a user owns or subscribes to, use GET lists / ownerships and/or GET lists / subscriptions instead.",
        "params": [
            {
                "name": "user_id",
                "desc": "The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.",
                "type": "user_id",
                "required": false
            },
            {
                "name": "screen_name",
                "desc": "The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID.",
                "type": "string",
                "example": "noradio",
                "required": false
            },
            {
                "name": "reverse",
                "desc": "Set this to true if you would like owned lists to be returned first.  See description above for information on how this parameter works.",
                "type": "bool",
                "example": "true",
                "required": false
            }
        ],
        "path": "lists/list",
        "method": "GET"
    },
    {
        "desc": "Returns a timeline of tweets authored by members of the specified list. Retweets are included by default. Use the include_rts=false parameter to omit retweets. Embedded Timelines is a great way to embed list timelines on your website.",
        "params": [
            {
                "name": "list_id",
                "desc": "The numerical id of the list.",
                "type": "status_id",
                "required": true
            },
            {
                "name": "slug",
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.",
                "type": "string",
                "required": true
            },
            {
                "name": "owner_screen_name",
                "desc": "The screen name of the user who owns the list being requested by a slug.",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_id",
                "desc": "The user ID of the user who owns the list being requested by a slug.",
                "type": "status_id",
                "required": false
            },
            {
                "name": "since_id",
                "desc": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.",
                "type": "status_id",
                "required": false
            },
            {
                "name": "max_id",
                "desc": "Returns results with an ID less than (that is, older than) or equal to the specified ID.",
                "type": "status_id",
                "required": false
            },
            {
                "name": "count",
                "desc": "Specifies the number of results to retrieve per \"page.\"",
                "type": "int",
                "required": false
            },
            {
                "name": "include_entities",
                "desc": "Entities are ON by default in API 1.1, each tweet includes a node called \"entities\". This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. You can omit entities from the result by using include_entities=false",
                "type": "string",
                "required": false
            },
            {
                "name": "include_rts",
                "desc": "When set to either true, t or 1, the list timeline will contain native retweets (if they exist) in addition to the standard stream of tweets. The output format of retweeted tweets is identical to the representation you see in home_timeline.",
                "type": "string",
                "required": false
            }
        ],
        "path": "lists/statuses",
        "method": "GET"
    },
    {
        "desc": "Removes the specified member from the list. The authenticated user must be the list's owner to remove members from the list.",
        "params": [
            {
                "name": "list_id",
                "desc": "The numerical id of the list.",
                "type": "status_id",
                "required": false
            },
            {
                "name": "slug",
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.",
                "type": "string",
                "required": false
            },
            {
                "name": "user_id",
                "desc": "The ID of the user to remove from the list. Helpful for disambiguating when a valid user ID is also a valid screen name.",
                "type": "user_id",
                "required": false
            },
            {
                "name": "screen_name",
                "desc": "The screen name of the user for whom to remove from the list. Helpful for disambiguating when a valid screen name is also a user ID.",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_screen_name",
                "desc": "The screen name of the user who owns the list being requested by a slug.",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_id",
                "desc": "The user ID of the user who owns the list being requested by a slug.",
                "type": "status_id",
                "required": false
            }
        ],
        "path": "lists/members/destroy",
        "method": "POST"
    },
    {
        "desc": "Returns the lists the specified user has been added to. If user_id or screen_name are not provided the memberships for the authenticating user are returned.",
        "params": [
            {
                "name": "user_id",
                "desc": "The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.",
                "type": "user_id",
                "required": false
            },
            {
                "name": "screen_name",
                "desc": "The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID.",
                "type": "string",
                "required": false
            },
            {
                "name": "count",
                "desc": "The amount of results to return per page. Defaults to 20. No more than 1000 results will ever be returned in a single page.",
                "type": "int",
                "required": false
            },
            {
                "name": "cursor",
                "desc": "Breaks the results into pages. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. It is recommended to always use cursors when the method supports them.  See [node:10362] for more information.",
                "type": "cursor",
                "required": false
            },
            {
                "name": "filter_to_owned_lists",
                "desc": "When set to true, t or 1, will return just lists the authenticating user owns, and the user represented by user_id or screen_name is a member of.",
                "type": "string",
                "required": false
            }
        ],
        "path": "lists/memberships",
        "method": "GET"
    },
    {
        "desc": "Returns the subscribers of the specified list. Private list subscribers will only be shown if the authenticated user owns the specified list.",
        "params": [
            {
                "name": "list_id",
                "desc": "The numerical id of the list.",
                "type": "status_id",
                "required": true
            },
            {
                "name": "slug",
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.",
                "type": "string",
                "required": true
            },
            {
                "name": "owner_screen_name",
                "desc": "The screen name of the user who owns the list being requested by a slug.",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_id",
                "desc": "The user ID of the user who owns the list being requested by a slug.",
                "type": "status_id",
                "required": false
            },
            {
                "name": "count",
                "desc": "Specifies the number of results to return per page (see cursor below). The default is 20, with a maximum of 5,000.",
                "type": "int",
                "required": false
            },
            {
                "name": "cursor",
                "desc": "Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. See Using cursors to navigate collections for more information.",
                "type": "cursor",
                "required": false
            },
            {
                "name": "include_entities",
                "desc": "When set to either true, t or 1, each tweet will include a node called \"entities\". This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. See Tweet Entities for more details.",
                "type": "string",
                "required": false
            },
            {
                "name": "skip_status",
                "desc": "When set to either true, t or 1 statuses will not be included in the returned user objects.",
                "type": "string",
                "required": false
            }
        ],
        "path": "lists/subscribers",
        "method": "GET"
    },
    {
        "desc": "Subscribes the authenticated user to the specified list.",
        "params": [
            {
                "name": "owner_screen_name",
                "desc": "The screen name of the user who owns the list being requested by a slug.",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_id",
                "desc": "The user ID of the user who owns the list being requested by a slug.",
                "type": "status_id",
                "required": false
            },
            {
                "name": "list_id",
                "desc": "The numerical id of the list.",
                "type": "status_id",
                "required": true
            },
            {
                "name": "slug",
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.",
                "type": "string",
                "required": true
            }
        ],
        "path": "lists/subscribers/create",
        "method": "POST"
    },
    {
        "desc": "Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.",
        "params": [
            {
                "name": "owner_screen_name",
                "desc": "The screen name of the user who owns the list being requested by a slug.",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_id",
                "desc": "The user ID of the user who owns the list being requested by a slug.",
                "type": "status_id",
                "required": false
            },
            {
                "name": "list_id",
                "desc": "The numerical id of the list.",
                "type": "status_id",
                "required": true
            },
            {
                "name": "slug",
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.",
                "type": "string",
                "required": true
            },
            {
                "name": "user_id",
                "desc": "The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.",
                "type": "user_id",
                "required": true
            },
            {
                "name": "screen_name",
                "desc": "The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID.",
                "type": "string",
                "required": true
            },
            {
                "name": "include_entities",
                "desc": "When set to either true, t or 1, each tweet will include a node called \"entities\". This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. See Tweet Entities for more details.",
                "type": "string",
                "required": false
            },
            {
                "name": "skip_status",
                "desc": "When set to either true, t or 1 statuses will not be included in the returned user objects.",
                "type": "string",
                "required": false
            }
        ],
        "path": "lists/subscribers/show",
        "method": "GET"
    },
    {
        "desc": "Unsubscribes the authenticated user from the specified list.",
        "params": [
            {
                "name": "list_id",
                "desc": "The numerical id of the list.",
                "type": "status_id",
                "required": true
            },
            {
                "name": "slug",
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.",
                "type": "string",
                "required": true
            },
            {
                "name": "owner_screen_name",
                "desc": "The screen name of the user who owns the list being requested by a slug.",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_id",
                "desc": "The user ID of the user who owns the list being requested by a slug.",
                "type": "status_id",
                "required": false
            }
        ],
        "path": "lists/subscribers/destroy",
        "method": "POST"
    },
    {
        "desc": "Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Note that lists can't have more than 5,000 members, and you are limited to adding up to 100 members to a list at a time with this method. Please note that there can be issues with lists that rapidly remove and add memberships. Take care when using these methods such that you are not too rapidly switching between removals and adds on the same list.",
        "params": [
            {
                "name": "list_id",
                "desc": "The numerical id of the list.",
                "type": "status_id",
                "required": true
            },
            {
                "name": "slug",
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.",
                "type": "string",
                "required": true
            },
            {
                "name": "user_id",
                "desc": "A comma separated list of user IDs, up to 100 are allowed in a single request.",
                "type": "user_id",
                "required": false
            },
            {
                "name": "screen_name",
                "desc": "A comma separated list of screen names, up to 100 are allowed in a single request.",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_screen_name",
                "desc": "The screen name of the user who owns the list being requested by a slug.",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_id",
                "desc": "The user ID of the user who owns the list being requested by a slug.",
                "type": "status_id",
                "required": false
            }
        ],
        "path": "lists/members/create_all",
        "method": "POST"
    },
    {
        "desc": "Check if the specified user is a member of the specified list.",
        "params": [
            {
                "name": "list_id",
                "desc": "The numerical id of the list.",
                "type": "status_id",
                "required": true
            },
            {
                "name": "slug",
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.",
                "type": "string",
                "required": true
            },
            {
                "name": "user_id",
                "desc": "The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.",
                "type": "user_id",
                "required": true
            },
            {
                "name": "screen_name",
                "desc": "The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID.",
                "type": "string",
                "required": true
            },
            {
                "name": "owner_screen_name",
                "desc": "The screen name of the user who owns the list being requested by a slug.",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_id",
                "desc": "The user ID of the user who owns the list being requested by a slug.",
                "type": "status_id",
                "required": false
            },
            {
                "name": "include_entities",
                "desc": "When set to either true, t or 1, each tweet will include a node called \"entities\". This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. See Tweet Entities for more details.",
                "type": "string",
                "required": false
            },
            {
                "name": "skip_status",
                "desc": "When set to either true, t or 1 statuses will not be included in the returned user objects.",
                "type": "string",
                "required": false
            }
        ],
        "path": "lists/members/show",
        "method": "GET"
    },
    {
        "desc": "Returns the members of the specified list. Private list members will only be shown if the authenticated user owns the specified list.",
        "params": [
            {
                "name": "list_id",
                "desc": "The numerical id of the list.",
                "type": "status_id",
                "required": true
            },
            {
                "name": "slug",
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.",
                "type": "string",
                "required": true
            },
            {
                "name": "owner_screen_name",
                "desc": "The screen name of the user who owns the list being requested by a slug.",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_id",
                "desc": "The user ID of the user who owns the list being requested by a slug.",
                "type": "status_id",
                "required": false
            },
            {
                "name": "count",
                "desc": "Specifies the number of results to return per page (see cursor below). The default is 20, with a maximum of 5,000.",
                "type": "int",
                "required": false
            },
            {
                "name": "cursor",
                "desc": "Causes the collection of list members to be broken into \"pages\" of consistent sizes (specified by the count parameter). If no cursor is provided, a value of -1 will be assumed, which is the first \"page.\" \nThe response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.",
                "type": "cursor",
                "example": "12893764510938",
                "required": false
            },
            {
                "name": "include_entities",
                "desc": "The entities node will be disincluded when set to false.",
                "type": "bool",
                "example": "false",
                "required": false
            },
            {
                "name": "skip_status",
                "desc": "When set to either true, t or 1 statuses will not be included in the returned user objects.",
                "type": "string",
                "required": false
            }
        ],
        "path": "lists/members",
        "method": "GET"
    },
    {
        "desc": "Add a member to a list. The authenticated user must own the list to be able to add members to it. Note that lists cannot have more than 5,000 members.",
        "params": [
            {
                "name": "list_id",
                "desc": "The numerical id of the list.",
                "type": "status_id",
                "required": true
            },
            {
                "name": "slug",
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.",
                "type": "string",
                "required": true
            },
            {
                "name": "user_id",
                "desc": "The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.",
                "type": "user_id",
                "required": true
            },
            {
                "name": "screen_name",
                "desc": "The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID.",
                "type": "string",
                "required": true
            },
            {
                "name": "owner_screen_name",
                "desc": "The screen name of the user who owns the list being requested by a slug.",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_id",
                "desc": "The user ID of the user who owns the list being requested by a slug.",
                "type": "status_id",
                "required": false
            }
        ],
        "path": "lists/members/create",
        "method": "POST"
    },
    {
        "desc": "Deletes the specified list. The authenticated user must own the list to be able to destroy it.",
        "params": [
            {
                "name": "owner_screen_name",
                "desc": "The screen name of the user who owns the list being requested by a slug.",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_id",
                "desc": "The user ID of the user who owns the list being requested by a slug.",
                "type": "status_id",
                "required": false
            },
            {
                "name": "list_id",
                "desc": "The numerical id of the list.",
                "type": "status_id",
                "required": true
            },
            {
                "name": "slug",
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.",
                "type": "string",
                "required": true
            }
        ],
        "path": "lists/destroy",
        "method": "POST"
    },
    {
        "desc": "Updates the specified list. The authenticated user must own the list to be able to update it.",
        "params": [
            {
                "name": "list_id",
                "desc": "The numerical id of the list.",
                "type": "status_id",
                "required": true
            },
            {
                "name": "slug",
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.",
                "type": "string",
                "required": true
            },
            {
                "name": "name",
                "desc": "The name for the list.",
                "type": "string",
                "required": false
            },
            {
                "name": "mode",
                "desc": "Whether your list is public or private. Values can be public or private. If no mode is specified the list will be public.",
                "type": "string",
                "required": false
            },
            {
                "name": "description",
                "desc": "The description to give the list.",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_screen_name",
                "desc": "The screen name of the user who owns the list being requested by a slug.",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_id",
                "desc": "The user ID of the user who owns the list being requested by a slug.",
                "type": "status_id",
                "required": false
            }
        ],
        "path": "lists/update",
        "method": "POST"
    },
    {
        "desc": "Creates a new list for the authenticated user. Note that you can create up to 1000 lists per account.",
        "params": [
            {
                "name": "name",
                "desc": "The name for the list.",
                "type": "string",
                "required": true
            },
            {
                "name": "mode",
                "desc": "Whether your list is public or private. Values can be public or private. If no mode is specified the list will be public.",
                "type": "string",
                "required": false
            },
            {
                "name": "description",
                "desc": "The description to give the list.",
                "type": "string",
                "required": false
            }
        ],
        "path": "lists/create",
        "method": "POST"
    },
    {
        "desc": "Returns the specified list. Private lists will only be shown if the authenticated user owns the specified list.",
        "params": [
            {
                "name": "list_id",
                "desc": "The numerical id of the list.",
                "type": "status_id",
                "required": true
            },
            {
                "name": "slug",
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.",
                "type": "string",
                "required": true
            },
            {
                "name": "owner_screen_name",
                "desc": "The screen name of the user who owns the list being requested by a slug.",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_id",
                "desc": "The user ID of the user who owns the list being requested by a slug.",
                "type": "status_id",
                "required": false
            }
        ],
        "path": "lists/show",
        "method": "GET"
    },
    {
        "desc": "Obtain a collection of the lists the specified user is subscribed to, 20 lists per page by default.  Does not include the user's own lists.",
        "params": [
            {
                "name": "user_id",
                "desc": "The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name.",
                "type": "user_id",
                "required": false
            },
            {
                "name": "screen_name",
                "desc": "The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID.",
                "type": "string",
                "required": false
            },
            {
                "name": "count",
                "desc": "The amount of results to return per page. Defaults to 20. No more than 1000 results will ever be returned in a single page.",
                "type": "int",
                "required": false
            },
            {
                "name": "cursor",
                "desc": "Breaks the results into pages. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. It is recommended to always use cursors when the method supports them.  See [node:10362] for more information.",
                "type": "cursor",
                "required": false
            }
        ],
        "path": "lists/subscriptions",
        "method": "GET"
    },
    {
        "desc": "Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to remove members from it. Note that lists can't have more than 500 members, and you are limited to removing up to 100 members to a list at a time with this method. Please note that there can be issues with lists that rapidly remove and add memberships. Take care when using these methods such that you are not too rapidly switching between removals and adds on the same list.",
        "params": [
            {
                "name": "list_id",
                "desc": "The numerical id of the list.",
                "type": "status_id",
                "required": true
            },
            {
                "name": "slug",
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.",
                "type": "string",
                "required": true
            },
            {
                "name": "user_id",
                "desc": "A comma separated list of user IDs, up to 100 are allowed in a single request.",
                "type": "user_id",
                "required": false
            },
            {
                "name": "screen_name",
                "desc": "A comma separated list of screen names, up to 100 are allowed in a single request.",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_screen_name",
                "desc": "The screen name of the user who owns the list being requested by a slug.",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_id",
                "desc": "The user ID of the user who owns the list being requested by a slug.",
                "type": "status_id",
                "required": false
            }
        ],
        "path": "lists/members/destroy_all",
        "method": "POST"
    },
    {
        "desc": "Returns the lists owned by the specified Twitter user. Private lists will only be shown if the authenticated user is also the owner of the lists.",
        "params": [
            {
                "name": "user_id",
                "desc": "The ID of the user for whom to return results for.",
                "type": "user_id",
                "required": false
            },
            {
                "name": "screen_name",
                "desc": "The screen name of the user for whom to return results for.",
                "type": "string",
                "required": false
            },
            {
                "name": "count",
                "desc": "The amount of results to return per page. Defaults to 20. No more than 1000 results will ever be returned in a single page.",
                "type": "int",
                "required": false
            },
            {
                "name": "cursor",
                "desc": "Breaks the results into pages. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. It is recommended to always use cursors when the method supports them.  See [node:10362] for more information.",
                "type": "cursor",
                "required": false
            }
        ],
        "path": "lists/ownerships",
        "method": "GET"
    },
    {
        "desc": "Returns the authenticated user's saved search queries.",
        "params": [],
        "path": "saved_searches/list",
        "method": "GET"
    },
    {
        "desc": "Retrieve the information for the saved search represented by the given id. The authenticating user must be the owner of saved search ID being requested.",
        "params": [
            {
                "name": "id",
                "desc": "The ID of the saved search.",
                "type": "int",
                "example": "313006",
                "required": true
            }
        ],
        "path": "saved_searches/show/:id",
        "method": "GET"
    },
    {
        "desc": "Create a new saved search for the authenticated user. A user may only have 25 saved searches.",
        "params": [
            {
                "name": "query",
                "desc": "The query of the search the user would like to save. The query must be 100 characters or less.",
                "type": "string",
                "required": true
            }
        ],
        "path": "saved_searches/create",
        "method": "POST"
    },
    {
        "desc": "Destroys a saved search for the authenticating user. The authenticating user must be the owner of saved search id being destroyed.",
        "params": [
            {
                "name": "id",
                "desc": "The ID of the saved search.",
                "type": "int",
                "example": "313006",
                "required": true
            }
        ],
        "path": "saved_searches/destroy/:id",
        "method": "POST"
    },
    {
        "desc": "Returns all the information about a known place .",
        "params": [
            {
                "name": "place_id",
                "desc": "A place in the world. These IDs can be retrieved from geo/reverse_geocode.",
                "type": "place_id",
                "example": "df51dec6f4ee2b2c",
                "required": true
            }
        ],
        "path": "geo/id/:place_id",
        "method": "GET"
    },
    {
        "desc": "Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status. This request is an informative call and will deliver generalized results about geography.",
        "params": [
            {
                "name": "lat",
                "desc": "The latitude to search around. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding long parameter.",
                "type": "string",
                "example": "37.7821120598956",
                "required": true
            },
            {
                "name": "long",
                "desc": "The longitude to search around. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter.",
                "type": "string",
                "example": "-122.400612831116",
                "required": true
            },
            {
                "name": "accuracy",
                "desc": "A hint on the \"region\" in which to search. If a number, then this is a radius in meters, but it can also take a string that is suffixed with ft to specify feet. If this is not passed in, then it is assumed to be 0m. If coming from a device, in practice, this value is whatever accuracy the device has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.).",
                "type": "string",
                "example": "5ft",
                "required": false
            },
            {
                "name": "granularity",
                "desc": "This is the minimal granularity of place types to return and must be one of: poi, neighborhood, city, admin or country. If no granularity is provided for the request neighborhood is assumed. Setting this to city, for example, will find places which have a type of city, admin or country.",
                "type": "string",
                "example": "city",
                "required": false
            },
            {
                "name": "max_results",
                "desc": "A hint as to the number of results to return. This does not guarantee that the number of results returned will equal max_results, but instead informs how many \"nearby\" results to return. Ideally, only pass in the number of places you intend to display to the user here.",
                "type": "int",
                "example": "3",
                "required": false
            },
            {
                "name": "callback",
                "desc": "If supplied, the response will use the JSONP format with a callback of the given name.",
                "type": "string",
                "required": false
            }
        ],
        "path": "geo/reverse_geocode",
        "method": "GET"
    },
    {
        "desc": "Search for places that can be attached to a statuses/update. Given a latitude and a longitude pair, an IP address, or a name, this request will return a list of all the valid places that can be used as the place_id when updating a status. Conceptually, a query can be made from the user's location, retrieve a list of places, have the user validate the location he or she is at, and then send the ID of this location with a call to POST statuses/update . This is the recommended method to use find places that can be attached to statuses/update.  Unlike GET geo/reverse_geocode which provides raw data access, this endpoint can potentially re-order places with regards to the user who is authenticated. This approach is also preferred for interactive place matching with the user. Some parameters in this method are only required based on the existence of other parameters. For instance, \"lat\" is required if \"long\" is provided, and vice-versa. Authentication is recommended, but not required with this method.",
        "params": [
            {
                "name": "lat",
                "desc": "The latitude to search around. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding long parameter.",
                "type": "string",
                "example": "37.7821120598956",
                "required": false
            },
            {
                "name": "long",
                "desc": "The longitude to search around. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter.",
                "type": "string",
                "example": "-122.400612831116",
                "required": false
            },
            {
                "name": "query",
                "desc": "Free-form text to match against while executing a geo-based query, best suited for finding nearby locations by name. Remember to URL encode the query.",
                "type": "string",
                "example": "Twitter%20HQ",
                "required": false
            },
            {
                "name": "ip",
                "desc": "An IP address. Used when attempting to fix geolocation based off of the user's IP address.",
                "type": "string",
                "example": "74.125.19.104",
                "required": false
            },
            {
                "name": "granularity",
                "desc": "This is the minimal granularity of place types to return and must be one of: poi, neighborhood, city, admin or country. If no granularity is provided for the request neighborhood is assumed. Setting this to city, for example, will find places which have a type of city, admin or country.",
                "type": "string",
                "example": "city",
                "required": false
            },
            {
                "name": "accuracy",
                "desc": "A hint on the \"region\" in which to search. If a number, then this is a radius in meters, but it can also take a string that is suffixed with ft to specify feet. If this is not passed in, then it is assumed to be 0m. If coming from a device, in practice, this value is whatever accuracy the device has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.).",
                "type": "string",
                "example": "5ft",
                "required": false
            },
            {
                "name": "max_results",
                "desc": "A hint as to the number of results to return. This does not guarantee that the number of results returned will equal max_results, but instead informs how many \"nearby\" results to return. Ideally, only pass in the number of places you intend to display to the user here.",
                "type": "int",
                "example": "3",
                "required": false
            },
            {
                "name": "contained_within",
                "desc": "This is the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found. Specify a place_id. For example, to scope all results to places within \"San Francisco, CA USA\", you would specify a place_id of \"5a110d312052166f\"",
                "type": "string",
                "example": "247f43d441defc03",
                "required": false
            },
            {
                "name": "attribute:street_address",
                "desc": "This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted. Learn more about [node:208, title=\"Place Attributes\"].",
                "type": "string",
                "example": "795%20Folsom%20St",
                "required": false
            },
            {
                "name": "callback",
                "desc": "If supplied, the response will use the JSONP format with a callback of the given name.",
                "type": "string",
                "required": false
            }
        ],
        "path": "geo/search",
        "method": "GET"
    },
    {
        "desc": "As of December 2nd, 2013, this endpoint is deprecated and retired and no longer functions. Place creation was used infrequently by third party applications and is generally no longer supported on Twitter. Requests will return with status 410 (Gone) with error code 251 . Created a new place object at the given latitude and longitude. Before creating a place you needed to query GET geo/similar_places with the latitude, longitude and name of the place you wished to create. The query will return an array of places which are similar to the one you wish to create, and a token . If the place you wished to create wasn't in the returned array you could use the token with this method to create a new one. Learn more about Finding Tweets about Places .",
        "params": [
            {
                "name": "name",
                "desc": "The name a place is known as.",
                "type": "string",
                "example": "Twitter%20HQ",
                "required": true
            },
            {
                "name": "contained_within",
                "desc": "The place_id within which the new place can be found. Try and be as close as possible with the containing place. For example, for a room in a building, set the contained_within as the building place_id.",
                "type": "string",
                "example": "247f43d441defc03",
                "required": true
            },
            {
                "name": "token",
                "desc": "The token found in the response from geo/similar_places.",
                "type": "string",
                "example": "36179c9bf78835898ebf521c1defd4be",
                "required": true
            },
            {
                "name": "lat",
                "desc": "The latitude the place is located at. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding long parameter.",
                "type": "string",
                "example": "37.7821120598956",
                "required": true
            },
            {
                "name": "long",
                "desc": "The longitude the place is located at. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter.",
                "type": "string",
                "example": "-122.400612831116",
                "required": true
            },
            {
                "name": "attribute:street_address",
                "desc": "This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted. Learn more here.",
                "type": "string",
                "example": "795%20Folsom%20St",
                "required": false
            },
            {
                "name": "callback",
                "desc": "If supplied, the response will use the JSONP format with a callback of the given name.",
                "type": "string",
                "required": false
            }
        ],
        "path": "geo/place",
        "method": "POST"
    },
    {
        "desc": "Returns the top 50 trending topics for a specific WOEID , if trending information is available for it. The response is an array of \"trend\" objects that encode the name of the trending topic, the query parameter that can be used to search for the topic on Twitter Search , and the Twitter Search URL. This information is cached for 5 minutes. Requesting more frequently than that will not return any more data, and will count against your rate limit usage. The tweet volume ( tweet_volume ) for the last 24 hours is also returned for every trend. Please note that Ads API developers have an increased rate limit on this endpoint at 50 queries / 15 minutes / token.",
        "params": [
            {
                "name": "id",
                "desc": "The Yahoo! Where On Earth ID of the location to return trending information for. Global information is available by using 1 as the WOEID.",
                "type": "int",
                "example": "1",
                "required": true
            },
            {
                "name": "exclude",
                "desc": "Setting this equal to hashtags will remove all hashtags from the trends list.",
                "type": "string",
                "required": false
            }
        ],
        "path": "trends/place",
        "method": "GET"
    },
    {
        "desc": "Returns the locations that Twitter has trending topic information for. The response is an array of \"locations\" that encode the location's WOEID and some other human-readable information such as a canonical name and country the location belongs in. A WOEID is a Yahoo! Where On Earth ID .",
        "params": [],
        "path": "trends/available",
        "method": "GET"
    },
    {
        "desc": "Returns the current rate limits for methods belonging to the specified resource families. Each 1.1 API resource belongs to a \"resource family\" which is indicated in its method documentation. You can typically determine a method's resource family from the first component of the path after the resource version. This method responds with a map of methods belonging to the families specified by the resources parameter, the current remaining uses for each of those resources within the current rate limiting window, and its expiration time in epoch time . It also includes a rate_limit_context field that indicates the current access token or application-only authentication context. You may also issue requests to this method without any parameters to receive a map of all rate limited GET methods. If your application only uses a few of methods, please explicitly provide a resources parameter with the specified resource families you work with. When using app-only auth, this method's response indicates the app-only auth rate limiting context. Read more about API Rate Limiting and review the limits .",
        "params": [
            {
                "name": "resources",
                "desc": "A comma-separated list of resource families you want to know the current rate limit disposition for. For best performance, only specify the resource families pertinent to your application.",
                "type": "string",
                "example": "statuses,friends,trends,help",
                "required": false
            }
        ],
        "path": "application/rate_limit_status",
        "method": "GET"
    },
    {
        "desc": "Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co shortened URL length. It is recommended applications request this endpoint when they are loaded, but no more than once a day.",
        "params": [],
        "path": "help/configuration",
        "method": "GET"
    },
    {
        "desc": "Returns the list of languages supported by Twitter along with the language code supported by Twitter. The language code may be formatted as ISO 639-1 alpha-2 ( en ), ISO 639-3 alpha-3 ( msa ), or ISO 639-1 alpha-2 combined with an ISO 3166-1 alpha-2 localization ( zh-tw ).",
        "params": [],
        "path": "help/languages",
        "method": "GET"
    },
    {
        "desc": "Returns Twitter's Privacy Policy .",
        "params": [],
        "path": "help/privacy",
        "method": "GET"
    },
    {
        "desc": "Returns the Twitter Terms of Service . Note: these are not the same as the Developer Policy .",
        "params": [],
        "path": "help/tos",
        "method": "GET"
    },
    {
        "desc": "Returns the locations that Twitter has trending topic information for, closest to a specified location. The response is an array of \"locations\" that encode the location's WOEID and some other human-readable information such as a canonical name and country the location belongs in. A WOEID is a Yahoo! Where On Earth ID .",
        "params": [
            {
                "name": "lat",
                "desc": "If provided with a long parameter the available trend locations will be sorted by distance, nearest to furthest, to the co-ordinate pair. The valid ranges for longitude is -180.0 to +180.0 (West is negative, East is positive) inclusive.",
                "type": "string",
                "example": "37.781157",
                "required": true
            },
            {
                "name": "long",
                "desc": "If provided with a lat parameter the available trend locations will be sorted by distance, nearest to furthest, to the co-ordinate pair. The valid ranges for longitude is -180.0 to +180.0 (West is negative, East is positive) inclusive.",
                "type": "string",
                "example": "-122.400612831116",
                "required": true
            }
        ],
        "path": "trends/closest",
        "method": "GET"
    },
    {
        "desc": "Report the specified user as a spam account to Twitter. Additionally performs the equivalent of POST blocks / create on behalf of the authenticated user.",
        "params": [
            {
                "name": "screen_name",
                "desc": "The ID or screen_name of the user you want to report as a spammer. Helpful for disambiguating when a valid screen name is also a user ID.",
                "type": "string",
                "example": "noradio",
                "required": false
            },
            {
                "name": "user_id",
                "desc": "The ID of the user you want to report as a spammer. Helpful for disambiguating when a valid user ID is also a valid screen name.",
                "type": "user_id",
                "example": "12345",
                "required": false
            }
        ],
        "path": "users/report_spam",
        "method": "POST"
    }
]
