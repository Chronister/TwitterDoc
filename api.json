[
    {
        "params": [],
        "method": "GET",
        "path": "account/settings",
        "desc": "Returns settings (including current trend, geo and sleep time information) for the authenticating user."
    },
    {
        "params": [
            {
                "name": "include_entities",
                "default": "false",
                "type": "bool",
                "desc": "The entities node will not be included when set to false .",
                "example": "false",
                "required": false
            },
            {
                "name": "skip_status",
                "default": "true",
                "type": "bool",
                "desc": "When set to either true , t or 1 statuses will not be included in the\nreturned user object.",
                "example": "true",
                "required": false
            },
            {
                "name": "include_email",
                "default": "true",
                "type": "bool",
                "desc": "When set to true email will be returned in the user objects as a string.\nIf the user does not have an email address on their account, or if the email\naddress is not verified, null will be returned.",
                "example": "true",
                "required": false
            }
        ],
        "method": "GET",
        "path": "account/verify_credentials",
        "desc": "Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful; returns a 401 status code and an error message if not. Use this method to test if supplied user credentials are valid."
    },
    {
        "params": [
            {
                "name": "resources",
                "default": "statuses,friends,trends,help",
                "type": "string",
                "desc": "A comma-separated list of resource families you want to know the current rate\nlimit disposition for. For best performance, only specify the resource families\npertinent to your application. See API Rate\nLimiting for more information.",
                "example": "statuses,friends,trends,help",
                "required": false
            }
        ],
        "method": "GET",
        "path": "application/rate_limit_status",
        "desc": "Returns the current rate limits for methods belonging to the specified resource families. Each API resource belongs to a \"resource family\" which is indicated in its method documentation. The method's resource family can be determined from the first component of the path after the resource version. This method responds with a map of methods belonging to the families specified by the resources parameter, the current remaining uses for each of those resources within the current rate limiting window, and their expiration time in epoch time . It also includes a rate_limit_context field that indicates the current access token or application-only authentication context. You may also issue requests to this method without any parameters to receive a map of all rate limited GET methods. If your application only uses a few of methods, you should explicitly provide a resources parameter with the specified resource families you work with. When using application-only auth, this method's response indicates the application-only auth rate limiting context. Read more about API Rate Limiting and review the limits ."
    },
    {
        "params": [
            {
                "name": "stringify_ids",
                "default": "true",
                "type": "bool",
                "desc": "Many programming environments will not consume our ids due to their size.\nProvide this option to have ids returned as strings instead. Read more about\nTwitter IDs .",
                "example": "true",
                "required": false
            },
            {
                "name": "cursor",
                "default": "12893764510938",
                "type": "cursor",
                "desc": "Causes the list of IDs to be broken into pages of no more than 5000 IDs at a\ntime. The number of IDs returned is not guaranteed to be 5000 as suspended users\nare filtered out after connections are queried. If no cursor is provided, a\nvalue of -1 will be assumed, which is the first \"page.\"\nThe response from the API will include a previous_cursor and next_cursor\nto allow paging back and forth. See Using cursors to navigate\ncollections for more information.",
                "example": "12893764510938",
                "required": false
            }
        ],
        "method": "GET",
        "path": "blocks/ids",
        "desc": "Returns an array of numeric user ids the authenticating user is blocking. Important This method is cursored, meaning your app must make multiple requests in order to receive all blocks correctly. See Using cursors to navigate collections for more details on how cursoring works."
    },
    {
        "params": [
            {
                "name": "include_entities",
                "default": "false",
                "type": "bool",
                "desc": "The entities node will not be included when set to false .",
                "example": "false",
                "required": false
            },
            {
                "name": "skip_status",
                "desc": "When set to either true , t or 1 statuses will not be included in the\nreturned user objects.",
                "type": "string",
                "required": false
            },
            {
                "name": "cursor",
                "default": "12893764510938",
                "type": "cursor",
                "desc": "Causes the list of blocked users to be broken into pages of no more than 5000\nIDs at a time. The number of IDs returned is not guaranteed to be 5000 as\nsuspended users are filtered out after connections are queried. If no cursor is\nprovided, a value of -1 will be assumed, which is the first \"page.\"\nThe response from the API will include a previous_cursor and next_cursor\nto allow paging back and forth. See Using cursors to navigate\ncollections for more information.",
                "example": "12893764510938",
                "required": false
            }
        ],
        "method": "GET",
        "path": "blocks/list",
        "desc": "Returns a collection of user objects that the authenticating user is blocking. Important This method is cursored, meaning your app must make multiple requests in order to receive all blocks correctly. See Using cursors to navigate collections for more details on how cursoring works."
    },
    {
        "params": [
            {
                "name": "id",
                "default": "custom-539487832448843776",
                "type": "status_id",
                "desc": "The identifier of the Collection to return results for.",
                "example": "custom-539487832448843776",
                "required": true
            },
            {
                "name": "count",
                "default": "100",
                "type": "int",
                "desc": "Specifies the maximum number of results to include in the response. Specify a\ncount between 1 and 200. A next_cursor value will be provided in the response\nif additional results are available.",
                "example": "100",
                "required": false
            },
            {
                "name": "max_position",
                "default": "54321",
                "type": "status_id",
                "desc": "Returns results with a position value less than or equal to the specified\nposition.",
                "example": "54321",
                "required": false
            },
            {
                "name": "min_position",
                "default": "12345",
                "type": "status_id",
                "desc": "Returns results with a position greater than the specified position.",
                "example": "12345",
                "required": false
            }
        ],
        "method": "GET",
        "path": "collections/entries",
        "desc": "Retrieve the identified Collection, presented as a list of the Tweets curated within. The response structure of this method differs significantly from timelines you may be used to working with in the Twitter REST API. To navigate a Collection, use the position object of a response, which includes attributes for max_position , min_position , and was_truncated . was_truncated indicates whether additional Tweets exist in the collection outside of the range of the current request. To retrieve Tweets further back in time, use the value of min_position found in the current response as the\n max_position parameter in your next call to this endpoint."
    },
    {
        "params": [
            {
                "name": "user_id",
                "default": "20",
                "type": "user_id",
                "desc": "The ID of the user for whom to return results for.",
                "example": "20",
                "required": true
            },
            {
                "name": "screen_name",
                "default": "twitterdev",
                "type": "string",
                "desc": "The screen name of the user for whom to return results for.",
                "example": "twitterdev",
                "required": true
            },
            {
                "name": "tweet_id",
                "default": "514533751213551616",
                "type": "status_id",
                "desc": "The identifier of the Tweet for which to return results for.",
                "example": "514533751213551616",
                "required": false
            },
            {
                "name": "count",
                "default": "100",
                "type": "int",
                "desc": "Specifies the maximum number of results to include in the response. Specify a\ncount between 1 and 200. A next_cursor value will be provided in the response\nif additional results are available.",
                "example": "100",
                "required": false
            },
            {
                "name": "cursor",
                "default": "BXb2synCEAE",
                "type": "cursor",
                "desc": "A string identifying the segment of the current result set to retrieve. Values\nfor this parameter are yielded in the cursors node attached to response\nobjects. Usage of the count parameter affects cursoring.",
                "example": "BXb2synCEAE",
                "required": false
            }
        ],
        "method": "GET",
        "path": "collections/list",
        "desc": "Find Collections created by a specific user or containing a specific curated Tweet. Results are organized in a cursored collection."
    },
    {
        "params": [
            {
                "name": "id",
                "default": "custom-388061495298244609",
                "type": "status_id",
                "desc": "The identifier of the Collection to return results for.",
                "example": "custom-388061495298244609",
                "required": true
            }
        ],
        "method": "GET",
        "path": "collections/show",
        "desc": "Retrieve information associated with a specific Collection."
    },
    {
        "params": [
            {
                "name": "since_id",
                "default": "12345",
                "type": "status_id",
                "desc": "Returns results with an ID greater than (that is, more recent than) the\nspecified ID. There are limits to the number of Tweets which can be accessed\nthrough the API. If the limit of Tweets has occured since the since_id, the\nsince_id will be forced to the oldest ID available.",
                "example": "12345",
                "required": false
            },
            {
                "name": "max_id",
                "default": "54321",
                "type": "status_id",
                "desc": "Returns results with an ID less than (that is, older than) or equal to the\nspecified ID.",
                "example": "54321",
                "required": false
            },
            {
                "name": "count",
                "default": "5",
                "type": "int",
                "desc": "Specifies the number of direct messages to try and retrieve, up to a maximum of\n200. The value of count is best thought of as a limit to the number of Tweets\nto return because suspended or deleted content is removed after the count has\nbeen applied.",
                "example": "5",
                "required": false
            },
            {
                "name": "include_entities",
                "default": "false",
                "type": "bool",
                "desc": "The entities node will not be included when set to false .",
                "example": "false",
                "required": false
            },
            {
                "name": "skip_status",
                "desc": "When set to either true , t or 1 statuses will not be included in the\nreturned user objects.",
                "type": "string",
                "required": false
            }
        ],
        "method": "GET",
        "path": "direct_messages",
        "desc": "Returns the 20 most recent direct messages sent to the authenticating user. Includes detailed information about the sender and recipient user. You can request up to 200 direct messages per call, and only the most recent 200 DMs will be available using this endpoint. Important : This method requires an access token with RWD (read, write & direct message) permissions. Consult The Application Permission Model for more information."
    },
    {
        "params": [
            {
                "name": "since_id",
                "default": "12345",
                "type": "status_id",
                "desc": "Returns results with an ID greater than (that is, more recent than) the\nspecified ID. There are limits to the number of Tweets which can be accessed\nthrough the API. If the limit of Tweets has occured since the since_id, the\nsince_id will be forced to the oldest ID available.",
                "example": "12345",
                "required": false
            },
            {
                "name": "max_id",
                "default": "54321",
                "type": "status_id",
                "desc": "Returns results with an ID less than (that is, older than) or equal to the\nspecified ID.",
                "example": "54321",
                "required": false
            },
            {
                "name": "count",
                "default": "5",
                "type": "int",
                "desc": "Specifies the number of records to retrieve. Must be less than or equal to 200.",
                "example": "5",
                "required": false
            },
            {
                "name": "page",
                "default": "3",
                "type": "int",
                "desc": "Specifies the page of results to retrieve.",
                "example": "3",
                "required": false
            },
            {
                "name": "include_entities",
                "default": "false",
                "type": "bool",
                "desc": "The entities node will not be included when set to false .",
                "example": "false",
                "required": false
            }
        ],
        "method": "GET",
        "path": "direct_messages/sent",
        "desc": "Returns the 20 most recent direct messages sent by the authenticating user. Includes detailed information about the sender and recipient user. You can request up to 200 direct messages per call, up to a maximum of 800 outgoing DMs. Important : This method requires an access token with RWD (read, write & direct message) permissions. Consult The Application Permission Model for more information."
    },
    {
        "params": [
            {
                "name": "id",
                "default": "587424932",
                "type": "status_id",
                "desc": "The ID of the direct message.",
                "example": "587424932",
                "required": true
            }
        ],
        "method": "GET",
        "path": "direct_messages/show",
        "desc": "Returns a single direct message, specified by an id parameter. Like the /1.1/direct_messages.format request, this method will include the user objects of the sender and recipient. Important : This method requires an access token with RWD (read, write & direct message) permissions. Consult The Application Permission Model for more information."
    },
    {
        "params": [
            {
                "name": "user_id",
                "default": "12345",
                "type": "user_id",
                "desc": "The ID of the user for whom to return results for.",
                "example": "12345",
                "required": false
            },
            {
                "name": "screen_name",
                "default": "noradio",
                "type": "string",
                "desc": "The screen name of the user for whom to return results for.",
                "example": "noradio",
                "required": false
            },
            {
                "name": "count",
                "default": "5",
                "type": "int",
                "desc": "Specifies the number of records to retrieve. Must be less than or equal to 200;\ndefaults to 20. The value of count is best thought of as a limit to the number\nof tweets to return because suspended or deleted content is removed after the\ncount has been applied.",
                "example": "5",
                "required": false
            },
            {
                "name": "since_id",
                "default": "12345",
                "type": "status_id",
                "desc": "Returns results with an ID greater than (that is, more recent than) the\nspecified ID. There are limits to the number of Tweets which can be accessed\nthrough the API. If the limit of Tweets has occured since the since_id, the\nsince_id will be forced to the oldest ID available.",
                "example": "12345",
                "required": false
            },
            {
                "name": "max_id",
                "default": "54321",
                "type": "status_id",
                "desc": "Returns results with an ID less than (that is, older than) or equal to the\nspecified ID.",
                "example": "54321",
                "required": false
            },
            {
                "name": "include_entities",
                "default": "false",
                "type": "bool",
                "desc": "The entities node will be omitted when set to false .",
                "example": "false",
                "required": false
            }
        ],
        "method": "GET",
        "path": "favorites/list",
        "desc": "Returns the 20 most recent Tweets favorited by the authenticating or specified user."
    },
    {
        "params": [
            {
                "name": "user_id",
                "default": "12345",
                "type": "user_id",
                "desc": "The ID of the user for whom to return results for.",
                "example": "12345",
                "required": false
            },
            {
                "name": "screen_name",
                "default": "noradio",
                "type": "string",
                "desc": "The screen name of the user for whom to return results for.",
                "example": "noradio",
                "required": false
            },
            {
                "name": "cursor",
                "default": "12893764510938",
                "type": "cursor",
                "desc": "Causes the list of connections to be broken into pages of no more than 5000 IDs\nat a time. The number of IDs returned is not guaranteed to be 5000 as suspended\nusers are filtered out after connections are queried. If no cursor is provided,\na value of -1 will be assumed, which is the first \"page.\"\nThe response from the API will include a previous_cursor and next_cursor\nto allow paging back and forth. See Using cursors to navigate\ncollections for more information.",
                "example": "12893764510938",
                "required": false
            },
            {
                "name": "stringify_ids",
                "default": "true",
                "type": "bool",
                "desc": "Many programming environments will not consume our Tweet ids due to their size.\nProvide this option to have ids returned as strings instead. More about\n[node:194].",
                "example": "true",
                "required": false
            },
            {
                "name": "count",
                "default": "2048",
                "type": "int",
                "desc": "Specifies the number of IDs attempt retrieval of, up to a maximum of 5,000 per\ndistinct request. The value of count is best thought of as a limit to the\nnumber of results to return. When using the count parameter with this method, it\nis wise to use a consistent count value across all requests to the same user's\ncollection. Usage of this parameter is encouraged in environments where all\n5,000 IDs constitutes too large of a response.",
                "example": "2048",
                "required": false
            }
        ],
        "method": "GET",
        "path": "followers/ids",
        "desc": "Returns a cursored collection of user IDs for every user following the specified user. At this time, results are ordered with the most recent following first \u2014 however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 5,000 user IDs and multiple \"pages\" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for\nmore information. This method is especially powerful when used in conjunction with GET users / lookup , a method that allows you to convert user IDs into full user objects in bulk."
    },
    {
        "params": [
            {
                "name": "user_id",
                "default": "12345",
                "type": "user_id",
                "desc": "The ID of the user for whom to return results for.",
                "example": "12345",
                "required": false
            },
            {
                "name": "screen_name",
                "default": "twitterdev",
                "type": "string",
                "desc": "The screen name of the user for whom to return results for.",
                "example": "twitterdev",
                "required": false
            },
            {
                "name": "cursor",
                "default": "12893764510938",
                "type": "cursor",
                "desc": "Causes the results to be broken into pages. If no cursor is provided, a value of\n-1 will be assumed, which is the first \"page.\"\nThe response from the API will include a previous_cursor and next_cursor\nto allow paging back and forth. See Using cursors to navigate\ncollections for more information.",
                "example": "12893764510938",
                "required": false
            },
            {
                "name": "count",
                "default": "42",
                "type": "int",
                "desc": "The number of users to return per page, up to a maximum of 200. Defaults to 20.",
                "example": "42",
                "required": false
            },
            {
                "name": "skip_status",
                "default": "false",
                "type": "bool",
                "desc": "When set to either true , t or 1 , statuses will not be included in the\nreturned user objects. If set to any other value, statuses will be included.",
                "example": "false",
                "required": false
            },
            {
                "name": "include_user_entities",
                "default": "false",
                "type": "bool",
                "desc": "The user object entities node will not be included when set to false .",
                "example": "false",
                "required": false
            }
        ],
        "method": "GET",
        "path": "followers/list",
        "desc": "Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first \u2014 however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple \"pages\" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more\ninformation."
    },
    {
        "params": [
            {
                "name": "user_id",
                "default": "12345",
                "type": "user_id",
                "desc": "The ID of the user for whom to return results for.",
                "example": "12345",
                "required": false
            },
            {
                "name": "screen_name",
                "default": "noradio",
                "type": "string",
                "desc": "The screen name of the user for whom to return results for.",
                "example": "noradio",
                "required": false
            },
            {
                "name": "cursor",
                "default": "12893764510938",
                "type": "cursor",
                "desc": "Causes the list of connections to be broken into pages of no more than 5000 IDs\nat a time. The number of IDs returned is not guaranteed to be 5000 as suspended\nusers are filtered out after connections are queried. If no cursor is provided,\na value of -1 will be assumed, which is the first \"page.\"\nThe response from the API will include a previous_cursor and next_cursor\nto allow paging back and forth. See Using cursors to navigate\ncollections for more information.",
                "example": "12893764510938",
                "required": false
            },
            {
                "name": "stringify_ids",
                "default": "true",
                "type": "bool",
                "desc": "Many programming environments will not consume our Tweet ids due to their size.\nProvide this option to have ids returned as strings instead. More about Twitter\nIDs .",
                "example": "true",
                "required": false
            },
            {
                "name": "count",
                "default": "2048",
                "type": "int",
                "desc": "Specifies the number of IDs attempt retrieval of, up to a maximum of 5,000 per\ndistinct request. The value of count is best thought of as a limit to the\nnumber of results to return. When using the count parameter with this method, it\nis wise to use a consistent count value across all requests to the same user's\ncollection. Usage of this parameter is encouraged in environments where all\n5,000 IDs constitutes too large of a response.",
                "example": "2048",
                "required": false
            }
        ],
        "method": "GET",
        "path": "friends/ids",
        "desc": "Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their \"friends\"). At this time, results are ordered with the most recent following first \u2014 however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 5,000 user IDs and multiple \"pages\" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for\nmore information. This method is especially powerful when used in conjunction with GET users / lookup , a method that allows you to convert user IDs into full user objects in bulk."
    },
    {
        "params": [
            {
                "name": "user_id",
                "default": "12345",
                "type": "user_id",
                "desc": "The ID of the user for whom to return results.",
                "example": "12345",
                "required": false
            },
            {
                "name": "screen_name",
                "default": "noradio",
                "type": "string",
                "desc": "The screen name of the user for whom to return results.",
                "example": "noradio",
                "required": false
            },
            {
                "name": "cursor",
                "default": "12893764510938",
                "type": "cursor",
                "desc": "Causes the results to be broken into pages. If no cursor is provided, a value of\n-1 will be assumed, which is the first \"page.\"\nThe response from the API will include a previous_cursor and next_cursor\nto allow paging back and forth. See [node:10362, title=\"Using cursors to\nnavigate collections\"] for more information.",
                "example": "12893764510938",
                "required": false
            },
            {
                "name": "count",
                "default": "42",
                "type": "int",
                "desc": "The number of users to return per page, up to a maximum of 200. Defaults to 20.",
                "example": "42",
                "required": false
            },
            {
                "name": "skip_status",
                "default": "false",
                "type": "bool",
                "desc": "When set to either true, t or 1 statuses will not be included in the\nreturned user objects.",
                "example": "false",
                "required": false
            },
            {
                "name": "include_user_entities",
                "default": "false",
                "type": "bool",
                "desc": "The user object entities node will not be included when set to false.",
                "example": "false",
                "required": false
            }
        ],
        "method": "GET",
        "path": "friends/list",
        "desc": "Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their \"friends\"). At this time, results are ordered with the most recent following first \u2014 however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple \"pages\" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more\ninformation."
    },
    {
        "params": [
            {
                "name": "cursor",
                "default": "12893764510938",
                "type": "cursor",
                "desc": "Causes the list of connections to be broken into pages of no more than 5000 IDs\nat a time. The number of IDs returned is not guaranteed to be 5000 as suspended\nusers are filtered out after connections are queried. If no cursor is provided,\na value of -1 will be assumed, which is the first \"page.\"\nThe response from the API will include a previous_cursor and next_cursor\nto allow paging back and forth. See [node:10362, title=\"Using cursors to\nnavigate collections\"] for more information.",
                "example": "12893764510938",
                "required": false
            },
            {
                "name": "stringify_ids",
                "default": "true",
                "type": "bool",
                "desc": "Many programming environments will not consume our Tweet ids due to their size.\nProvide this option to have ids returned as strings instead. More about\n[node:194].",
                "example": "true",
                "required": false
            }
        ],
        "method": "GET",
        "path": "friendships/incoming",
        "desc": "Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user."
    },
    {
        "params": [
            {
                "name": "screen_name",
                "default": "twitterapi twitter",
                "type": "string",
                "desc": "A comma separated list of screen names, up to 100 are allowed in a single\nrequest.",
                "example": "twitterapi twitter",
                "required": false
            },
            {
                "name": "user_id",
                "default": "783214 6253282",
                "type": "user_id",
                "desc": "A comma separated list of user IDs, up to 100 are allowed in a single request.",
                "example": "783214 6253282",
                "required": false
            }
        ],
        "method": "GET",
        "path": "friendships/lookup",
        "desc": "Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided. Values for connections can be: following , following_requested , followed_by , none , blocking , muting ."
    },
    {
        "params": [
            {
                "name": "stringify_ids",
                "default": "true",
                "type": "bool",
                "desc": "Many programming environments will not consume our ids due to their size.\nProvide this option to have ids returned as strings instead. Read more about\n[node:194]. This parameter is especially important to use in Javascript\nenvironments.",
                "example": "true",
                "required": false
            }
        ],
        "method": "GET",
        "path": "friendships/no_retweets/ids",
        "desc": "Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from. Use POST friendships / update to set the \"no retweets\" status for a given user account on behalf of the current user."
    },
    {
        "params": [
            {
                "name": "cursor",
                "default": "12893764510938",
                "type": "cursor",
                "desc": "Causes the list of connections to be broken into pages of no more than 5000 IDs\nat a time. The number of IDs returned is not guaranteed to be 5000 as suspended\nusers are filtered out after connections are queried. If no cursor is provided,\na value of -1 will be assumed, which is the first \"page.\"\nThe response from the API will include a previous_cursor and next_cursor\nto allow paging back and forth. See [node:10362, title=\"Using cursors to\nnavigate collections\"] for more information.",
                "example": "12893764510938",
                "required": false
            },
            {
                "name": "stringify_ids",
                "default": "true",
                "type": "bool",
                "desc": "Many programming environments will not consume our Tweet ids due to their size.\nProvide this option to have ids returned as strings instead. More about\n[node:194].",
                "example": "true",
                "required": false
            }
        ],
        "method": "GET",
        "path": "friendships/outgoing",
        "desc": "Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request."
    },
    {
        "params": [
            {
                "name": "source_id",
                "default": "3191321",
                "type": "status_id",
                "desc": "The user_id of the subject user.",
                "example": "3191321",
                "required": false
            },
            {
                "name": "source_screen_name",
                "default": "raffi",
                "type": "string",
                "desc": "The screen_name of the subject user.",
                "example": "raffi",
                "required": false
            },
            {
                "name": "target_id",
                "default": "20",
                "type": "status_id",
                "desc": "The user_id of the target user.",
                "example": "20",
                "required": false
            },
            {
                "name": "target_screen_name",
                "default": "noradio",
                "type": "string",
                "desc": "The screen_name of the target user.",
                "example": "noradio",
                "required": false
            }
        ],
        "method": "GET",
        "path": "friendships/show",
        "desc": "Returns detailed information about the relationship between two arbitrary users."
    },
    {
        "params": [
            {
                "name": "place_id",
                "default": "df51dec6f4ee2b2c",
                "type": "place_id",
                "desc": "A place in the world. These IDs can be retrieved from geo/reverse_geocode.",
                "example": "df51dec6f4ee2b2c",
                "required": true
            }
        ],
        "method": "GET",
        "path": "geo/id/:place_id",
        "desc": "Returns all the information about a known place ."
    },
    {
        "params": [
            {
                "name": "lat",
                "default": "37.7821120598956",
                "type": "string",
                "desc": "The latitude to search around. This parameter will be ignored unless it is\ninside the range -90.0 to +90.0 (North is positive) inclusive. It will also be\nignored if there isn't a corresponding long parameter.",
                "example": "37.7821120598956",
                "required": true
            },
            {
                "name": "long",
                "default": "-122.400612831116",
                "type": "string",
                "desc": "The longitude to search around. The valid ranges for longitude is -180.0 to\n+180.0 (East is positive) inclusive. This parameter will be ignored if outside\nthat range, if it is not a number, if geo_enabled is disabled, or if there\nnot a corresponding lat parameter.",
                "example": "-122.400612831116",
                "required": true
            },
            {
                "name": "accuracy",
                "default": "5ft",
                "type": "string",
                "desc": "A hint on the \"region\" in which to search. If a number, then this is a radius in\nmeters, but it can also take a string that is suffixed with ft to specify feet.\nIf this is not passed in, then it is assumed to be 0m . If coming from a\ndevice, in practice, this value is whatever accuracy the device has measuring\nits location (whether it be coming from a GPS, WiFi triangulation, etc.).",
                "example": "5ft",
                "required": false
            },
            {
                "name": "granularity",
                "default": "city",
                "type": "string",
                "desc": "This is the minimal granularity of place types to return and must be one of:\npoi , neighborhood , city , admin or country . If no granularity is\nprovided for the request neighborhood is assumed.\nSetting this to city , for example, will find places which have a type of\ncity , admin or country .",
                "example": "city",
                "required": false
            },
            {
                "name": "max_results",
                "default": "3",
                "type": "int",
                "desc": "A hint as to the number of results to return. This does not guarantee that the\nnumber of results returned will equal max_results, but instead informs how many\n\"nearby\" results to return. Ideally, only pass in the number of places you\nintend to display to the user here.",
                "example": "3",
                "required": false
            },
            {
                "name": "callback",
                "desc": "If supplied, the response will use the JSONP format with a callback of the given\nname.",
                "type": "string",
                "required": false
            }
        ],
        "method": "GET",
        "path": "geo/reverse_geocode",
        "desc": "Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status. This request is an informative call and will deliver generalized results about geography."
    },
    {
        "params": [
            {
                "name": "lat",
                "default": "37.7821120598956",
                "type": "string",
                "desc": "The latitude to search around. This parameter will be ignored unless it is\ninside the range -90.0 to +90.0 (North is positive) inclusive. It will also be\nignored if there isn't a corresponding long parameter.",
                "example": "37.7821120598956",
                "required": false
            },
            {
                "name": "long",
                "default": "-122.400612831116",
                "type": "string",
                "desc": "The longitude to search around. The valid ranges for longitude is -180.0 to\n+180.0 (East is positive) inclusive. This parameter will be ignored if outside\nthat range, if it is not a number, if geo_enabled is disabled, or if there\nnot a corresponding lat parameter.",
                "example": "-122.400612831116",
                "required": false
            },
            {
                "name": "query",
                "default": "Twitter%20HQ",
                "type": "string",
                "desc": "Free-form text to match against while executing a geo-based query, best suited\nfor finding nearby locations by name. Remember to URL encode the query.",
                "example": "Twitter%20HQ",
                "required": false
            },
            {
                "name": "ip",
                "default": "74.125.19.104",
                "type": "string",
                "desc": "An IP address. Used when attempting to fix geolocation based off of the user's\nIP address.",
                "example": "74.125.19.104",
                "required": false
            },
            {
                "name": "granularity",
                "default": "city",
                "type": "string",
                "desc": "This is the minimal granularity of place types to return and must be one of:\npoi , neighborhood , city , admin or country . If no granularity is\nprovided for the request neighborhood is assumed.\nSetting this to city , for example, will find places which have a type of\ncity , admin or country .",
                "example": "city",
                "required": false
            },
            {
                "name": "accuracy",
                "default": "5ft",
                "type": "string",
                "desc": "A hint on the \"region\" in which to search. If a number, then this is a radius in\nmeters, but it can also take a string that is suffixed with ft to specify feet.\nIf this is not passed in, then it is assumed to be 0m . If coming from a\ndevice, in practice, this value is whatever accuracy the device has measuring\nits location (whether it be coming from a GPS, WiFi triangulation, etc.).",
                "example": "5ft",
                "required": false
            },
            {
                "name": "max_results",
                "default": "3",
                "type": "int",
                "desc": "A hint as to the number of results to return. This does not guarantee that the\nnumber of results returned will equal max_results, but instead informs how many\n\"nearby\" results to return. Ideally, only pass in the number of places you\nintend to display to the user here.",
                "example": "3",
                "required": false
            },
            {
                "name": "contained_within",
                "default": "247f43d441defc03",
                "type": "string",
                "desc": "This is the place_id which you would like to restrict the search results to.\nSetting this value means only places within the given place_id will be found.\nSpecify a place_id. For example, to scope all results to places within \"San\nFrancisco, CA USA\", you would specify a place_id of \"5a110d312052166f\"",
                "example": "247f43d441defc03",
                "required": false
            },
            {
                "name": "attribute:street_address",
                "default": "795%20Folsom%20St",
                "type": "string",
                "desc": "This parameter searches for places which have this given street address. There\nare other well-known, and application specific attributes available. Custom\nattributes are also permitted. Learn more about [node:208, title=\"Place\nAttributes\"].",
                "example": "795%20Folsom%20St",
                "required": false
            },
            {
                "name": "callback",
                "desc": "If supplied, the response will use the JSONP format with a callback of the given\nname.",
                "type": "string",
                "required": false
            }
        ],
        "method": "GET",
        "path": "geo/search",
        "desc": "Search for places that can be attached to a statuses/update. Given a latitude and a longitude pair, an IP address, or a name, this request will return a list of all the valid places that can be used as the place_id when updating a status. Conceptually, a query can be made from the user's location, retrieve a list of places, have the user validate the location he or she is at, and then send the ID of this location with a call to POST statuses/update . This is the recommended method to use find places that can be attached to statuses/update. Unlike GET geo/reverse_geocode which provides raw data access, this endpoint can potentially re-order places with regards to the user who is authenticated. This approach is also preferred for interactive place matching with the user. Some parameters in this method are only required based on the existence of other parameters. For instance, \"lat\" is required if \"long\" is provided, and vice-versa. Authentication is recommended, but not required with this method."
    },
    {
        "params": [],
        "method": "GET",
        "path": "help/configuration",
        "desc": "Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co shortened URL length. It is recommended applications request this endpoint when they are loaded, but no more than once a day."
    },
    {
        "params": [],
        "method": "GET",
        "path": "help/languages",
        "desc": "Returns the list of languages supported by Twitter along with the language code supported by Twitter. The language code may be formatted as ISO 639-1 alpha-2 ( en ), ISO 639-3 alpha-3 ( msa ), or ISO 639-1 alpha-2 combined with an ISO 3166-1 alpha-2 localization ( zh-tw )."
    },
    {
        "params": [],
        "method": "GET",
        "path": "help/privacy",
        "desc": "Returns Twitter's Privacy Policy ."
    },
    {
        "params": [],
        "method": "GET",
        "path": "help/tos",
        "desc": "Returns the Twitter Terms of Service . Note: these are not the same as the Developer Policy ."
    },
    {
        "params": [
            {
                "name": "user_id",
                "default": "12345",
                "type": "user_id",
                "desc": "The ID of the user for whom to return results for. Helpful for disambiguating\nwhen a valid user ID is also a valid screen name. Note: : Specifies the ID\nof the user to get lists from. Helpful for disambiguating when a valid user ID\nis also a valid screen name.",
                "example": "12345",
                "required": false
            },
            {
                "name": "screen_name",
                "default": "noradio",
                "type": "string",
                "desc": "The screen name of the user for whom to return results for. Helpful for\ndisambiguating when a valid screen name is also a user ID.",
                "example": "noradio",
                "required": false
            },
            {
                "name": "reverse",
                "default": "true",
                "type": "bool",
                "desc": "Set this to true if you would like owned lists to be returned first. See\ndescription above for information on how this parameter works.",
                "example": "true",
                "required": false
            }
        ],
        "method": "GET",
        "path": "lists/list",
        "desc": "Returns all lists the authenticating or specified user subscribes to, including their own. The user is specified using the user_id or screen_name parameters. If no user is given, the authenticating user is used. This method used to be GET lists in version 1.0 of the API and has been renamed for consistency with other call. A maximum of 100 results will be returned by this call. Subscribed lists are returned first, followed by owned lists. This means that if a user subscribes to 90 lists and owns 20 lists, this method returns 90 subscriptions and 10 owned lists. The reverse method returns owned lists first, so with reverse=true , 20 owned lists and 80 subscriptions would be returned. If your goal is to obtain\nevery list a user owns or subscribes to, use GET lists / ownerships and/or GET lists / subscriptions instead."
    },
    {
        "params": [
            {
                "name": "list_id",
                "desc": "The numerical id of the list.",
                "type": "status_id",
                "required": true
            },
            {
                "name": "slug",
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide\nto do so, note that you'll also have to specify the list owner using the\nowner_id or owner_screen_name parameters.",
                "type": "string",
                "required": true
            },
            {
                "name": "owner_screen_name",
                "desc": "The screen name of the user who owns the list being requested by a slug.",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_id",
                "desc": "The user ID of the user who owns the list being requested by a slug.",
                "type": "status_id",
                "required": false
            },
            {
                "name": "count",
                "desc": "Specifies the number of results to return per page (see cursor below). The\ndefault is 20, with a maximum of 5,000.",
                "type": "int",
                "required": false
            },
            {
                "name": "cursor",
                "default": "12893764510938",
                "type": "cursor",
                "desc": "Causes the collection of list members to be broken into \"pages\" of consistent\nsizes (specified by the count parameter). If no cursor is provided, a value of\n-1 will be assumed, which is the first \"page.\"\nThe response from the API will include a previous_cursor and next_cursor\nto allow paging back and forth. See Using cursors to navigate\ncollections for more information.",
                "example": "12893764510938",
                "required": false
            },
            {
                "name": "include_entities",
                "default": "false",
                "type": "bool",
                "desc": "The entities node will not be included when set to false.",
                "example": "false",
                "required": false
            },
            {
                "name": "skip_status",
                "desc": "When set to either true, t or 1 statuses will not be included in the\nreturned user objects.",
                "type": "string",
                "required": false
            }
        ],
        "method": "GET",
        "path": "lists/members",
        "desc": "Returns the members of the specified list. Private list members will only be shown if the authenticated user owns the specified list."
    },
    {
        "params": [
            {
                "name": "list_id",
                "desc": "The numerical id of the list.",
                "type": "status_id",
                "required": true
            },
            {
                "name": "slug",
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide\nto do so, note that you'll also have to specify the list owner using the\nowner_id or owner_screen_name parameters.",
                "type": "string",
                "required": true
            },
            {
                "name": "user_id",
                "desc": "The ID of the user for whom to return results for. Helpful for disambiguating\nwhen a valid user ID is also a valid screen name.",
                "type": "user_id",
                "required": true
            },
            {
                "name": "screen_name",
                "desc": "The screen name of the user for whom to return results for. Helpful for\ndisambiguating when a valid screen name is also a user ID.",
                "type": "string",
                "required": true
            },
            {
                "name": "owner_screen_name",
                "desc": "The screen name of the user who owns the list being requested by a slug .",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_id",
                "desc": "The user ID of the user who owns the list being requested by a slug .",
                "type": "status_id",
                "required": false
            },
            {
                "name": "include_entities",
                "desc": "When set to either true , t or 1 , each tweet will include a node called\n\"entities\". This node offers a variety of metadata about the tweet in a discreet\nstructure, including: user_mentions, urls, and hashtags. While entities are\nopt-in on timelines at present, they will be made a default component of output\nin the future. See Tweet Entities for more\ndetails.",
                "type": "string",
                "required": false
            },
            {
                "name": "skip_status",
                "desc": "When set to either true , t or 1 statuses will not be included in the\nreturned user objects.",
                "type": "string",
                "required": false
            }
        ],
        "method": "GET",
        "path": "lists/members/show",
        "desc": "Check if the specified user is a member of the specified list."
    },
    {
        "params": [
            {
                "name": "user_id",
                "desc": "The ID of the user for whom to return results for. Helpful for disambiguating\nwhen a valid user ID is also a valid screen name.",
                "type": "user_id",
                "required": false
            },
            {
                "name": "screen_name",
                "desc": "The screen name of the user for whom to return results for. Helpful for\ndisambiguating when a valid screen name is also a user ID.",
                "type": "string",
                "required": false
            },
            {
                "name": "count",
                "desc": "The amount of results to return per page. Defaults to 20. No more than 1000\nresults will ever be returned in a single page.",
                "type": "int",
                "required": false
            },
            {
                "name": "cursor",
                "desc": "Breaks the results into pages. Provide a value of -1 to begin paging. Provide\nvalues as returned in the response body's next_cursor and previous_cursor\nattributes to page back and forth in the list. It is recommended to always use\ncursors when the method supports them. See [node:10362] for more information.",
                "type": "cursor",
                "required": false
            },
            {
                "name": "filter_to_owned_lists",
                "desc": "When set to true , t or 1 , will return just lists the authenticating user\nowns, and the user represented by user_id or screen_name is a member of.",
                "type": "string",
                "required": false
            }
        ],
        "method": "GET",
        "path": "lists/memberships",
        "desc": "Returns the lists the specified user has been added to. If user_id or screen_name are not provided the memberships for the authenticating user are returned."
    },
    {
        "params": [
            {
                "name": "user_id",
                "desc": "The ID of the user for whom to return results for.",
                "type": "user_id",
                "required": false
            },
            {
                "name": "screen_name",
                "desc": "The screen name of the user for whom to return results for.",
                "type": "string",
                "required": false
            },
            {
                "name": "count",
                "desc": "The amount of results to return per page. Defaults to 20. No more than 1000\nresults will ever be returned in a single page.",
                "type": "int",
                "required": false
            },
            {
                "name": "cursor",
                "desc": "Breaks the results into pages. Provide a value of -1 to begin paging. Provide\nvalues as returned in the response body's next_cursor and previous_cursor\nattributes to page back and forth in the list. It is recommended to always use\ncursors when the method supports them. See [node:10362] for more information.",
                "type": "cursor",
                "required": false
            }
        ],
        "method": "GET",
        "path": "lists/ownerships",
        "desc": "Returns the lists owned by the specified Twitter user. Private lists will only be shown if the authenticated user is also the owner of the lists."
    },
    {
        "params": [
            {
                "name": "list_id",
                "desc": "The numerical id of the list.",
                "type": "status_id",
                "required": true
            },
            {
                "name": "slug",
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide\nto do so, note that you'll also have to specify the list owner using the\nowner_id or owner_screen_name parameters.",
                "type": "string",
                "required": true
            },
            {
                "name": "owner_screen_name",
                "desc": "The screen name of the user who owns the list being requested by a slug .",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_id",
                "desc": "The user ID of the user who owns the list being requested by a slug .",
                "type": "status_id",
                "required": false
            }
        ],
        "method": "GET",
        "path": "lists/show",
        "desc": "Returns the specified list. Private lists will only be shown if the authenticated user owns the specified list."
    },
    {
        "params": [
            {
                "name": "list_id",
                "desc": "The numerical id of the list.",
                "type": "status_id",
                "required": true
            },
            {
                "name": "slug",
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide\nto do so, note that you'll also have to specify the list owner using the\nowner_id or owner_screen_name parameters.",
                "type": "string",
                "required": true
            },
            {
                "name": "owner_screen_name",
                "desc": "The screen name of the user who owns the list being requested by a slug .",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_id",
                "desc": "The user ID of the user who owns the list being requested by a slug .",
                "type": "status_id",
                "required": false
            },
            {
                "name": "since_id",
                "desc": "Returns results with an ID greater than (that is, more recent than) the\nspecified ID. There are limits to the number of Tweets which can be accessed\nthrough the API. If the limit of Tweets has occured since the since_id, the\nsince_id will be forced to the oldest ID available.",
                "type": "status_id",
                "required": false
            },
            {
                "name": "max_id",
                "desc": "Returns results with an ID less than (that is, older than) or equal to the\nspecified ID.",
                "type": "status_id",
                "required": false
            },
            {
                "name": "count",
                "desc": "Specifies the number of results to retrieve per \"page.\"",
                "type": "int",
                "required": false
            },
            {
                "name": "include_entities",
                "desc": "Entities are ON by default in API 1.1, each tweet includes a node called\n\"entities\". This node offers a variety of metadata about the tweet in a discreet\nstructure, including: user_mentions, urls, and hashtags. You can omit entities\nfrom the result by using include_entities=false",
                "type": "string",
                "required": false
            },
            {
                "name": "include_rts",
                "desc": "When set to either true , t or 1 , the list timeline will contain native\nretweets (if they exist) in addition to the standard stream of tweets. The\noutput format of retweeted tweets is identical to the representation you see in\nhome_timeline.",
                "type": "string",
                "required": false
            }
        ],
        "method": "GET",
        "path": "lists/statuses",
        "desc": "Returns a timeline of tweets authored by members of the specified list. Retweets are included by default. Use the include_rts=false parameter to omit retweets. Embedded Timelines is a great way to embed list timelines on your website."
    },
    {
        "params": [
            {
                "name": "list_id",
                "desc": "The numerical id of the list.",
                "type": "status_id",
                "required": true
            },
            {
                "name": "slug",
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide\nto do so, note that you'll also have to specify the list owner using the\nowner_id or owner_screen_name parameters.",
                "type": "string",
                "required": true
            },
            {
                "name": "owner_screen_name",
                "desc": "The screen name of the user who owns the list being requested by a slug .",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_id",
                "desc": "The user ID of the user who owns the list being requested by a slug .",
                "type": "status_id",
                "required": false
            },
            {
                "name": "count",
                "desc": "Specifies the number of results to return per page (see cursor below). The\ndefault is 20, with a maximum of 5,000.",
                "type": "int",
                "required": false
            },
            {
                "name": "cursor",
                "desc": "Breaks the results into pages. A single page contains 20 lists. Provide a value\nof -1 to begin paging. Provide values as returned in the response body's\nnext_cursor and previous_cursor attributes to page back and forth in the\nlist. See Using cursors to navigate collections\nfor more information.",
                "type": "cursor",
                "required": false
            },
            {
                "name": "include_entities",
                "desc": "When set to either true , t or 1 , each tweet will include a node called\n\"entities\". This node offers a variety of metadata about the tweet in a discreet\nstructure, including: user_mentions, urls, and hashtags. While entities are\nopt-in on timelines at present, they will be made a default component of output\nin the future. See Tweet Entities for more\ndetails.",
                "type": "string",
                "required": false
            },
            {
                "name": "skip_status",
                "desc": "When set to either true , t or 1 statuses will not be included in the\nreturned user objects.",
                "type": "string",
                "required": false
            }
        ],
        "method": "GET",
        "path": "lists/subscribers",
        "desc": "Returns the subscribers of the specified list. Private list subscribers will only be shown if the authenticated user owns the specified list."
    },
    {
        "params": [
            {
                "name": "owner_screen_name",
                "desc": "The screen name of the user who owns the list being requested by a slug .",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_id",
                "desc": "The user ID of the user who owns the list being requested by a slug .",
                "type": "status_id",
                "required": false
            },
            {
                "name": "list_id",
                "desc": "The numerical id of the list.",
                "type": "status_id",
                "required": true
            },
            {
                "name": "slug",
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide\nto do so, note that you'll also have to specify the list owner using the\nowner_id or owner_screen_name parameters.",
                "type": "string",
                "required": true
            },
            {
                "name": "user_id",
                "desc": "The ID of the user for whom to return results for. Helpful for disambiguating\nwhen a valid user ID is also a valid screen name.",
                "type": "user_id",
                "required": true
            },
            {
                "name": "screen_name",
                "desc": "The screen name of the user for whom to return results for. Helpful for\ndisambiguating when a valid screen name is also a user ID.",
                "type": "string",
                "required": true
            },
            {
                "name": "include_entities",
                "desc": "When set to either true , t or 1 , each tweet will include a node called\n\"entities\". This node offers a variety of metadata about the tweet in a discreet\nstructure, including: user_mentions, urls, and hashtags. While entities are\nopt-in on timelines at present, they will be made a default component of output\nin the future. See Tweet Entities for more\ndetails.",
                "type": "string",
                "required": false
            },
            {
                "name": "skip_status",
                "desc": "When set to either true , t or 1 statuses will not be included in the\nreturned user objects.",
                "type": "string",
                "required": false
            }
        ],
        "method": "GET",
        "path": "lists/subscribers/show",
        "desc": "Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber."
    },
    {
        "params": [
            {
                "name": "user_id",
                "desc": "The ID of the user for whom to return results for. Helpful for disambiguating\nwhen a valid user ID is also a valid screen name.",
                "type": "user_id",
                "required": false
            },
            {
                "name": "screen_name",
                "desc": "The screen name of the user for whom to return results for. Helpful for\ndisambiguating when a valid screen name is also a user ID.",
                "type": "string",
                "required": false
            },
            {
                "name": "count",
                "desc": "The amount of results to return per page. Defaults to 20. No more than 1000\nresults will ever be returned in a single page.",
                "type": "int",
                "required": false
            },
            {
                "name": "cursor",
                "desc": "Breaks the results into pages. Provide a value of -1 to begin paging. Provide\nvalues as returned in the response body's next_cursor and previous_cursor\nattributes to page back and forth in the list. It is recommended to always use\ncursors when the method supports them. See [node:10362] for more information.",
                "type": "cursor",
                "required": false
            }
        ],
        "method": "GET",
        "path": "lists/subscriptions",
        "desc": "Obtain a collection of the lists the specified user is subscribed to, 20 lists per page by default. Does not include the user's own lists."
    },
    {
        "params": [
            {
                "name": "cursor",
                "default": "2",
                "type": "cursor",
                "desc": "Causes the list of IDs to be broken into pages of no more than 5000 IDs at a\ntime. The number of IDs returned is not guaranteed to be 5000 as suspended users\nare filtered out. If no cursor is provided, a value of -1 will be assumed, which\nis the first \"page.\"\nThe response from the API will include a previous_cursor and next_cursor\nto allow paging back and forth. See [node:10362, title=\"Using cursors to\nnavigate collections\"] for more information.",
                "example": "2",
                "required": false
            }
        ],
        "method": "GET",
        "path": "mutes/users/ids",
        "desc": "Returns an array of numeric user ids the authenticating user has muted."
    },
    {
        "params": [
            {
                "name": "cursor",
                "default": "2",
                "type": "cursor",
                "desc": "Causes the list of IDs to be broken into pages of no more than 5000 IDs at a\ntime. The number of IDs returned is not guaranteed to be 5000 as suspended users\nare filtered out after connections are queried. If no cursor is provided, a\nvalue of -1 will be assumed, which is the first \"page.\"\nThe response from the API will include a previous_cursor and next_cursor\nto allow paging back and forth. See [node:10362, title=\"Using cursors to\nnavigate collections\"] for more information.",
                "example": "2",
                "required": false
            },
            {
                "name": "include_entities",
                "default": "false",
                "type": "bool",
                "desc": "The entities node will not be included when set to false .",
                "example": "false",
                "required": false
            },
            {
                "name": "skip_status",
                "default": "true",
                "type": "bool",
                "desc": "When set to either true , t or 1 statuses will not be included in the\nreturned user objects.",
                "example": "true",
                "required": false
            }
        ],
        "method": "GET",
        "path": "mutes/users/list",
        "desc": "Returns an array of user objects the authenticating user has muted."
    },
    {
        "params": [
            {
                "name": "limit",
                "desc": "The number of elements to return. Defaults to 500 if not specified.",
                "type": "string",
                "required": false
            },
            {
                "name": "format",
                "desc": "The output format request. This param can be either json or xml . It will\ndefault to json .",
                "type": "string",
                "required": false
            },
            {
                "name": "auth",
                "desc": "Auth token for user.",
                "type": "string",
                "required": true
            }
        ],
        "method": "GET",
        "path": "projects",
        "desc": "This endpoint requires special permission to access and is only available for TV broadcast use cases. To request access please visit curator.twitter.com . Returns a list of existing projects available to the user."
    },
    {
        "params": [],
        "method": "GET",
        "path": "saved_searches/list",
        "desc": "Returns the authenticated user's saved search queries."
    },
    {
        "params": [
            {
                "name": "id",
                "default": "313006",
                "type": "search_id",
                "desc": "The ID of the saved search.",
                "example": "313006",
                "required": true
            }
        ],
        "method": "GET",
        "path": "saved_searches/show/:id",
        "desc": "Retrieve the information for the saved search represented by the given id. The authenticating user must be the owner of saved search ID being requested."
    },
    {
        "params": [
            {
                "name": "q",
                "default": "@noradio",
                "type": "string",
                "desc": "A UTF-8, URL-encoded search query of 500 characters maximum, including\noperators. Queries may additionally be limited by complexity.",
                "example": "@noradio",
                "required": true
            },
            {
                "name": "geocode",
                "default": "37.781157 -122.398720 1mi",
                "type": "string",
                "desc": "Returns tweets by users located within a given radius of the given\nlatitude/longitude. The location is preferentially taking from the Geotagging\nAPI, but will fall back to their Twitter profile. The parameter value is\nspecified by \" latitude,longitude,radius \", where radius units must be\nspecified as either \" mi \" (miles) or \" km \" (kilometers). Note that you\ncannot use the near operator via the API to geocode arbitrary locations; however\nyou can use this geocode parameter to search near geocodes directly. A maximum\nof 1,000 distinct \"sub-regions\" will be considered when using the radius\nmodifier.",
                "example": "37.781157 -122.398720 1mi",
                "required": false
            },
            {
                "name": "lang",
                "default": "eu",
                "type": "string",
                "desc": "Restricts tweets to the given language, given by an ISO\n639-1 code. Language\ndetection is best-effort.",
                "example": "eu",
                "required": false
            },
            {
                "name": "locale",
                "default": "ja",
                "type": "string",
                "desc": "Specify the language of the query you are sending (only ja is currently\neffective). This is intended for language-specific consumers and the default\nshould work in the majority of cases.",
                "example": "ja",
                "required": false
            },
            {
                "name": "result_type",
                "default": "mixedrecentpopular",
                "type": "string",
                "desc": "Optional. Specifies what type of search results you would prefer to receive. The\ncurrent default is \"mixed.\" Valid values include:\n* mixed : Include both popular and real time results in the response.\n* recent : return only the most recent results in the response\n* popular : return only the most popular results in the response.",
                "example": "mixedrecentpopular",
                "required": false
            },
            {
                "name": "count",
                "default": "100",
                "type": "int",
                "desc": "The number of tweets to return per page, up to a maximum of 100. Defaults to 15.\nThis was formerly the \"rpp\" parameter in the old Search API.",
                "example": "100",
                "required": false
            },
            {
                "name": "until",
                "default": "2015-07-19",
                "type": "string",
                "desc": "Returns tweets created before the given date. Date should be formatted as\nYYYY-MM-DD. Keep in mind that the search index has a 7-day limit. In other\nwords, no tweets will be found for a date older than one week.",
                "example": "2015-07-19",
                "required": false
            },
            {
                "name": "since_id",
                "default": "12345",
                "type": "status_id",
                "desc": "Returns results with an ID greater than (that is, more recent than) the\nspecified ID. There are limits to the number of Tweets which can be accessed\nthrough the API. If the limit of Tweets has occured since the since_id, the\nsince_id will be forced to the oldest ID available.",
                "example": "12345",
                "required": false
            },
            {
                "name": "max_id",
                "default": "54321",
                "type": "status_id",
                "desc": "Returns results with an ID less than (that is, older than) or equal to the\nspecified ID.",
                "example": "54321",
                "required": false
            },
            {
                "name": "include_entities",
                "default": "false",
                "type": "bool",
                "desc": "The entities node will not be included when set to false.",
                "example": "false",
                "required": false
            }
        ],
        "method": "GET",
        "path": "search/tweets",
        "desc": "Returns a collection of relevant Tweets matching a specified query. Please note that Twitter's search service and, by extension, the Search API is not meant to be an exhaustive source of Tweets. Not all Tweets will be indexed or made available via the search interface. In API v1.1, the response format of the Search API has been improved to return Tweet objects more similar to the objects you'll find across the REST API and platform. However, perspectival attributes (fields that pertain to the perspective of the authenticating user) are not currently supported on this endpoint. To learn how to use Twitter Search effectively, consult our guide to Using the Twitter Search API . See Working with Timelines to learn best practices for navigating results by since_id and max_id ."
    },
    {
        "params": [
            {
                "name": "count",
                "default": "5",
                "type": "int",
                "desc": "Specifies the number of records to retrieve. Must be less than or equal to 200.\nDefaults to 20. The value of count is best thought of as a limit to the number\nof tweets to return because suspended or deleted content is removed after the\ncount has been applied.",
                "example": "5",
                "required": false
            },
            {
                "name": "since_id",
                "default": "12345",
                "type": "status_id",
                "desc": "Returns results with an ID greater than (that is, more recent than) the\nspecified ID. There are limits to the number of Tweets which can be accessed\nthrough the API. If the limit of Tweets has occured since the since_id, the\nsince_id will be forced to the oldest ID available.",
                "example": "12345",
                "required": false
            },
            {
                "name": "max_id",
                "default": "54321",
                "type": "status_id",
                "desc": "Returns results with an ID less than (that is, older than) or equal to the\nspecified ID.",
                "example": "54321",
                "required": false
            },
            {
                "name": "trim_user",
                "default": "true",
                "type": "bool",
                "desc": "When set to either true , t or 1 , each Tweet returned in a timeline will\ninclude a user object including only the status authors numerical ID. Omit this\nparameter to receive the complete user object.",
                "example": "true",
                "required": false
            },
            {
                "name": "exclude_replies",
                "default": "true",
                "type": "bool",
                "desc": "This parameter will prevent replies from appearing in the returned timeline.\nUsing exclude_replies with the count parameter will mean you will receive\nup-to count Tweets \u2014 this is because the count parameter retrieves that many\nTweets before filtering out retweets and replies.",
                "example": "true",
                "required": false
            },
            {
                "name": "include_entities",
                "default": "false",
                "type": "bool",
                "desc": "The entities node will not be included when set to false.",
                "example": "false",
                "required": false
            }
        ],
        "method": "GET",
        "path": "statuses/home_timeline",
        "desc": "Returns a collection of the most recent Tweets and retweets posted by the authenticating user and the users they follow. The home timeline is central to how most users interact with the Twitter service. Up to 800 Tweets are obtainable on the home timeline. It is more volatile for users that follow many users or follow users who Tweet frequently. See Working with Timelines for instructions on traversing timelines efficiently."
    },
    {
        "params": [
            {
                "name": "id",
                "default": "20432656548536401920",
                "type": "status_id",
                "desc": "A comma separated list of Tweet IDs, up to 100 are allowed in a single request.",
                "example": "20432656548536401920",
                "required": true
            },
            {
                "name": "include_entities",
                "default": "false",
                "type": "bool",
                "desc": "The entities node that may appear within embedded statuses will not be\nincluded when set to false.",
                "example": "false",
                "required": false
            },
            {
                "name": "trim_user",
                "default": "true",
                "type": "bool",
                "desc": "When set to either true , t or 1 , each Tweet returned in a timeline will\ninclude a user object including only the status authors numerical ID. Omit this\nparameter to receive the complete user object.",
                "example": "true",
                "required": false
            },
            {
                "name": "map",
                "default": "true",
                "type": "bool",
                "desc": "When using the map parameter, Tweets that do not exist or cannot be viewed by\nthe current user will still have their key represented but with an explicitly\nnull value paired with it",
                "example": "true",
                "required": false
            }
        ],
        "method": "GET",
        "path": "statuses/lookup",
        "desc": "Returns fully-hydrated Tweet objects for up to 100 Tweets per request, as specified by comma-separated values passed to the id parameter. This method is especially useful to get the details (hydrate) a collection of Tweet IDs. GET statuses / show / :id is used to retrieve a single Tweet object. There are a few things to note when using this method."
    },
    {
        "params": [
            {
                "name": "count",
                "desc": "Specifies the number of Tweets to try and retrieve, up to a maximum of 200. The\nvalue of count is best thought of as a limit to the number of tweets to return\nbecause suspended or deleted content is removed after the count has been\napplied. We include retweets in the count, even if include_rts is not\nsupplied. It is recommended you always send include_rts=1 when using this API\nmethod.",
                "type": "int",
                "required": false
            },
            {
                "name": "since_id",
                "default": "12345",
                "type": "status_id",
                "desc": "Returns results with an ID greater than (that is, more recent than) the\nspecified ID. There are limits to the number of Tweets which can be accessed\nthrough the API. If the limit of Tweets has occured since the since_id, the\nsince_id will be forced to the oldest ID available.",
                "example": "12345",
                "required": false
            },
            {
                "name": "max_id",
                "default": "54321",
                "type": "status_id",
                "desc": "Returns results with an ID less than (that is, older than) or equal to the\nspecified ID.",
                "example": "54321",
                "required": false
            },
            {
                "name": "trim_user",
                "default": "true",
                "type": "bool",
                "desc": "When set to either true , t or 1 , each tweet returned in a timeline will\ninclude a user object including only the status authors numerical ID. Omit this\nparameter to receive the complete user object.",
                "example": "true",
                "required": false
            },
            {
                "name": "include_entities",
                "default": "false",
                "type": "bool",
                "desc": "The entities node will not be included when set to false.",
                "example": "false",
                "required": false
            }
        ],
        "method": "GET",
        "path": "statuses/mentions_timeline",
        "desc": "Returns the 20 most recent mentions (Tweets containing a users's @screen_name) for the authenticating user. The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com. This method can only return up to 800 tweets. See Working with Timelines for instructions on traversing timelines."
    },
    {
        "params": [
            {
                "name": "url",
                "default": "https%3A%2F%2Ftwitter.com%Interior%2Fstatus%2F507185938620219395",
                "type": "string",
                "desc": "The URL of the Tweet to be embedded",
                "example": "https%3A%2F%2Ftwitter.com%Interior%2Fstatus%2F507185938620219395",
                "required": true
            },
            {
                "name": "maxwidth",
                "default": "325",
                "type": "int",
                "desc": "The maximum width of a rendered Tweet in whole pixels. This value must be\nbetween 220 and 550 inclusive. A supplied value under or over the allowed\nrange will be returned as the minimum or maximum supported width respectively;\nthe reset width value will be reflected in the returned width property. Note\nthat Twitter does not support the oEmbed maxheight parameter. Tweets are\nfundamentally text, and are therefore of unpredictable height that cannot be\nscaled like an image or video. Relatedly, the oEmbed response will not provide a\nvalue for height. Implementations that need consistent heights for Tweets\nshould refer to the hide_thread and hide_media parameters below",
                "example": "325",
                "required": false
            },
            {
                "name": "hide_media",
                "default": "true",
                "type": "bool",
                "desc": "When set to true , t, or 1 links in a Tweet are not expanded to\nphoto, video, or link previews",
                "example": "true",
                "required": false
            },
            {
                "name": "hide_thread",
                "default": "true",
                "type": "bool",
                "desc": "When set to true , t, or 1 a collapsed version of the previous Tweet\nin a conversation thread will not be displayed when the requested Tweet is\nin reply to another Tweet",
                "example": "true",
                "required": false
            },
            {
                "name": "omit_script",
                "default": "true",
                "type": "bool",
                "desc": "When set to true , t, or 1 the <script> responsible for loading\nwidgets.js will not be returned. Your webpages should include their own\nreference to widgets.js for use across all Twitter widgets including\nEmbedded Tweets",
                "example": "true",
                "required": false
            },
            {
                "name": "align",
                "default": "right",
                "type": "string",
                "desc": "Specifies whether the embedded Tweet should be floated left, right, or center in\nthe page relative to the parent element. Valid values are left, right,\ncenter, and none",
                "example": "right",
                "required": false
            },
            {
                "name": "related",
                "default": "twitterapi,twitter",
                "type": "string",
                "desc": "A comma-separated list of Twitter usernames related to your content. This value\nwill be forwarded to Tweet action intents if a viewer chooses\nto reply, like, or retweet the embedded Tweet",
                "example": "twitterapi,twitter",
                "required": false
            },
            {
                "name": "lang",
                "default": "fr",
                "type": "string",
                "desc": "Request returned HTML and a rendered Tweet in the specified Twitter language\nsupported by embedded Tweets",
                "example": "fr",
                "required": false
            },
            {
                "name": "theme",
                "default": "dark",
                "type": "string",
                "desc": "When set to dark, the Tweet is displayed with light text over\na dark background",
                "example": "dark",
                "required": false
            },
            {
                "name": "link_color",
                "default": "%2355acee",
                "type": "color",
                "desc": "Adjust the color of Tweet text links with a hexadecimal color value",
                "example": "%2355acee",
                "required": false
            },
            {
                "name": "widget_type",
                "default": "video",
                "type": "string",
                "desc": "Set to video to return a Twitter Video embed for the given Tweet",
                "example": "video",
                "required": false
            }
        ],
        "method": "GET",
        "path": "statuses/oembed",
        "desc": "Returns a single Tweet, specified by either a Tweet web URL or the Tweet ID, in an oEmbed -compatible format. The returned HTML snippet will be automatically recognized as an Embedded Tweet when Twitter's widget JavaScript is included on the page . The oEmbed endpoint allows customization of the final appearance of an Embedded Tweet by setting the corresponding properties in HTML markup to be interpreted by Twitter's JavaScript bundled with the HTML response by default. The format of the returned markup may change over time as Twitter adds new features or adjusts its Tweet representation. The Tweet fallback markup is meant to be cached on your servers for up to the suggested cache lifetime specified in the cache_age ."
    },
    {
        "params": [
            {
                "name": "id",
                "default": "327473909412814850",
                "type": "status_id",
                "desc": "The numerical ID of the desired status.",
                "example": "327473909412814850",
                "required": true
            },
            {
                "name": "cursor",
                "default": "12893764510938",
                "type": "cursor",
                "desc": "Causes the list of IDs to be broken into pages of no more than 100 IDs at a\ntime. The number of IDs returned is not guaranteed to be 100 as suspended users\nare filtered out after connections are queried. If no cursor is provided, a\nvalue of -1 will be assumed, which is the first \"page.\"\nThe response from the API will include a previous_cursor and next_cursor\nto allow paging back and forth. See our cursor\ndocs for more information.\nWhile this method supports the cursor parameter, the entire result set can be\nreturned in a single cursored collection. Using the count parameter with this\nmethod will not provide segmented cursors for use with this parameter.",
                "example": "12893764510938",
                "required": false
            },
            {
                "name": "stringify_ids",
                "default": "true",
                "type": "bool",
                "desc": "Many programming environments will not consume Tweet ids due to their size.\nProvide this option to have ids returned as strings instead.",
                "example": "true",
                "required": false
            }
        ],
        "method": "GET",
        "path": "statuses/retweeters/ids",
        "desc": "Returns a collection of up to 100 user IDs belonging to users who have retweeted the Tweet specified by the id parameter. This method offers similar data to GET statuses / retweets / :id ."
    },
    {
        "params": [
            {
                "name": "id",
                "default": "123",
                "type": "status_id",
                "desc": "The numerical ID of the desired status.",
                "example": "123",
                "required": true
            },
            {
                "name": "count",
                "default": "5",
                "type": "int",
                "desc": "Specifies the number of records to retrieve. Must be less than or equal to 100.",
                "example": "5",
                "required": false
            },
            {
                "name": "trim_user",
                "default": "true",
                "type": "bool",
                "desc": "When set to either true , t or 1 , each tweet returned in a timeline will\ninclude a user object including only the status authors numerical ID. Omit this\nparameter to receive the complete user object.",
                "example": "true",
                "required": false
            }
        ],
        "method": "GET",
        "path": "statuses/retweets/:id",
        "desc": "Returns a collection of the 100 most recent retweets of the Tweet specified by the id parameter."
    },
    {
        "params": [
            {
                "name": "count",
                "default": "5",
                "type": "int",
                "desc": "Specifies the number of records to retrieve. Must be less than or equal to 100.\nIf omitted, 20 will be assumed.",
                "example": "5",
                "required": false
            },
            {
                "name": "since_id",
                "default": "12345",
                "type": "status_id",
                "desc": "Returns results with an ID greater than (that is, more recent than) the\nspecified ID. There are limits to the number of Tweets which can be accessed\nthrough the API. If the limit of Tweets has occured since the since_id, the\nsince_id will be forced to the oldest ID available.",
                "example": "12345",
                "required": false
            },
            {
                "name": "max_id",
                "default": "54321",
                "type": "status_id",
                "desc": "Returns results with an ID less than (that is, older than) or equal to the\nspecified ID.",
                "example": "54321",
                "required": false
            },
            {
                "name": "trim_user",
                "default": "true",
                "type": "bool",
                "desc": "When set to either true , t or 1 , each tweet returned in a timeline will\ninclude a user object including only the status authors numerical ID. Omit this\nparameter to receive the complete user object.",
                "example": "true",
                "required": false
            },
            {
                "name": "include_entities",
                "default": "false",
                "type": "bool",
                "desc": "The tweet entities node will not be included when set to false .",
                "example": "false",
                "required": false
            },
            {
                "name": "include_user_entities",
                "default": "false",
                "type": "bool",
                "desc": "The user entities node will not be included when set to false .",
                "example": "false",
                "required": false
            }
        ],
        "method": "GET",
        "path": "statuses/retweets_of_me",
        "desc": "Returns the most recent Tweets authored by the authenticating user that have been retweeted by others. This timeline is a subset of the user's GET statuses / user_timeline . See Working with Timelines for instructions on traversing timelines."
    },
    {
        "params": [
            {
                "name": "id",
                "default": "123",
                "type": "status_id",
                "desc": "The numerical ID of the desired Tweet.",
                "example": "123",
                "required": true
            },
            {
                "name": "trim_user",
                "default": "true",
                "type": "bool",
                "desc": "When set to either true , t or 1 , each Tweet returned in a timeline will\ninclude a user object including only the status authors numerical ID. Omit this\nparameter to receive the complete user object.",
                "example": "true",
                "required": false
            },
            {
                "name": "include_my_retweet",
                "default": "true",
                "type": "bool",
                "desc": "When set to either true , t or 1 , any Tweets returned that have been\nretweeted by the authenticating user will include an additional\ncurrent_user_retweet node, containing the ID of the source status for the\nretweet.",
                "example": "true",
                "required": false
            },
            {
                "name": "include_entities",
                "default": "false",
                "type": "bool",
                "desc": "The entities node will not be included when set to false.",
                "example": "false",
                "required": false
            }
        ],
        "method": "GET",
        "path": "statuses/show/:id",
        "desc": "Returns a single Tweet , specified by the id parameter. The Tweet's author will also be embedded within the Tweet. See GET statuses / lookup for getting Tweets in bulk (up to 100 per call). See also Embedded Timelines , Embedded Tweets , and GET statuses/oembed for tools to render Tweets according to Display\nRequirements . About Geo If there is no geotag for a status, then there will be an empty <geo/> or \"geo\"  :  {} . This can only be populated if the user has used the Geotagging API to send a statuses/update. The JSON response mostly uses conventions laid out in GeoJSON. The coordinates that Twitter renders are reversed from the GeoJSON specification (GeoJSON specifies a longitude then a latitude, whereas Twitter represents it as a latitude then a longitude), eg: \"geo\":  {  \"type\":\"Point\",  \"coordinates\":[37.78029,  -122.39697]  }"
    },
    {
        "params": [
            {
                "name": "user_id",
                "default": "12345",
                "type": "user_id",
                "desc": "The ID of the user for whom to return results for.",
                "example": "12345",
                "required": false
            },
            {
                "name": "screen_name",
                "default": "noradio",
                "type": "string",
                "desc": "The screen name of the user for whom to return results for.",
                "example": "noradio",
                "required": false
            },
            {
                "name": "since_id",
                "default": "12345",
                "type": "status_id",
                "desc": "Returns results with an ID greater than (that is, more recent than) the\nspecified ID. There are limits to the number of Tweets which can be accessed\nthrough the API. If the limit of Tweets has occured since the since_id, the\nsince_id will be forced to the oldest ID available.",
                "example": "12345",
                "required": false
            },
            {
                "name": "count",
                "desc": "Specifies the number of Tweets to try and retrieve, up to a maximum of 200 per\ndistinct request. The value of count is best thought of as a limit to the\nnumber of Tweets to return because suspended or deleted content is removed after\nthe count has been applied. We include retweets in the count, even if\ninclude_rts is not supplied. It is recommended you always send\ninclude_rts=1 when using this API method.",
                "type": "int",
                "required": false
            },
            {
                "name": "max_id",
                "default": "54321",
                "type": "status_id",
                "desc": "Returns results with an ID less than (that is, older than) or equal to the\nspecified ID.",
                "example": "54321",
                "required": false
            },
            {
                "name": "trim_user",
                "default": "true",
                "type": "bool",
                "desc": "When set to either true , t or 1 , each Tweet returned in a timeline will\ninclude a user object including only the status authors numerical ID. Omit this\nparameter to receive the complete user object.",
                "example": "true",
                "required": false
            },
            {
                "name": "exclude_replies",
                "default": "true",
                "type": "bool",
                "desc": "This parameter will prevent replies from appearing in the returned timeline.\nUsing exclude_replies with the count parameter will mean you will receive\nup-to count tweets \u2014 this is because the count parameter retrieves that many\nTweets before filtering out retweets and replies. This parameter is only\nsupported for JSON and XML responses.",
                "example": "true",
                "required": false
            },
            {
                "name": "contributor_details",
                "default": "true",
                "type": "bool",
                "desc": "This parameter enhances the contributors element of the status response to\ninclude the screen_name of the contributor. By default only the user_id of the\ncontributor is included.",
                "example": "true",
                "required": false
            },
            {
                "name": "include_rts",
                "default": "false",
                "type": "bool",
                "desc": "When set to false , the timeline will strip any native retweets (though they\nwill still count toward both the maximal length of the timeline and the slice\nselected by the count parameter). Note: If you're using the trim_user parameter\nin conjunction with include_rts, the retweets will still contain a full user\nobject.",
                "example": "false",
                "required": false
            }
        ],
        "method": "GET",
        "path": "statuses/user_timeline",
        "desc": "Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters. User timelines belonging to protected users may only be requested when the authenticated user either \"owns\" the timeline or is an approved follower of the owner. The timeline returned is the equivalent of the one seen as a user's profile on twitter.com . This method can only return up to 3,200 of a user's most recent Tweets. Native retweets of other statuses by the user is included in this total, regardless of whether include_rts is set to false when requesting this resource. See Working with Timelines for instructions on traversing timelines. See Embedded Timelines , Embedded Tweets , and GET statuses/oembed for tools to render Tweets according to Display Requirements ."
    },
    {
        "params": [],
        "method": "GET",
        "path": "trends/available",
        "desc": "Returns the locations that Twitter has trending topic information for. The response is an array of \"locations\" that encode the location's WOEID and some other human-readable information such as a canonical name and country the location belongs in. A WOEID is a Yahoo! Where On Earth ID ."
    },
    {
        "params": [
            {
                "name": "lat",
                "default": "37.781157",
                "type": "string",
                "desc": "If provided with a long parameter the available trend locations will be sorted\nby distance, nearest to furthest, to the co-ordinate pair. The valid ranges for\nlongitude is -180.0 to +180.0 (West is negative, East is positive) inclusive.",
                "example": "37.781157",
                "required": true
            },
            {
                "name": "long",
                "default": "-122.400612831116",
                "type": "string",
                "desc": "If provided with a lat parameter the available trend locations will be sorted\nby distance, nearest to furthest, to the co-ordinate pair. The valid ranges for\nlongitude is -180.0 to +180.0 (West is negative, East is positive) inclusive.",
                "example": "-122.400612831116",
                "required": true
            }
        ],
        "method": "GET",
        "path": "trends/closest",
        "desc": "Returns the locations that Twitter has trending topic information for, closest to a specified location. The response is an array of \"locations\" that encode the location's WOEID and some other human-readable information such as a canonical name and country the location belongs in. A WOEID is a Yahoo! Where On Earth ID ."
    },
    {
        "params": [
            {
                "name": "id",
                "default": "1",
                "type": "status_id",
                "desc": "The Yahoo! Where On Earth ID of\nthe location to return trending information for. Global information is available\nby using 1 as the WOEID .",
                "example": "1",
                "required": true
            },
            {
                "name": "exclude",
                "desc": "Setting this equal to hashtags will remove all hashtags from the trends list.",
                "type": "string",
                "required": false
            }
        ],
        "method": "GET",
        "path": "trends/place",
        "desc": "Returns the top 10 trending topics for a specific WOEID , if trending information is available for it. The response is an array of \"trend\" objects that encode the name of the trending topic, the query parameter that can be used to search for the topic on Twitter Search , and the Twitter Search URL. This information is cached for 5 minutes. Requesting more frequently than that will not return any more data, and will count against your rate limit usage."
    },
    {
        "params": [
            {
                "name": "screen_name",
                "default": "twitterapi twitter",
                "type": "string",
                "desc": "A comma separated list of screen names, up to 100 are allowed in a single\nrequest. You are strongly encouraged to use a POST for larger (up to 100 screen\nnames) requests.",
                "example": "twitterapi twitter",
                "required": false
            },
            {
                "name": "user_id",
                "default": "783214 6253282",
                "type": "user_id",
                "desc": "A comma separated list of user IDs, up to 100 are allowed in a single request.\nYou are strongly encouraged to use a POST for larger requests.",
                "example": "783214 6253282",
                "required": false
            },
            {
                "name": "include_entities",
                "default": "false",
                "type": "bool",
                "desc": "The entities node that may appear within embedded statuses will not be\nincluded when set to false.",
                "example": "false",
                "required": false
            }
        ],
        "method": "GET",
        "path": "users/lookup",
        "desc": "Returns fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters. This method is especially useful when used in conjunction with collections of user IDs returned from GET friends / ids and GET followers / ids . GET users / show is used to retrieve a single user object. There are a few things to note when using this method."
    },
    {
        "params": [
            {
                "name": "user_id",
                "default": "12345",
                "type": "user_id",
                "desc": "The ID of the user for whom to return results. Helpful for disambiguating when a\nvalid user ID is also a valid screen name.",
                "example": "12345",
                "required": false
            },
            {
                "name": "screen_name",
                "default": "noradio",
                "type": "string",
                "desc": "The screen name of the user for whom to return results. Helpful for\ndisambiguating when a valid screen name is also a user ID.",
                "example": "noradio",
                "required": false
            }
        ],
        "method": "GET",
        "path": "users/profile_banner",
        "desc": "Returns a map of the available size variations of the specified user's profile banner. If the user has not uploaded a profile banner, a HTTP 404 will be served instead. This method can be used instead of string manipulation on the profile_banner_url returned in user objects as described in Profile Images and Banners . The profile banner data available at each size variant's URL is in PNG format."
    },
    {
        "params": [
            {
                "name": "q",
                "default": "Twitter%20API",
                "type": "string",
                "desc": "The search query to run against people search.",
                "example": "Twitter%20API",
                "required": true
            },
            {
                "name": "page",
                "default": "3",
                "type": "int",
                "desc": "Specifies the page of results to retrieve.",
                "example": "3",
                "required": false
            },
            {
                "name": "count",
                "default": "5",
                "type": "int",
                "desc": "The number of potential user results to retrieve per page. This value has a\nmaximum of 20.",
                "example": "5",
                "required": false
            },
            {
                "name": "include_entities",
                "default": "false",
                "type": "bool",
                "desc": "The entities node will not be included in embedded Tweet objects when set to\nfalse .",
                "example": "false",
                "required": false
            }
        ],
        "method": "GET",
        "path": "users/search",
        "desc": "Provides a simple, relevance-based search interface to public user accounts on Twitter. Try querying by topical interest, full name, company name, location, or other criteria. Exact match searches are not supported. Only the first 1,000 matching results are available."
    },
    {
        "params": [
            {
                "name": "user_id",
                "default": "12345",
                "type": "user_id",
                "desc": "The ID of the user for whom to return results. Either an id or screen_name\nis required for this method.",
                "example": "12345",
                "required": true
            },
            {
                "name": "screen_name",
                "default": "noradio",
                "type": "string",
                "desc": "The screen name of the user for whom to return results. Either a id or\nscreen_name is required for this method.",
                "example": "noradio",
                "required": true
            },
            {
                "name": "include_entities",
                "default": "false",
                "type": "bool",
                "desc": "The entities node will not be included when set to false.",
                "example": "false",
                "required": false
            }
        ],
        "method": "GET",
        "path": "users/show",
        "desc": "Returns a variety of information about the user specified by the required user_id or screen_name parameter. The author's most recent Tweet will be returned inline when possible. GET users / lookup is used to retrieve a bulk collection of user objects. You must be following a protected user to be able to see their most recent Tweet. If you don't follow a protected user, the user's Tweet will be removed. A Tweet will not always be returned in the current_status field."
    },
    {
        "params": [
            {
                "name": "lang",
                "desc": "Restricts the suggested categories to the requested language. The language must\nbe specified by the appropriate two letter ISO 639-1 representation. Currently\nsupported languages are provided by the GET help /\nlanguages API request. Unsupported\nlanguage codes will receive English (en) results. If you use lang in this\nrequest, ensure you also include it when requesting the GET users / suggestions\n/ :slug list.",
                "type": "string",
                "required": false
            }
        ],
        "method": "GET",
        "path": "users/suggestions",
        "desc": "Access to Twitter's suggested user list. This returns the list of suggested user categories. The category can be used in GET users / suggestions / :slug to get the users in that category."
    },
    {
        "params": [
            {
                "name": "slug",
                "default": "twitter",
                "type": "string",
                "desc": "The short name of list or a category",
                "example": "twitter",
                "required": true
            },
            {
                "name": "lang",
                "desc": "Restricts the suggested categories to the requested language. The language must\nbe specified by the appropriate two letter ISO 639-1 representation. Currently\nsupported languages are provided by the GET help /\nlanguages API request. Unsupported\nlanguage codes will receive English (en) results. If you use lang in this\nrequest, ensure you also include it when requesting the GET users / suggestions\n/ :slug list.",
                "type": "string",
                "required": false
            }
        ],
        "method": "GET",
        "path": "users/suggestions/:slug",
        "desc": "Access the users in a given category of the Twitter suggested user list. It is recommended that applications cache this data for no more than one hour."
    },
    {
        "params": [
            {
                "name": "slug",
                "default": "twitter",
                "type": "string",
                "desc": "The short name of list or a category",
                "example": "twitter",
                "required": true
            }
        ],
        "method": "GET",
        "path": "users/suggestions/:slug/members",
        "desc": "Access the users in a given category of the Twitter suggested user list and return their most recent status if they are not a protected user."
    },
    {
        "params": [],
        "method": "POST",
        "path": "account/remove_profile_banner",
        "desc": "Removes the uploaded profile banner for the authenticating user. Returns HTTP 200 upon success."
    },
    {
        "params": [
            {
                "name": "sleep_time_enabled",
                "default": "true",
                "type": "bool",
                "desc": "When set to true , t or 1 , will enable sleep time for the user. Sleep\ntime is the time when push or SMS notifications should not be sent to the user.",
                "example": "true",
                "required": false
            },
            {
                "name": "start_sleep_time",
                "default": "13",
                "type": "int",
                "desc": "The hour that sleep time should begin if it is enabled. The value for this\nparameter should be provided in\nISO8601 format (i.e. 00-23). The\ntime is considered to be in the same timezone as the user's time_zone\nsetting.",
                "example": "13",
                "required": false
            },
            {
                "name": "end_sleep_time",
                "default": "13",
                "type": "int",
                "desc": "The hour that sleep time should end if it is enabled. The value for this\nparameter should be provided in\nISO8601 format (i.e. 00-23). The\ntime is considered to be in the same timezone as the user's time_zone\nsetting.",
                "example": "13",
                "required": false
            },
            {
                "name": "time_zone",
                "default": "Europe/CopenhagenPacific/Tongatapu",
                "type": "string",
                "desc": "The timezone dates and times should be displayed in for the user. The timezone\nmust be one of the Rails\nTimeZone\nnames.",
                "example": "Europe/CopenhagenPacific/Tongatapu",
                "required": false
            },
            {
                "name": "trend_location_woeid",
                "default": "1",
                "type": "int",
                "desc": "The Yahoo! Where On Earth ID to use as the user's default trend location. Global\ninformation is available by using 1 as the WOEID. The woeid must be one of the\nlocations returned by [node:59].",
                "example": "1",
                "required": false
            },
            {
                "name": "lang",
                "default": "itenes",
                "type": "string",
                "desc": "The language which Twitter should render in for this user. The language must be\nspecified by the appropriate two letter ISO 639-1 representation. Currently\nsupported languages are provided by this\nendpoint .",
                "example": "itenes",
                "required": false
            }
        ],
        "method": "POST",
        "path": "account/settings",
        "desc": "Updates the authenticating user's settings."
    },
    {
        "params": [
            {
                "name": "name",
                "default": "Marcel Molina",
                "type": "string",
                "desc": "Full name associated with the profile. Maximum of 20 characters.",
                "example": "Marcel Molina",
                "required": false
            },
            {
                "name": "url",
                "default": "http://project.ioni.st",
                "type": "string",
                "desc": "URL associated with the profile. Will be prepended with \"http://\" if not\npresent. Maximum of 100 characters.",
                "example": "http://project.ioni.st",
                "required": false
            },
            {
                "name": "location",
                "default": "San Francisco CA",
                "type": "string",
                "desc": "The city or country describing where the user of the account is located. The\ncontents are not normalized or geocoded in any way. Maximum of 30 characters.",
                "example": "San Francisco CA",
                "required": false
            },
            {
                "name": "description",
                "default": "Flipped my wig at age 22 and it never grew back. Also: I work at Twitter.",
                "type": "string",
                "desc": "A description of the user owning the account. Maximum of 160 characters.",
                "example": "Flipped my wig at age 22 and it never grew back. Also: I work at Twitter.",
                "required": false
            },
            {
                "name": "profile_link_color",
                "default": "0000FF",
                "type": "color",
                "desc": "Sets a hex value that controls the color scheme of links used on the\nauthenticating user's profile page on twitter.com. This must be a valid\nhexadecimal value, and may be either three or six characters (ex: F00 or\nFF0000). This parameter replaces the deprecated (and separate)\nupdate_profile_colors API method.",
                "example": "0000FF",
                "required": false
            },
            {
                "name": "include_entities",
                "default": "false",
                "type": "bool",
                "desc": "The entities node will not be included when set to false .",
                "example": "false",
                "required": false
            },
            {
                "name": "skip_status",
                "desc": "When set to either true , t or 1 statuses will not be included in the\nreturned user objects.",
                "type": "string",
                "required": false
            }
        ],
        "method": "POST",
        "path": "account/update_profile",
        "desc": "Sets some values that users are able to set under the \"Account\" tab of their settings page. Only the parameters specified will be updated."
    },
    {
        "params": [
            {
                "name": "image",
                "desc": "The background image for the profile, base64-encoded. Must be a valid GIF, JPG,\nor PNG image of less than 800 kilobytes in size. Images with width larger than\n2048 pixels will be forcibly scaled down. The image must be provided as raw\nmultipart data, not a URL.",
                "type": "string",
                "required": false
            },
            {
                "name": "tile",
                "desc": "Whether or not to tile the background image. If set to true , t or 1 the\nbackground image will be displayed tiled. The image will not be tiled otherwise.",
                "type": "string",
                "required": false
            },
            {
                "name": "include_entities",
                "default": "false",
                "type": "bool",
                "desc": "The entities node will not be included when set to false .",
                "example": "false",
                "required": false
            },
            {
                "name": "skip_status",
                "desc": "When set to either true , t or 1 statuses will not be included in the\nreturned user objects.",
                "type": "string",
                "required": false
            },
            {
                "name": "media_id",
                "desc": "Specify the media to use as the background image. More information on upload of\nmedia is available here .",
                "type": "media_id",
                "required": false
            }
        ],
        "method": "POST",
        "path": "account/update_profile_background_image",
        "desc": "Updates the authenticating user's profile background image. This method can also be used to enable or disable the profile background image. Although each parameter is marked as optional, at least one of image or media_id must be provided when making this request."
    },
    {
        "params": [
            {
                "name": "banner",
                "desc": "The Base64-encoded or raw image data being uploaded as the user's new profile\nbanner.",
                "type": "string",
                "required": true
            },
            {
                "name": "width",
                "desc": "The width of the preferred section of the image being uploaded in pixels. Use\nwith height , offset_left , and offset_top to select the desired region\nof the image to use.",
                "type": "string",
                "required": false
            },
            {
                "name": "height",
                "desc": "The height of the preferred section of the image being uploaded in pixels. Use\nwith width , offset_left , and offset_top to select the desired region\nof the image to use.",
                "type": "string",
                "required": false
            },
            {
                "name": "offset_left",
                "desc": "The number of pixels by which to offset the uploaded image from the left. Use\nwith height , width , and offset_top to select the desired region of the\nimage to use.",
                "type": "string",
                "required": false
            },
            {
                "name": "offset_top",
                "desc": "The number of pixels by which to offset the uploaded image from the top. Use\nwith height , width , and offset_left to select the desired region of the\nimage to use.",
                "type": "string",
                "required": false
            }
        ],
        "method": "POST",
        "path": "account/update_profile_banner",
        "desc": "Uploads a profile banner on behalf of the authenticating user. More information about sizing variations can be found in User Profile Images and Banners and GET users / profile_banner . Profile banner images are processed asynchronously. The profile_banner_url and its variant sizes will not necessary be available directly after upload."
    },
    {
        "params": [
            {
                "name": "image",
                "desc": "The avatar image for the profile, base64-encoded. Must be a valid GIF, JPG, or\nPNG image of less than 700 kilobytes in size. Images with width larger than 400\npixels will be scaled down. Animated GIFs will be converted to a static GIF of\nthe first frame, removing the animation.",
                "type": "string",
                "required": true
            },
            {
                "name": "include_entities",
                "default": "false",
                "type": "bool",
                "desc": "The entities node will not be included when set to false .",
                "example": "false",
                "required": false
            },
            {
                "name": "skip_status",
                "desc": "When set to either true , t or 1 statuses will not be included in the\nreturned user objects.",
                "type": "string",
                "required": false
            }
        ],
        "method": "POST",
        "path": "account/update_profile_image",
        "desc": "Updates the authenticating user's profile image. Note that this method expects raw multipart data, not a URL to an image. This method asynchronously processes the uploaded file before updating the user's profile image URL. You can either update your local cache the next time you request the user's information, or, at least 5 seconds after uploading the image, ask for the updated URL using GET users / show ."
    },
    {
        "params": [
            {
                "name": "screen_name",
                "default": "noradio",
                "type": "string",
                "desc": "The screen name of the potentially blocked user. Helpful for disambiguating when\na valid screen name is also a user ID.",
                "example": "noradio",
                "required": false
            },
            {
                "name": "user_id",
                "default": "12345",
                "type": "user_id",
                "desc": "The ID of the potentially blocked user. Helpful for disambiguating when a valid\nuser ID is also a valid screen name.",
                "example": "12345",
                "required": false
            },
            {
                "name": "include_entities",
                "default": "false",
                "type": "bool",
                "desc": "The entities node will not be included when set to false .",
                "example": "false",
                "required": false
            },
            {
                "name": "skip_status",
                "default": "true",
                "type": "bool",
                "desc": "When set to either true , t or 1 statuses will not be included in the\nreturned user objects.",
                "example": "true",
                "required": false
            }
        ],
        "method": "POST",
        "path": "blocks/create",
        "desc": "Blocks the specified user from following the authenticating user. In addition the blocked user will not show in the authenticating users mentions or timeline (unless retweeted by another user). If a follow or friend relationship exists it is destroyed. The URL pattern /version/block/create/:screen_name_or_user_id.format is still accepted but not recommended. As a sequence of numbers is a valid screen name we recommend using the screen_name or user_id parameter instead."
    },
    {
        "params": [
            {
                "name": "screen_name",
                "default": "noradio",
                "type": "string",
                "desc": "The screen name of the potentially blocked user. Helpful for disambiguating when\na valid screen name is also a user ID.",
                "example": "noradio",
                "required": false
            },
            {
                "name": "user_id",
                "default": "12345",
                "type": "user_id",
                "desc": "The ID of the potentially blocked user. Helpful for disambiguating when a valid\nuser ID is also a valid screen name.",
                "example": "12345",
                "required": false
            },
            {
                "name": "include_entities",
                "default": "false",
                "type": "bool",
                "desc": "The entities node will not be included when set to false .",
                "example": "false",
                "required": false
            },
            {
                "name": "skip_status",
                "desc": "When set to either true , t or 1 statuses will not be included in the\nreturned user objects.",
                "type": "string",
                "required": false
            }
        ],
        "method": "POST",
        "path": "blocks/destroy",
        "desc": "Un-blocks the user specified in the ID parameter for the authenticating user. Returns the un-blocked user in the requested format when successful. If relationships existed before the block was instated, they will not be restored."
    },
    {
        "params": [
            {
                "name": "name",
                "default": "Sweet%20Tweets",
                "type": "string",
                "desc": "The title of the collection being created, in 25 characters or less.",
                "example": "Sweet%20Tweets",
                "required": true
            },
            {
                "name": "description",
                "default": "My%20favorite%20tweets%20ever",
                "type": "string",
                "desc": "A brief description of this collection in 160 characters or fewer.",
                "example": "My%20favorite%20tweets%20ever",
                "required": false
            },
            {
                "name": "url",
                "default": "https%3A%2F%2Fexample.com%2F",
                "type": "string",
                "desc": "A fully-qualified URL to associate with this collection.",
                "example": "https%3A%2F%2Fexample.com%2F",
                "required": false
            },
            {
                "name": "timeline_order",
                "default": "tweet_reverse_chron",
                "type": "string",
                "desc": "Order Tweets chronologically or in the order they are added to a Collection.\ncuration_reverse_chron - order added (default) tweet_chron - oldest first\ntweet_reverse_chron - most recent first",
                "example": "tweet_reverse_chron",
                "required": false
            }
        ],
        "method": "POST",
        "path": "collections/create",
        "desc": "Create a Collection owned by the currently authenticated user. The API endpoint may refuse to complete the request if the authenticated user has exceeded the total number of allowed collections for his or her account."
    },
    {
        "params": [
            {
                "name": "id",
                "default": "custom-388061495298244609",
                "type": "status_id",
                "desc": "The identifier of the Collection to destroy.",
                "example": "custom-388061495298244609",
                "required": true
            }
        ],
        "method": "POST",
        "path": "collections/destroy",
        "desc": "Permanently delete a Collection owned by the currently authenticated user."
    },
    {
        "params": [
            {
                "name": "id",
                "default": "custom-388061495298244609",
                "type": "status_id",
                "desc": "The identifier of the Collection receiving the Tweet.",
                "example": "custom-388061495298244609",
                "required": true
            },
            {
                "name": "tweet_id",
                "default": "390839888012382208",
                "type": "status_id",
                "desc": "The identifier of the Tweet to add to the Collection.",
                "example": "390839888012382208",
                "required": true
            },
            {
                "name": "relative_to",
                "default": "614929127313965056",
                "type": "int",
                "desc": "The identifier of the Tweet used for relative positioning in a\ncuration_reverse_chron ordered collection.",
                "example": "614929127313965056",
                "required": false
            },
            {
                "name": "above",
                "default": "false",
                "type": "bool",
                "desc": "Set to false to insert the specified tweet_id below the relative_to\nTweet in the collection. Default: true",
                "example": "false",
                "required": false
            }
        ],
        "method": "POST",
        "path": "collections/entries/add",
        "desc": "Add a specified Tweet to a Collection. A collection will store up to a few thousand Tweets. Adding a Tweet to a collection beyond its allowed capacity will remove the oldest Tweet in the collection based on the time it was added to the collection. Use POST collections / entries / curate to add Tweets to a Collection in bulk."
    },
    {
        "params": [
            {
                "name": "Name",
                "default": "Example",
                "type": "string",
                "desc": "Description",
                "example": "Example",
                "required": false
            }
        ],
        "method": "POST",
        "path": "collections/entries/curate",
        "desc": "Curate a Collection by adding or removing Tweets in bulk. Updates must be limited to 100 cumulative additions or removals per request. Use POST collections / entries / add and POST collections / entries / remove to add or remove a single Tweet."
    },
    {
        "params": [
            {
                "name": "id",
                "default": "custom-388061495298244609",
                "type": "status_id",
                "desc": "The identifier of the Collection receiving the Tweet.",
                "example": "custom-388061495298244609",
                "required": true
            },
            {
                "name": "tweet_id",
                "default": "390839888012382208",
                "type": "status_id",
                "desc": "The identifier of the Tweet to add to the Collection.",
                "example": "390839888012382208",
                "required": true
            },
            {
                "name": "relative_to",
                "default": "614929127313965056",
                "type": "int",
                "desc": "The identifier of the Tweet used for relative positioning.",
                "example": "614929127313965056",
                "required": true
            },
            {
                "name": "above",
                "default": "false",
                "type": "bool",
                "desc": "Set to false to insert the specified tweet_id below the relative_to\nTweet in the collection. Default: true",
                "example": "false",
                "required": false
            }
        ],
        "method": "POST",
        "path": "collections/entries/move",
        "desc": "Move a specified Tweet to a new position in a curation_reverse_chron ordered collection."
    },
    {
        "params": [
            {
                "name": "id",
                "default": "custom-388061495298244609",
                "type": "status_id",
                "desc": "The identifier of the target Collection.",
                "example": "custom-388061495298244609",
                "required": true
            },
            {
                "name": "tweet_id",
                "default": "390839888012382208",
                "type": "status_id",
                "desc": "The identifier of the Tweet to remove.",
                "example": "390839888012382208",
                "required": true
            }
        ],
        "method": "POST",
        "path": "collections/entries/remove",
        "desc": "Remove the specified Tweet from a Collection. Use POST collections / entries / curate to remove Tweets from a Collection in bulk."
    },
    {
        "params": [
            {
                "name": "id",
                "default": "custom-388061495298244609",
                "type": "status_id",
                "desc": "The identifier of the Collection to modify.",
                "example": "custom-388061495298244609",
                "required": true
            },
            {
                "name": "name",
                "default": "Sweet%20Tweets",
                "type": "string",
                "desc": "The title of the Collection being created, in 25 characters or fewer.",
                "example": "Sweet%20Tweets",
                "required": false
            },
            {
                "name": "description",
                "default": "My%20favorite%20tweets%20ever",
                "type": "string",
                "desc": "A brief description of this Collection in 160 characters or fewer.",
                "example": "My%20favorite%20tweets%20ever",
                "required": false
            },
            {
                "name": "url",
                "default": "https%3A%2F%2Fexample.com%2F",
                "type": "string",
                "desc": "A fully-qualified URL to associate with this Collection.",
                "example": "https%3A%2F%2Fexample.com%2F",
                "required": false
            }
        ],
        "method": "POST",
        "path": "collections/update",
        "desc": "Update information concerning a Collection owned by the currently authenticated user. Partial updates are not currently supported: please provide name , description , and url whenever using this method. Omitted description or url parameters will be treated as if an empty string was passed, overwriting any previously stored value for the Collection."
    },
    {
        "params": [
            {
                "name": "id",
                "default": "1270516771",
                "type": "status_id",
                "desc": "The ID of the direct message to delete.",
                "example": "1270516771",
                "required": true
            },
            {
                "name": "include_entities",
                "default": "false",
                "type": "bool",
                "desc": "The entities node will not be included when set to false .",
                "example": "false",
                "required": false
            }
        ],
        "method": "POST",
        "path": "direct_messages/destroy",
        "desc": "Destroys the direct message specified in the required ID parameter. The authenticating user must be the recipient of the specified direct message. Important : This method requires an access token with RWD (read, write & direct message) permissions. Consult The Application Permission Model for more information."
    },
    {
        "params": [
            {
                "name": "user_id",
                "default": "12345",
                "type": "user_id",
                "desc": "The ID of the user who should receive the direct message. Helpful for\ndisambiguating when a valid user ID is also a valid screen name.",
                "example": "12345",
                "required": false
            },
            {
                "name": "screen_name",
                "default": "noradio",
                "type": "string",
                "desc": "The screen name of the user who should receive the direct message. Helpful for\ndisambiguating when a valid screen name is also a user ID.",
                "example": "noradio",
                "required": false
            },
            {
                "name": "text",
                "default": "Meet me behind the cafeteria after school",
                "type": "string",
                "desc": "The text of your direct message. Be sure to URL encode as necessary, and keep\nthe message under 140 characters.",
                "example": "Meet me behind the cafeteria after school",
                "required": true
            }
        ],
        "method": "POST",
        "path": "direct_messages/new",
        "desc": "Sends a new direct message to the specified user from the authenticating user. Requires both the user and text parameters and must be a POST. Returns the sent message in the requested format if successful."
    },
    {
        "params": [
            {
                "name": "id",
                "default": "123",
                "type": "status_id",
                "desc": "The numerical ID of the desired status.",
                "example": "123",
                "required": true
            },
            {
                "name": "include_entities",
                "default": "false",
                "type": "bool",
                "desc": "The entities node will be omitted when set to false .",
                "example": "false",
                "required": false
            }
        ],
        "method": "POST",
        "path": "favorites/create",
        "desc": "Favorites the status specified in the ID parameter as the authenticating user. Returns the favorite status when successful. This process invoked by this method is asynchronous. The immediately returned status may not indicate the resultant favorited status of the tweet. A 200 OK response from this method will indicate whether the intended action was successful or not."
    },
    {
        "params": [
            {
                "name": "id",
                "default": "123",
                "type": "status_id",
                "desc": "The numerical ID of the desired status.",
                "example": "123",
                "required": true
            },
            {
                "name": "include_entities",
                "default": "false",
                "type": "bool",
                "desc": "The entities node will be omitted when set to false .",
                "example": "false",
                "required": false
            }
        ],
        "method": "POST",
        "path": "favorites/destroy",
        "desc": "Un-favorites the status specified in the ID parameter as the authenticating user. Returns the un-favorited status in the requested format when successful. This process invoked by this method is asynchronous. The immediately returned status may not indicate the resultant favorited status of the tweet. A 200 OK response from this method will indicate whether the intended action was successful or not."
    },
    {
        "params": [
            {
                "name": "screen_name",
                "default": "noradio",
                "type": "string",
                "desc": "The screen name of the user for whom to befriend.",
                "example": "noradio",
                "required": false
            },
            {
                "name": "user_id",
                "default": "12345",
                "type": "user_id",
                "desc": "The ID of the user for whom to befriend.",
                "example": "12345",
                "required": false
            },
            {
                "name": "follow",
                "default": "true",
                "type": "bool",
                "desc": "Enable notifications for the target user.",
                "example": "true",
                "required": false
            }
        ],
        "method": "POST",
        "path": "friendships/create",
        "desc": "Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. If you are already friends with the user a HTTP 403 may be returned, though for performance reasons you may get a 200 OK message even if the friendship already exists. Actions taken in this method are asynchronous and changes will be eventually consistent."
    },
    {
        "params": [
            {
                "name": "screen_name",
                "default": "noradio",
                "type": "string",
                "desc": "The screen name of the user for whom to unfollow.",
                "example": "noradio",
                "required": false
            },
            {
                "name": "user_id",
                "default": "12345",
                "type": "user_id",
                "desc": "The ID of the user for whom to unfollow.",
                "example": "12345",
                "required": false
            }
        ],
        "method": "POST",
        "path": "friendships/destroy",
        "desc": "Allows the authenticating user to unfollow the user specified in the ID parameter. Returns the unfollowed user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. Actions taken in this method are asynchronous and changes will be eventually consistent."
    },
    {
        "params": [
            {
                "name": "screen_name",
                "default": "noradio",
                "type": "string",
                "desc": "The screen name of the user for whom to befriend.",
                "example": "noradio",
                "required": false
            },
            {
                "name": "user_id",
                "default": "12345",
                "type": "user_id",
                "desc": "The ID of the user for whom to befriend.",
                "example": "12345",
                "required": false
            },
            {
                "name": "device",
                "default": "truefalse",
                "type": "string",
                "desc": "Enable/disable device notifications from the target user.",
                "example": "truefalse",
                "required": false
            },
            {
                "name": "retweets",
                "default": "truefalse",
                "type": "string",
                "desc": "Enable/disable retweets from the target user.",
                "example": "truefalse",
                "required": false
            }
        ],
        "method": "POST",
        "path": "friendships/update",
        "desc": "Allows one to enable or disable retweets and device notifications from the specified user."
    },
    {
        "params": [
            {
                "name": "name",
                "default": "Twitter%20HQ",
                "type": "string",
                "desc": "The name a place is known as.",
                "example": "Twitter%20HQ",
                "required": true
            },
            {
                "name": "contained_within",
                "default": "247f43d441defc03",
                "type": "string",
                "desc": "The place_id within which the new place can be found. Try and be as close as\npossible with the containing place. For example, for a room in a building, set\nthe contained_within as the building place_id .",
                "example": "247f43d441defc03",
                "required": true
            },
            {
                "name": "token",
                "default": "36179c9bf78835898ebf521c1defd4be",
                "type": "string",
                "desc": "The token found in the response from geo/similar_places.",
                "example": "36179c9bf78835898ebf521c1defd4be",
                "required": true
            },
            {
                "name": "lat",
                "default": "37.7821120598956",
                "type": "string",
                "desc": "The latitude the place is located at. This parameter will be ignored unless it\nis inside the range -90.0 to +90.0 (North is positive) inclusive. It will also\nbe ignored if there isn't a corresponding long parameter.",
                "example": "37.7821120598956",
                "required": true
            },
            {
                "name": "long",
                "default": "-122.400612831116",
                "type": "string",
                "desc": "The longitude the place is located at. The valid ranges for longitude is -180.0\nto +180.0 (East is positive) inclusive. This parameter will be ignored if\noutside that range, if it is not a number, if geo_enabled is disabled, or if\nthere not a corresponding lat parameter.",
                "example": "-122.400612831116",
                "required": true
            },
            {
                "name": "attribute:street_address",
                "default": "795%20Folsom%20St",
                "type": "string",
                "desc": "This parameter searches for places which have this given street address. There\nare other well-known, and application specific attributes available. Custom\nattributes are also permitted. Learn more here .",
                "example": "795%20Folsom%20St",
                "required": false
            },
            {
                "name": "callback",
                "desc": "If supplied, the response will use the JSONP format with a callback of the given\nname.",
                "type": "string",
                "required": false
            }
        ],
        "method": "POST",
        "path": "geo/place",
        "desc": "As of December 2nd, 2013, this endpoint is deprecated and retired and no longer functions. Place creation was used infrequently by third party applications and is generally no longer supported on Twitter. Requests will return with status 410 (Gone) with error code 251 . Created a new place object at the given latitude and longitude. Before creating a place you needed to query GET geo/similar_places with the latitude, longitude and name of the place you wished to create. The query will return an array of places which are similar to the one you wish to create, and a token . If the place you wished to create wasn't in the returned array you could use the token with this method to\ncreate a new one. Learn more about Finding Tweets about Places ."
    },
    {
        "params": [
            {
                "name": "name",
                "desc": "The name for the list. A list's name must start with a letter and can consist\nonly of 25 or fewer letters, numbers, \"-\", or \"_\" characters.",
                "type": "string",
                "required": true
            },
            {
                "name": "mode",
                "desc": "Whether your list is public or private. Values can be public or private . If\nno mode is specified the list will be public.",
                "type": "string",
                "required": false
            },
            {
                "name": "description",
                "desc": "The description to give the list.",
                "type": "string",
                "required": false
            }
        ],
        "method": "POST",
        "path": "lists/create",
        "desc": "Creates a new list for the authenticated user. Note that you can create up to 1000 lists per account."
    },
    {
        "params": [
            {
                "name": "owner_screen_name",
                "desc": "The screen name of the user who owns the list being requested by a slug .",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_id",
                "desc": "The user ID of the user who owns the list being requested by a slug .",
                "type": "status_id",
                "required": false
            },
            {
                "name": "list_id",
                "desc": "The numerical id of the list.",
                "type": "status_id",
                "required": true
            },
            {
                "name": "slug",
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide\nto do so, note that you'll also have to specify the list owner using the\nowner_id or owner_screen_name parameters.",
                "type": "string",
                "required": true
            }
        ],
        "method": "POST",
        "path": "lists/destroy",
        "desc": "Deletes the specified list. The authenticated user must own the list to be able to destroy it."
    },
    {
        "params": [
            {
                "name": "list_id",
                "desc": "The numerical id of the list.",
                "type": "status_id",
                "required": true
            },
            {
                "name": "slug",
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide\nto do so, note that you'll also have to specify the list owner using the\nowner_id or owner_screen_name parameters.",
                "type": "string",
                "required": true
            },
            {
                "name": "user_id",
                "desc": "The ID of the user for whom to return results for. Helpful for disambiguating\nwhen a valid user ID is also a valid screen name.",
                "type": "user_id",
                "required": true
            },
            {
                "name": "screen_name",
                "desc": "The screen name of the user for whom to return results for. Helpful for\ndisambiguating when a valid screen name is also a user ID.",
                "type": "string",
                "required": true
            },
            {
                "name": "owner_screen_name",
                "desc": "The screen name of the user who owns the list being requested by a slug .",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_id",
                "desc": "The user ID of the user who owns the list being requested by a slug .",
                "type": "status_id",
                "required": false
            }
        ],
        "method": "POST",
        "path": "lists/members/create",
        "desc": "Add a member to a list. The authenticated user must own the list to be able to add members to it. Note that lists cannot have more than 5,000 members."
    },
    {
        "params": [
            {
                "name": "list_id",
                "desc": "The numerical id of the list.",
                "type": "status_id",
                "required": true
            },
            {
                "name": "slug",
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide\nto do so, note that you'll also have to specify the list owner using the\nowner_id or owner_screen_name parameters.",
                "type": "string",
                "required": true
            },
            {
                "name": "user_id",
                "desc": "A comma separated list of user IDs, up to 100 are allowed in a single request.",
                "type": "user_id",
                "required": false
            },
            {
                "name": "screen_name",
                "desc": "A comma separated list of screen names, up to 100 are allowed in a single\nrequest.",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_screen_name",
                "desc": "The screen name of the user who owns the list being requested by a slug .",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_id",
                "desc": "The user ID of the user who owns the list being requested by a slug .",
                "type": "status_id",
                "required": false
            }
        ],
        "method": "POST",
        "path": "lists/members/create_all",
        "desc": "Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Note that lists can't have more than 5,000 members, and you are limited to adding up to 100 members to a list at a time with this method. Please note that there can be issues with lists that rapidly remove and add memberships. Take care when using these methods such that you are not too rapidly switching between removals and adds on the same list."
    },
    {
        "params": [
            {
                "name": "list_id",
                "desc": "The numerical id of the list.",
                "type": "status_id",
                "required": false
            },
            {
                "name": "slug",
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide\nto do so, note that you'll also have to specify the list owner using the\nowner_id or owner_screen_name parameters.",
                "type": "string",
                "required": false
            },
            {
                "name": "user_id",
                "desc": "The ID of the user to remove from the list. Helpful for disambiguating when a\nvalid user ID is also a valid screen name.",
                "type": "user_id",
                "required": false
            },
            {
                "name": "screen_name",
                "desc": "The screen name of the user for whom to remove from the list. Helpful for\ndisambiguating when a valid screen name is also a user ID.",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_screen_name",
                "desc": "The screen name of the user who owns the list being requested by a slug .",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_id",
                "desc": "The user ID of the user who owns the list being requested by a slug .",
                "type": "status_id",
                "required": false
            }
        ],
        "method": "POST",
        "path": "lists/members/destroy",
        "desc": "Removes the specified member from the list. The authenticated user must be the list's owner to remove members from the list."
    },
    {
        "params": [
            {
                "name": "list_id",
                "desc": "The numerical id of the list.",
                "type": "status_id",
                "required": true
            },
            {
                "name": "slug",
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide\nto do so, note that you'll also have to specify the list owner using the\nowner_id or owner_screen_name parameters.",
                "type": "string",
                "required": true
            },
            {
                "name": "user_id",
                "desc": "A comma separated list of user IDs, up to 100 are allowed in a single request.",
                "type": "user_id",
                "required": false
            },
            {
                "name": "screen_name",
                "desc": "A comma separated list of screen names, up to 100 are allowed in a single\nrequest.",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_screen_name",
                "desc": "The screen name of the user who owns the list being requested by a slug .",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_id",
                "desc": "The user ID of the user who owns the list being requested by a slug .",
                "type": "status_id",
                "required": false
            }
        ],
        "method": "POST",
        "path": "lists/members/destroy_all",
        "desc": "Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to remove members from it. Note that lists can't have more than 500 members, and you are limited to removing up to 100 members to a list at a time with this method. Please note that there can be issues with lists that rapidly remove and add memberships. Take care when using these methods such that you are not too rapidly switching between removals and adds on the same list."
    },
    {
        "params": [
            {
                "name": "owner_screen_name",
                "desc": "The screen name of the user who owns the list being requested by a slug .",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_id",
                "desc": "The user ID of the user who owns the list being requested by a slug .",
                "type": "status_id",
                "required": false
            },
            {
                "name": "list_id",
                "desc": "The numerical id of the list.",
                "type": "status_id",
                "required": true
            },
            {
                "name": "slug",
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide\nto do so, note that you'll also have to specify the list owner using the\nowner_id or owner_screen_name parameters.",
                "type": "string",
                "required": true
            }
        ],
        "method": "POST",
        "path": "lists/subscribers/create",
        "desc": "Subscribes the authenticated user to the specified list."
    },
    {
        "params": [
            {
                "name": "list_id",
                "desc": "The numerical id of the list.",
                "type": "status_id",
                "required": true
            },
            {
                "name": "slug",
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide\nto do so, note that you'll also have to specify the list owner using the\nowner_id or owner_screen_name parameters.",
                "type": "string",
                "required": true
            },
            {
                "name": "owner_screen_name",
                "desc": "The screen name of the user who owns the list being requested by a slug .",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_id",
                "desc": "The user ID of the user who owns the list being requested by a slug .",
                "type": "status_id",
                "required": false
            }
        ],
        "method": "POST",
        "path": "lists/subscribers/destroy",
        "desc": "Unsubscribes the authenticated user from the specified list."
    },
    {
        "params": [
            {
                "name": "list_id",
                "desc": "The numerical id of the list.",
                "type": "status_id",
                "required": true
            },
            {
                "name": "slug",
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide\nto do so, note that you'll also have to specify the list owner using the\nowner_id or owner_screen_name parameters.",
                "type": "string",
                "required": true
            },
            {
                "name": "name",
                "desc": "The name for the list.",
                "type": "string",
                "required": false
            },
            {
                "name": "mode",
                "desc": "Whether your list is public or private. Values can be public or private . If\nno mode is specified the list will be public.",
                "type": "string",
                "required": false
            },
            {
                "name": "description",
                "desc": "The description to give the list.",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_screen_name",
                "desc": "The screen name of the user who owns the list being requested by a slug .",
                "type": "string",
                "required": false
            },
            {
                "name": "owner_id",
                "desc": "The user ID of the user who owns the list being requested by a slug .",
                "type": "status_id",
                "required": false
            }
        ],
        "method": "POST",
        "path": "lists/update",
        "desc": "Updates the specified list. The authenticated user must own the list to be able to update it."
    },
    {
        "params": [
            {
                "name": "media",
                "desc": "The raw binary file content being uploaded.\nCannot be used with media_data.",
                "type": "string",
                "required": true
            },
            {
                "name": "media_data",
                "desc": "The base64-encoded file content being\nuploaded. Cannot be used with media.",
                "type": "string",
                "required": true
            },
            {
                "name": "additional_owners",
                "desc": "A comma-separated list of user IDs to set as\nadditional owners allowed to use the\nreturned media_id in Tweets or Cards. Up\nto 100 additional owners may be specified.",
                "type": "string",
                "required": false
            }
        ],
        "method": "POST",
        "path": "media/upload",
        "desc": ""
    },
    {
        "params": [
            {
                "name": "screen_name",
                "default": "whiteleaf",
                "type": "string",
                "desc": "The screen name of the potentially muted user. Helpful for disambiguating when a\nvalid screen name is also a user ID.",
                "example": "whiteleaf",
                "required": false
            },
            {
                "name": "user_id",
                "default": "12345",
                "type": "user_id",
                "desc": "The ID of the potentially muted user. Helpful for disambiguating when a valid\nuser ID is also a valid screen name.",
                "example": "12345",
                "required": false
            }
        ],
        "method": "POST",
        "path": "mutes/users/create",
        "desc": "Mutes the user specified in the ID parameter for the authenticating user. Returns the muted user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. Actions taken in this method are asynchronous and changes will be eventually consistent."
    },
    {
        "params": [
            {
                "name": "screen_name",
                "default": "whiteleaf",
                "type": "string",
                "desc": "The screen name of the potentially muted user. Helpful for disambiguating when a\nvalid screen name is also a user ID.",
                "example": "whiteleaf",
                "required": false
            },
            {
                "name": "user_id",
                "default": "12345",
                "type": "user_id",
                "desc": "The ID of the potentially muted user. Helpful for disambiguating when a valid\nuser ID is also a valid screen name.",
                "example": "12345",
                "required": false
            }
        ],
        "method": "POST",
        "path": "mutes/users/destroy",
        "desc": "Un-mutes the user specified in the ID parameter for the authenticating user. Returns the unmuted user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. Actions taken in this method are asynchronous and changes will be eventually consistent."
    },
    {
        "params": [
            {
                "name": "query",
                "desc": "The query of the search the user would like to save.",
                "type": "string",
                "required": true
            }
        ],
        "method": "POST",
        "path": "saved_searches/create",
        "desc": "Create a new saved search for the authenticated user. A user may only have 25 saved searches."
    },
    {
        "params": [
            {
                "name": "id",
                "default": "313006",
                "type": "search_id",
                "desc": "The ID of the saved search.",
                "example": "313006",
                "required": true
            }
        ],
        "method": "POST",
        "path": "saved_searches/destroy/:id",
        "desc": "Destroys a saved search for the authenticating user. The authenticating user must be the owner of saved search id being destroyed."
    },
    {
        "params": [
            {
                "name": "id",
                "default": "123",
                "type": "status_id",
                "desc": "The numerical ID of the desired status.",
                "example": "123",
                "required": true
            },
            {
                "name": "trim_user",
                "default": "true",
                "type": "bool",
                "desc": "When set to either true , t or 1 , each tweet returned in a timeline will\ninclude a user object including only the status authors numerical ID. Omit this\nparameter to receive the complete user object.",
                "example": "true",
                "required": false
            }
        ],
        "method": "POST",
        "path": "statuses/destroy/:id",
        "desc": "Destroys the status specified by the required ID parameter. The authenticating user must be the author of the specified status. Returns the destroyed status if successful."
    },
    {
        "params": [
            {
                "name": "id",
                "default": "123",
                "type": "status_id",
                "desc": "The numerical ID of the desired status.",
                "example": "123",
                "required": true
            },
            {
                "name": "trim_user",
                "default": "true",
                "type": "bool",
                "desc": "When set to either true , t or 1 , each tweet returned in a timeline will\ninclude a user object including only the status authors numerical ID. Omit this\nparameter to receive the complete user object.",
                "example": "true",
                "required": false
            }
        ],
        "method": "POST",
        "path": "statuses/retweet/:id",
        "desc": "Retweets a tweet. Returns the original tweet with retweet details embedded. Usage Notes :"
    },
    {
        "params": [
            {
                "name": "id",
                "default": "123",
                "type": "status_id",
                "desc": "The numerical ID of the desired status.",
                "example": "123",
                "required": true
            },
            {
                "name": "trim_user",
                "default": "true",
                "type": "bool",
                "desc": "When set to either true , t or 1 , each tweet returned in a timeline will\ninclude a user object including only the status authors numerical ID. Omit this\nparameter to receive the complete user object.",
                "example": "true",
                "required": false
            }
        ],
        "method": "POST",
        "path": "statuses/unretweet/:id",
        "desc": "Untweets a retweeted status. Returns the original\nTweet with retweet details\nembedded. Usage Notes :"
    },
    {
        "params": [
            {
                "name": "status",
                "desc": "The text of your status update, typically up to 140 characters. URL encode as\nnecessary. t.co link wrapping may affect character counts.\nThere are some special commands\nin this field to be aware of. For instance, preceding a message with \"D \" or \"M \" and following it with a\nscreen name can create a direct message to that user if the relationship allows for it.",
                "type": "string",
                "required": true
            },
            {
                "name": "in_reply_to_status_id",
                "desc": "The ID of an existing status that the update is in reply to. Note: This\nparameter will be ignored unless the author of the Tweet this parameter\nreferences is mentioned within the status text. Therefore, you must include\n@username , where username is the author of the referenced Tweet, within the\nupdate.",
                "type": "status_id",
                "required": false
            },
            {
                "name": "possibly_sensitive",
                "default": "true",
                "type": "bool",
                "desc": "If you upload Tweet media that might be considered sensitive content such as\nnudity, violence, or medical procedures, you should set this value to true. See\nMedia setting and best practices\nfor more context.\nDefaults to false.",
                "example": "true",
                "required": false
            },
            {
                "name": "lat",
                "default": "37.7821120598956",
                "type": "string",
                "desc": "The latitude of the location this Tweet refers to. This parameter will be\nignored unless it is inside the range -90.0 to +90.0 (North is positive)\ninclusive. It will also be ignored if there isn't a corresponding long\nparameter.",
                "example": "37.7821120598956",
                "required": false
            },
            {
                "name": "long",
                "default": "-122.400612831116",
                "type": "string",
                "desc": "The longitude of the location this Tweet refers to. The valid ranges for\nlongitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will\nbe ignored if outside that range, if it is not a number, if geo_enabled is\ndisabled, or if there not a corresponding lat parameter.",
                "example": "-122.400612831116",
                "required": false
            },
            {
                "name": "place_id",
                "default": "df51dec6f4ee2b2c",
                "type": "place_id",
                "desc": "A place in the world.",
                "example": "df51dec6f4ee2b2c",
                "required": false
            },
            {
                "name": "display_coordinates",
                "default": "true",
                "type": "bool",
                "desc": "Whether or not to put a pin on the exact coordinates a Tweet has been sent from.",
                "example": "true",
                "required": false
            },
            {
                "name": "trim_user",
                "default": "true",
                "type": "bool",
                "desc": "When set to either true , t or 1 , each Tweet returned in a timeline will\ninclude a user object including only the status authors numerical ID. Omit this\nparameter to receive the complete user object.",
                "example": "true",
                "required": false
            },
            {
                "name": "media_ids",
                "default": "471592142565957632",
                "type": "media_ids",
                "desc": "A list of media_ids to associate with the Tweet. You may include up to 4\nphotos or 1 animated GIF or 1 video in a Tweet. See Uploading Media\nfor further details on uploading media.",
                "example": "471592142565957632",
                "required": false
            }
        ],
        "method": "POST",
        "path": "statuses/update",
        "desc": "Updates the authenticating user's current status, also known as Tweeting. For each update attempt, the update text is compared with the authenticating user's recent Tweets. Any attempt that would result in duplication will be blocked, resulting in a 403 error. A user cannot submit the same status twice in a row. While not rate limited by the API, a user is limited in the number of Tweets they can create at a time. If the number of updates posted by the user reaches the current allowed limit this method will return an HTTP 403 error. About Geo"
    },
    {
        "params": [
            {
                "name": "status",
                "desc": "The text of your status update. URL encode as necessary. t.co link\nwrapping may affect character counts if the post contains\nURLs. You must additionally account for the characters_reserved_per_media\nper uploaded media, additionally accounting for space characters in between\nfinalized URLs. Note : Request the GET help /\nconfiguration endpoint to get the\ncurrent characters_reserved_per_media and max_media_per_upload values.",
                "type": "string",
                "required": true
            },
            {
                "name": "media[]",
                "desc": "Up to max_media_per_upload files may be specified in the request, each\nnamed media[] . Supported image formats are PNG, JPG and GIF, including\nanimated GIFs of up to 3MB . This data must be either the raw image bytes or\nencoded as base64. Note : Request the GET help /\nconfiguration endpoint to get the\ncurrent max_media_per_upload and photo_size_limit values.",
                "type": "string",
                "required": true
            },
            {
                "name": "possibly_sensitive",
                "desc": "Set to true for content which may not be suitable for every audience.",
                "type": "string",
                "required": false
            },
            {
                "name": "in_reply_to_status_id",
                "desc": "The ID of an existing status that the update is in reply to. Note : This\nparameter will be ignored unless the author of the tweet this parameter\nreferences is mentioned within the status text. Therefore, you must include\n@username , where username is the author of the referenced tweet, within the\nupdate.",
                "type": "status_id",
                "required": false
            },
            {
                "name": "lat",
                "default": "37.7821120598956",
                "type": "string",
                "desc": "The latitude of the location this tweet refers to. This parameter will be\nignored unless it is inside the range -90.0 to +90.0 (North is positive)\ninclusive. It will also be ignored if there isn't a corresponding long\nparameter.",
                "example": "37.7821120598956",
                "required": false
            },
            {
                "name": "long",
                "default": "-122.400612831116",
                "type": "string",
                "desc": "The longitude of the location this tweet refers to. The valid ranges for\nlongitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will\nbe ignored if outside that range, not a number, geo_enabled is disabled, or\nif there not a corresponding lat parameter.",
                "example": "-122.400612831116",
                "required": false
            },
            {
                "name": "place_id",
                "default": "df51dec6f4ee2b2c",
                "type": "place_id",
                "desc": "A place in the world identified by a Twitter place ID. Place IDs can be\nretrieved from geo/reverse_geocode.",
                "example": "df51dec6f4ee2b2c",
                "required": false
            },
            {
                "name": "display_coordinates",
                "default": "true",
                "type": "bool",
                "desc": "Whether or not to put a pin on the exact coordinates a tweet has been sent from.",
                "example": "true",
                "required": false
            }
        ],
        "method": "POST",
        "path": "statuses/update_with_media",
        "desc": "This endpoint has been DEPRECATED and does not support multiple images, animated GIFs, or video. Follow the `Uploading media guide <rest/media/uploading-media>`__ to upload one or more media entities, and then use `POST statuses/update </rest/reference/post/statuses/update>`__ to attach them to a Tweet. Updates the authenticating user's current status and attaches media for upload. In other words, it creates a Tweet with a picture attached. Unlike POST statuses/update , this method expects raw multipart data. Your POST request's Content-Type should be set to multipart/form-data with the media[] parameter. The Tweet text will be rewritten to include the media URL(s), which will reduce the number of characters allowed in the Tweet text. If the URL(s) cannot be appended without text truncation, the tweet will be rejected and this method will return an HTTP 403 error. Users are limited to a specific daily media upload limit. Requests to this endpoint will return the following headers with information regarding the user's current media upload limits: If the user is over the daily media limit, this method will return an HTTP 403 error. In addition to media upload limits, the user is still limited in the number of statuses they can publish daily. If the user tries to exceed the number of updates allowed, this method will also return an HTTP 403 error, similar to POST statuses/update . OAuth is handled differently for POST messages. See Uploading Media for more details on this."
    },
    {
        "params": [
            {
                "name": "screen_name",
                "default": "noradio",
                "type": "string",
                "desc": "The ID or screen_name of the user you want to report as a spammer. Helpful for\ndisambiguating when a valid screen name is also a user ID.",
                "example": "noradio",
                "required": false
            },
            {
                "name": "user_id",
                "default": "12345",
                "type": "user_id",
                "desc": "The ID of the user you want to report as a spammer. Helpful for disambiguating\nwhen a valid user ID is also a valid screen name.",
                "example": "12345",
                "required": false
            }
        ],
        "method": "POST",
        "path": "users/report_spam",
        "desc": "Report the specified user as a spam account to Twitter. Additionally performs the equivalent of POST blocks / create on behalf of the authenticated user."
    }
]
