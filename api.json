[
    {
        "method": "GET",
        "params": [
            {
                "type": "int",
                "name": "count",
                "required": false,
                "desc": "Specifies the number of tweets to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts=1 when using this API method."
            },
            {
                "type": "int",
                "name": "since_id",
                "example": "12345",
                "required": false,
                "desc": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available."
            },
            {
                "type": "int",
                "name": "max_id",
                "example": "54321",
                "required": false,
                "desc": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
            },
            {
                "type": "bool",
                "name": "trim_user",
                "example": "true",
                "required": false,
                "desc": "When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object."
            },
            {
                "type": "bool",
                "name": "contributor_details",
                "example": "true",
                "required": false,
                "desc": "This parameter enhances the contributors element of the status response to include the screen_name of the contributor. By default only the user_id of the contributor is included."
            },
            {
                "type": "bool",
                "name": "include_entities",
                "example": "false",
                "required": false,
                "desc": "The entities node will be disincluded when set to false."
            }
        ],
        "path": "statuses/mentions_timeline"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "int",
                "name": "user_id",
                "example": "12345",
                "required": false,
                "desc": "The ID of the user for whom to return results for."
            },
            {
                "type": "string",
                "name": "screen_name",
                "example": "noradio",
                "required": false,
                "desc": "The screen name of the user for whom to return results for."
            },
            {
                "type": "int",
                "name": "since_id",
                "example": "12345",
                "required": false,
                "desc": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available."
            },
            {
                "type": "int",
                "name": "count",
                "required": false,
                "desc": "Specifies the number of tweets to try and retrieve, up to a maximum of 200 per distinct request. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts=1 when using this API method."
            },
            {
                "type": "int",
                "name": "max_id",
                "example": "54321",
                "required": false,
                "desc": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
            },
            {
                "type": "bool",
                "name": "trim_user",
                "example": "true",
                "required": false,
                "desc": "When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object."
            },
            {
                "type": "bool",
                "name": "exclude_replies",
                "example": "true",
                "required": false,
                "desc": "This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets \u2014 this is because the count parameter retrieves that many tweets before filtering out retweets and replies. This parameter is only supported for JSON and XML responses."
            },
            {
                "type": "bool",
                "name": "contributor_details",
                "example": "true",
                "required": false,
                "desc": "This parameter enhances the contributors element of the status response to include the screen_name of the contributor. By default only the user_id of the contributor is included."
            },
            {
                "type": "bool",
                "name": "include_rts",
                "example": "false",
                "required": false,
                "desc": "When set to false, the timeline will strip any native retweets (though they will still count toward both the maximal length of the timeline and the slice selected by the count parameter). Note: If you\u2019re using the trim_user parameter in conjunction with include_rts, the retweets will still contain a full user object."
            }
        ],
        "path": "statuses/user_timeline"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "int",
                "name": "count",
                "example": "5",
                "required": false,
                "desc": "Specifies the number of records to retrieve. Must be less than or equal to 200. Defaults to 20. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied."
            },
            {
                "type": "int",
                "name": "since_id",
                "example": "12345",
                "required": false,
                "desc": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available."
            },
            {
                "type": "int",
                "name": "max_id",
                "example": "54321",
                "required": false,
                "desc": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
            },
            {
                "type": "bool",
                "name": "trim_user",
                "example": "true",
                "required": false,
                "desc": "When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object."
            },
            {
                "type": "bool",
                "name": "exclude_replies",
                "example": "true",
                "required": false,
                "desc": "This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets \u2014 this is because the count parameter retrieves that many tweets before filtering out retweets and replies."
            },
            {
                "type": "bool",
                "name": "contributor_details",
                "example": "true",
                "required": false,
                "desc": "This parameter enhances the contributors element of the status response to include the screen_name of the contributor. By default only the user_id of the contributor is included."
            },
            {
                "type": "bool",
                "name": "include_entities",
                "example": "false",
                "required": false,
                "desc": "The entities node will be disincluded when set to false."
            }
        ],
        "path": "statuses/home_timeline"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "int",
                "name": "count",
                "example": "5",
                "required": false,
                "desc": "Specifies the number of records to retrieve. Must be less than or equal to 100. If omitted, 20 will be assumed."
            },
            {
                "type": "int",
                "name": "since_id",
                "example": "12345",
                "required": false,
                "desc": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available."
            },
            {
                "type": "int",
                "name": "max_id",
                "example": "54321",
                "required": false,
                "desc": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
            },
            {
                "type": "bool",
                "name": "trim_user",
                "example": "true",
                "required": false,
                "desc": "When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object."
            },
            {
                "type": "bool",
                "name": "include_entities",
                "example": "false",
                "required": false,
                "desc": "The tweet entities node will not be included when set to false."
            },
            {
                "type": "bool",
                "name": "include_user_entities",
                "example": "false",
                "required": false,
                "desc": "The user entities node will not be included when set to false."
            }
        ],
        "path": "statuses/retweets_of_me"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "int",
                "name": "id",
                "example": "123",
                "required": true,
                "desc": "The numerical ID of the desired status."
            },
            {
                "type": "int",
                "name": "count",
                "example": "5",
                "required": false,
                "desc": "Specifies the number of records to retrieve. Must be less than or equal to 100."
            },
            {
                "type": "bool",
                "name": "trim_user",
                "example": "true",
                "required": false,
                "desc": "When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object."
            }
        ],
        "path": "statuses/retweets/:id"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "int",
                "name": "id",
                "example": "123",
                "required": true,
                "desc": "The numerical ID of the desired Tweet."
            },
            {
                "type": "bool",
                "name": "trim_user",
                "example": "true",
                "required": false,
                "desc": "When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object."
            },
            {
                "type": "bool",
                "name": "include_my_retweet",
                "example": "true",
                "required": false,
                "desc": "When set to either true, t or 1, any Tweets returned that have been retweeted by the authenticating user will include an additional current_user_retweet node, containing the ID of the source status for the retweet."
            },
            {
                "type": "bool",
                "name": "include_entities",
                "example": "false",
                "required": false,
                "desc": "The entities node will be disincluded when set to false."
            }
        ],
        "path": "statuses/show/:id"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "int",
                "name": "id",
                "example": "123",
                "required": true,
                "desc": "The numerical ID of the desired status."
            },
            {
                "type": "bool",
                "name": "trim_user",
                "example": "true",
                "required": false,
                "desc": "When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object."
            }
        ],
        "path": "statuses/destroy/:id"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "string",
                "name": "status",
                "required": true,
                "desc": "The text of your status update, typically up to 140 characters. URL encode as necessary. t.co link wrapping may affect character counts."
            },
            {
                "type": "status_id",
                "name": "in_reply_to_status_id",
                "required": false,
                "desc": "The ID of an existing status that the update is in reply to."
            },
            {
                "type": "bool",
                "name": "possibly_sensitive",
                "example": "true",
                "required": false,
                "desc": "If you upload Tweet media that might be considered sensitive content such as nudity, violence, or medical procedures, you should set this value to true. See Media setting and best practices for more context. Defaults to false."
            },
            {
                "type": "string",
                "name": "lat",
                "example": "37.7821120598956",
                "required": false,
                "desc": "The latitude of the location this tweet refers to. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn\u2019t a corresponding long parameter."
            },
            {
                "type": "string",
                "name": "long",
                "example": "-122.400612831116",
                "required": false,
                "desc": "The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter."
            },
            {
                "type": "place_id",
                "name": "place_id",
                "example": "df51dec6f4ee2b2c",
                "required": false,
                "desc": "A place in the world."
            },
            {
                "type": "bool",
                "name": "display_coordinates",
                "example": "true",
                "required": false,
                "desc": "Whether or not to put a pin on the exact coordinates a tweet has been sent from."
            },
            {
                "type": "bool",
                "name": "trim_user",
                "example": "true",
                "required": false,
                "desc": "When set to either true, t or 1, each Tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object."
            },
            {
                "type": "int",
                "name": "media_ids",
                "example": "471592142565957632",
                "required": false,
                "desc": "A list of media_ids to associate with the Tweet. You may include up to 4 photos or 1 animated GIF or 1 video in a Tweet. See Uploading Media for further details on uploading media."
            }
        ],
        "path": "statuses/update"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "int",
                "name": "id",
                "example": "123",
                "required": true,
                "desc": "The numerical ID of the desired status."
            },
            {
                "type": "bool",
                "name": "trim_user",
                "example": "true",
                "required": false,
                "desc": "When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object."
            }
        ],
        "path": "statuses/retweet/:id"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "int",
                "name": "id",
                "example": "123",
                "required": true,
                "desc": "The numerical ID of the desired retweet status."
            },
            {
                "type": "bool",
                "name": "trim_user",
                "example": "true",
                "required": false,
                "desc": "When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object."
            }
        ],
        "path": "statuses/unretweet/:id"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "string",
                "name": "status",
                "required": true,
                "desc": "The text of your status update. URL encode as necessary. t.co link wrapping may affect character counts if the post contains URLs. You must additionally account for the characters_reserved_per_media per uploaded media, additionally accounting for space characters in between finalized URLs."
            },
            {
                "type": "string",
                "name": "media[]",
                "required": true,
                "desc": "Up to max_media_per_upload files may be specified in the request, each named media[]. Supported image formats are PNG, JPG and GIF, including animated GIFs of up to 3MB . This data must be either the raw image bytes or encoded as base64."
            },
            {
                "type": "string",
                "name": "possibly_sensitive",
                "required": false,
                "desc": "Set to true for content which may not be suitable for every audience."
            },
            {
                "type": "status_id",
                "name": "in_reply_to_status_id",
                "required": false,
                "desc": "The ID of an existing status that the update is in reply to."
            },
            {
                "type": "string",
                "name": "lat",
                "example": "37.7821120598956",
                "required": false,
                "desc": "The latitude of the location this tweet refers to. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn\u2019t a corresponding long parameter."
            },
            {
                "type": "string",
                "name": "long",
                "example": "-122.400612831116",
                "required": false,
                "desc": "The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, not a number, geo_enabled is disabled, or if there not a corresponding lat parameter."
            },
            {
                "type": "place_id",
                "name": "place_id",
                "example": "df51dec6f4ee2b2c",
                "required": false,
                "desc": "A place in the world identified by a Twitter place ID. Place IDs can be retrieved from geo/reverse_geocode."
            },
            {
                "type": "bool",
                "name": "display_coordinates",
                "example": "true",
                "required": false,
                "desc": "Whether or not to put a pin on the exact coordinates a tweet has been sent from."
            }
        ],
        "path": "statuses/update_with_media"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "string",
                "name": "url",
                "required": true,
                "desc": "The URL of the Tweet to be embedded."
            },
            {
                "type": "int",
                "name": "maxwidth",
                "example": "325",
                "required": false,
                "desc": "The maximum width of a rendered Tweet in whole pixels. This value must be between 220 and 550 inclusive. A supplied value under or over the allowed range will be returned as the minimum or maximum supported width respectively; the reset width value will be reflected in the returned width property."
            },
            {
                "type": "bool",
                "name": "hide_media",
                "example": "true",
                "required": false,
                "desc": "When set to true, t or 1 links in a Tweet are not expanded to photo, video, or link previews."
            },
            {
                "type": "bool",
                "name": "hide_thread",
                "example": "true",
                "required": false,
                "desc": "When set to true, t or 1 a collapsed version of the previous Tweet in a conversation thread will not be displayed when the requested Tweet is in reply to another Tweet."
            },
            {
                "type": "bool",
                "name": "omit_script",
                "example": "true",
                "required": false,
                "desc": "When set to true, t or 1 the <script> responsible for loading widgets.js will not be returned. Your webpages should include their own reference to widgets.js for use across all Twitter widgets including Embedded Tweets."
            },
            {
                "type": "string",
                "name": "align",
                "example": "center",
                "required": false,
                "desc": "Specifies whether the embedded Tweet should be floated left, right, or center in the page relative to the parent element. Valid values are left, right, center, and none. Defaults to none, meaning no alignment styles are specified for the Tweet."
            },
            {
                "type": "string",
                "name": "related",
                "required": false,
                "desc": "A comma-separated list of Twitter usernames related to your content. This value will be forwarded to Tweet action intents if a viewer chooses to reply, favorite, or retweet the embedded Tweet."
            },
            {
                "type": "string",
                "name": "lang",
                "example": "fr",
                "required": false,
                "desc": "Request returned HTML and a rendered Tweet in the specified Twitter language supported by embedded Tweets."
            },
            {
                "type": "string",
                "name": "widget_type",
                "example": "video",
                "required": false,
                "desc": "Set to video to return a Twitter Video embed for the given Tweet."
            },
            {
                "type": "int",
                "name": "hide_tweet",
                "example": "1",
                "required": false,
                "desc": "Applies to video type only. Set to 1 or true to link directly to the Tweet URL instead of displaying a Tweet overlay when a viewer clicks on the Twitter bird logo."
            }
        ],
        "path": "statuses/oembed"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "int",
                "name": "id",
                "example": "327473909412814850",
                "required": true,
                "desc": "The numerical ID of the desired status."
            },
            {
                "type": "int",
                "name": "cursor",
                "example": "12893764510938",
                "required": false,
                "desc": "Causes the list of IDs to be broken into pages of no more than 100 IDs at a time. The number of IDs returned is not guaranteed to be 100 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \u201cpage.\u201d The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See our cursor docs for more information. While this method supports the cursor parameter, the entire result set can be returned in a single cursored collection. Using the count parameter with this method will not provide segmented cursors for use with this parameter."
            },
            {
                "type": "bool",
                "name": "stringify_ids",
                "example": "true",
                "required": false,
                "desc": "Many programming environments will not consume our ids due to their size. Provide this option to have ids returned as strings instead."
            }
        ],
        "path": "statuses/retweeters/ids"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "int",
                "name": "id",
                "example": "20",
                "required": true,
                "desc": "A comma separated list of tweet IDs, up to 100 are allowed in a single request."
            },
            {
                "type": "bool",
                "name": "include_entities",
                "example": "false",
                "required": false,
                "desc": "The entities node that may appear within embedded statuses will be disincluded when set to false."
            },
            {
                "type": "bool",
                "name": "trim_user",
                "example": "true",
                "required": false,
                "desc": "When set to either true, t or 1, each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object."
            },
            {
                "type": "bool",
                "name": "map",
                "example": "true",
                "required": false,
                "desc": "When using the map parameter, tweets that do not exist or cannot be viewed by the current user will still have their key represented but with an explicitly null value paired with it"
            }
        ],
        "path": "statuses/lookup"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "int",
                "name": "since_id",
                "example": "12345",
                "required": false,
                "desc": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available."
            },
            {
                "type": "int",
                "name": "max_id",
                "example": "54321",
                "required": false,
                "desc": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
            },
            {
                "type": "int",
                "name": "count",
                "example": "5",
                "required": false,
                "desc": "Specifies the number of records to retrieve. Must be less than or equal to 200."
            },
            {
                "type": "int",
                "name": "page",
                "example": "3",
                "required": false,
                "desc": "Specifies the page of results to retrieve."
            },
            {
                "type": "bool",
                "name": "include_entities",
                "example": "false",
                "required": false,
                "desc": "The entities node will not be included when set to false."
            }
        ],
        "path": "direct_messages/sent"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "int",
                "name": "id",
                "example": "587424932",
                "required": true,
                "desc": "The ID of the direct message."
            }
        ],
        "path": "direct_messages/show"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "string",
                "name": "q",
                "example": "@noradio",
                "required": true,
                "desc": "A UTF-8, URL-encoded search query of 500 characters maximum, including operators.  Queries may additionally be limited by complexity."
            },
            {
                "type": "string",
                "name": "geocode",
                "example": "37.781157,-122.398720,1mi",
                "required": false,
                "desc": "Returns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by \u201clatitude,longitude,radius\u201d, where radius units must be specified as either \u201cmi\u201d (miles) or \u201ckm\u201d (kilometers). Note that you cannot use the near operator via the API to geocode arbitrary locations; however you can use this geocode parameter to search near geocodes directly. A maximum of 1,000 distinct \u201csub-regions\u201d will be considered when using the radius modifier."
            },
            {
                "type": "string",
                "name": "lang",
                "example": "eu",
                "required": false,
                "desc": "Restricts tweets to the given language, given by an ISO 639-1 code. Language detection is best-effort."
            },
            {
                "type": "string",
                "name": "locale",
                "example": "ja",
                "required": false,
                "desc": "Specify the language of the query you are sending (only ja is currently effective). This is intended for language-specific consumers and the default should work in the majority of cases."
            },
            {
                "type": "string",
                "name": "result_type",
                "example": "mixed",
                "required": false,
                "desc": "Optional. Specifies what type of search results you would prefer to receive. The current default is \u201crecent.\u201d Valid values include:\n\u00a0\u00a0* mixed: Include both popular and real time results in the response.\n\u00a0\u00a0* recent: return only the most recent results in the response\n\u00a0\u00a0* popular: return only the most popular results in the response."
            },
            {
                "type": "int",
                "name": "count",
                "example": "100",
                "required": false,
                "desc": "The number of tweets to return per page, up to a maximum of 100. Defaults to 15. This was formerly the \u201crpp\u201d parameter in the old Search API."
            },
            {
                "type": "string",
                "name": "until",
                "example": "2015-07-19",
                "required": false,
                "desc": "Returns tweets created before the given date. Date should be formatted as YYYY-MM-DD. Keep in mind that the search index has a 7-day limit.  In other words, no tweets will be found for a date older than one week."
            },
            {
                "type": "int",
                "name": "since_id",
                "example": "12345",
                "required": false,
                "desc": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available."
            },
            {
                "type": "int",
                "name": "max_id",
                "example": "54321",
                "required": false,
                "desc": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
            },
            {
                "type": "bool",
                "name": "include_entities",
                "example": "false",
                "required": false,
                "desc": "The entities node will be disincluded when set to false."
            },
            {
                "type": "string",
                "name": "callback",
                "example": "processTweets",
                "required": false,
                "desc": "If supplied, the response will use the JSONP format with a callback of the given name. The usefulness of this parameter is somewhat diminished by the requirement of authentication for requests to this endpoint."
            }
        ],
        "path": "search/tweets"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "int",
                "name": "since_id",
                "example": "12345",
                "required": false,
                "desc": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available."
            },
            {
                "type": "int",
                "name": "max_id",
                "example": "54321",
                "required": false,
                "desc": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
            },
            {
                "type": "int",
                "name": "count",
                "example": "5",
                "required": false,
                "desc": "Specifies the number of direct messages to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of Tweets to return because suspended or deleted content is removed after the count has been applied. "
            },
            {
                "type": "bool",
                "name": "include_entities",
                "example": "false",
                "required": false,
                "desc": "The entities node will not be included when set to false."
            },
            {
                "type": "string",
                "name": "skip_status",
                "required": false,
                "desc": "When set to either true, t or 1 statuses will not be included in the returned user objects."
            }
        ],
        "path": "direct_messages"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "int",
                "name": "id",
                "example": "1270516771",
                "required": true,
                "desc": "The ID of the direct message to delete."
            },
            {
                "type": "bool",
                "name": "include_entities",
                "example": "false",
                "required": false,
                "desc": "The entities node will not be included when set to false."
            }
        ],
        "path": "direct_messages/destroy"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "int",
                "name": "user_id",
                "example": "12345",
                "required": false,
                "desc": "The ID of the user who should receive the direct message. Helpful for disambiguating when a valid user ID is also a valid screen name."
            },
            {
                "type": "string",
                "name": "screen_name",
                "example": "noradio",
                "required": false,
                "desc": "The screen name of the user who should receive the direct message. Helpful for disambiguating when a valid screen name is also a user ID."
            },
            {
                "type": "string",
                "name": "text",
                "example": "Meet me behind the cafeteria after school",
                "required": true,
                "desc": "The text of your direct message. Be sure to URL encode as necessary, and keep the message within the character count limit (available in the help/configuration endpoint)"
            }
        ],
        "path": "direct_messages/new"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "bool",
                "name": "stringify_ids",
                "example": "true",
                "required": false,
                "desc": "Many programming environments will not consume our ids due to their size. Provide this option to have ids returned as strings instead. Read more about [node:194]. This parameter is especially important to use in Javascript environments."
            }
        ],
        "path": "friendships/no_retweets/ids"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "int",
                "name": "user_id",
                "example": "12345",
                "required": false,
                "desc": "The ID of the user for whom to return results for."
            },
            {
                "type": "string",
                "name": "screen_name",
                "example": "noradio",
                "required": false,
                "desc": "The screen name of the user for whom to return results for."
            },
            {
                "type": "int",
                "name": "cursor",
                "example": "12893764510938",
                "required": false,
                "desc": "Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \u201cpage.\u201d The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information."
            },
            {
                "type": "bool",
                "name": "stringify_ids",
                "example": "true",
                "required": false,
                "desc": "Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead. More about Twitter IDs."
            },
            {
                "type": "int",
                "name": "count",
                "example": "2048",
                "required": false,
                "desc": "Specifies the number of IDs attempt retrieval of, up to a maximum of 5,000 per distinct request. The value of count is best thought of as a limit to the number of results to return. When using the count parameter with this method, it is wise to use a consistent count value across all requests to the same user\u2019s collection. Usage of this parameter is encouraged in environments where all 5,000 IDs constitutes too large of a response."
            }
        ],
        "path": "friends/ids"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "int",
                "name": "user_id",
                "example": "12345",
                "required": false,
                "desc": "The ID of the user for whom to return results for."
            },
            {
                "type": "string",
                "name": "screen_name",
                "example": "noradio",
                "required": false,
                "desc": "The screen name of the user for whom to return results for."
            },
            {
                "type": "int",
                "name": "cursor",
                "example": "12893764510938",
                "required": false,
                "desc": "Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \u201cpage.\u201d \nThe response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information."
            },
            {
                "type": "bool",
                "name": "stringify_ids",
                "example": "true",
                "required": false,
                "desc": "Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead. More about [node:194]."
            },
            {
                "type": "int",
                "name": "count",
                "example": "2048",
                "required": false,
                "desc": "Specifies the number of IDs attempt retrieval of, up to a maximum of 5,000 per distinct request. The value of count is best thought of as a limit to the number of results to return. When using the count parameter with this method, it is wise to use a consistent count value across all requests to the same user\u2019s collection. Usage of this parameter is encouraged in environments where all 5,000 IDs constitutes too large of a response."
            }
        ],
        "path": "followers/ids"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "int",
                "name": "cursor",
                "example": "12893764510938",
                "required": false,
                "desc": "Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \u201cpage.\u201d \nThe response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See [node:10362, title=\u201dUsing cursors to navigate collections\u201d] for more information."
            },
            {
                "type": "bool",
                "name": "stringify_ids",
                "example": "true",
                "required": false,
                "desc": "Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead. More about [node:194]."
            }
        ],
        "path": "friendships/incoming"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "int",
                "name": "cursor",
                "example": "12893764510938",
                "required": false,
                "desc": "Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \u201cpage.\u201d \nThe response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See [node:10362, title=\u201dUsing cursors to navigate collections\u201d] for more information."
            },
            {
                "type": "bool",
                "name": "stringify_ids",
                "example": "true",
                "required": false,
                "desc": "Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead. More about [node:194]."
            }
        ],
        "path": "friendships/outgoing"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "string",
                "name": "screen_name",
                "example": "noradio",
                "required": false,
                "desc": "The screen name of the user for whom to befriend."
            },
            {
                "type": "int",
                "name": "user_id",
                "example": "12345",
                "required": false,
                "desc": "The ID of the user for whom to befriend."
            },
            {
                "type": "bool",
                "name": "follow",
                "example": "true",
                "required": false,
                "desc": "Enable notifications for the target user."
            }
        ],
        "path": "friendships/create"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "string",
                "name": "screen_name",
                "example": "noradio",
                "required": false,
                "desc": "The screen name of the user for whom to unfollow. "
            },
            {
                "type": "int",
                "name": "user_id",
                "example": "12345",
                "required": false,
                "desc": "The ID of the user for whom to unfollow. "
            }
        ],
        "path": "friendships/destroy"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "string",
                "name": "screen_name",
                "example": "noradio",
                "required": false,
                "desc": "The screen name of the user for whom to befriend. "
            },
            {
                "type": "int",
                "name": "user_id",
                "example": "12345",
                "required": false,
                "desc": "The ID of the user for whom to befriend. "
            },
            {
                "type": "bool",
                "name": "device",
                "example": "true",
                "required": false,
                "desc": "Enable/disable device notifications from the target user."
            },
            {
                "type": "bool",
                "name": "retweets",
                "example": "true",
                "required": false,
                "desc": "Enable/disable retweets from the target user."
            }
        ],
        "path": "friendships/update"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "int",
                "name": "source_id",
                "example": "3191321",
                "required": false,
                "desc": "The user_id of the subject user."
            },
            {
                "type": "string",
                "name": "source_screen_name",
                "example": "raffi",
                "required": false,
                "desc": "The screen_name of the subject user."
            },
            {
                "type": "int",
                "name": "target_id",
                "example": "20",
                "required": false,
                "desc": "The user_id of the target user."
            },
            {
                "type": "string",
                "name": "target_screen_name",
                "example": "noradio",
                "required": false,
                "desc": "The screen_name of the target user."
            }
        ],
        "path": "friendships/show"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "int",
                "name": "user_id",
                "example": "12345",
                "required": false,
                "desc": "The ID of the user for whom to return results for."
            },
            {
                "type": "string",
                "name": "screen_name",
                "example": "noradio",
                "required": false,
                "desc": "The screen name of the user for whom to return results for."
            },
            {
                "type": "int",
                "name": "cursor",
                "example": "12893764510938",
                "required": false,
                "desc": "Causes the results to be broken into pages. If no cursor is provided, a value of -1 will be assumed, which is the first \u201cpage.\u201d The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See [node:10362, title=\u201dUsing cursors to navigate collections\u201d] for more information."
            },
            {
                "type": "int",
                "name": "count",
                "example": "42",
                "required": false,
                "desc": "The number of users to return per page, up to a maximum of 200. Defaults to 20."
            },
            {
                "type": "bool",
                "name": "skip_status",
                "example": "false",
                "required": false,
                "desc": "When set to either true, t or 1 statuses will not be included in the returned user objects."
            },
            {
                "type": "bool",
                "name": "include_user_entities",
                "example": "false",
                "required": false,
                "desc": "The user object entities node will be disincluded when set to false."
            }
        ],
        "path": "friends/list"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "int",
                "name": "user_id",
                "example": "12345",
                "required": false,
                "desc": "The ID of the user for whom to return results for."
            },
            {
                "type": "string",
                "name": "screen_name",
                "example": "twitterdev",
                "required": false,
                "desc": "The screen name of the user for whom to return results for."
            },
            {
                "type": "int",
                "name": "cursor",
                "example": "12893764510938",
                "required": false,
                "desc": "Causes the results to be broken into pages. If no cursor is provided, a value of -1 will be assumed, which is the first \u201cpage.\u201d The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information."
            },
            {
                "type": "int",
                "name": "count",
                "example": "42",
                "required": false,
                "desc": "The number of users to return per page, up to a maximum of 200. Defaults to 20."
            },
            {
                "type": "bool",
                "name": "skip_status",
                "example": "false",
                "required": false,
                "desc": "When set to either true, t or 1, statuses will not be included in the returned user objects. If set to any other value, statuses will be included."
            },
            {
                "type": "bool",
                "name": "include_user_entities",
                "example": "false",
                "required": false,
                "desc": "The user object entities node will not be included when set to false."
            }
        ],
        "path": "followers/list"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "string",
                "name": "screen_name",
                "example": "twitterapi,twitter",
                "required": false,
                "desc": "A comma separated list of screen names, up to 100 are allowed in a single request."
            },
            {
                "type": "user_id",
                "name": "user_id",
                "example": "783214,6253282",
                "required": false,
                "desc": "A comma separated list of user IDs, up to 100 are allowed in a single request."
            }
        ],
        "path": "friendships/lookup"
    },
    {
        "method": "GET",
        "params": [],
        "path": "account/settings"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "bool",
                "name": "include_entities",
                "example": "false",
                "required": false,
                "desc": "The entities node will not be included when set to false."
            },
            {
                "type": "bool",
                "name": "skip_status",
                "example": "true",
                "required": false,
                "desc": "When set to either true, t or 1 statuses will not be included in the returned user object."
            },
            {
                "type": "bool",
                "name": "include_email",
                "example": "true",
                "required": false,
                "desc": "Use of this parameter requires whitelisting."
            }
        ],
        "path": "account/verify_credentials"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "bool",
                "name": "sleep_time_enabled",
                "example": "true",
                "required": false,
                "desc": "When set to true, t or 1, will enable sleep time for the user. Sleep time is the time when push or SMS notifications should not be sent to the user."
            },
            {
                "type": "int",
                "name": "start_sleep_time",
                "example": "13",
                "required": false,
                "desc": "The hour that sleep time should begin if it is enabled. The value for this parameter should be provided in ISO8601 format (i.e. 00-23). The time is considered to be in the same timezone as the user\u2019s time_zone setting."
            },
            {
                "type": "int",
                "name": "end_sleep_time",
                "example": "13",
                "required": false,
                "desc": "The hour that sleep time should end if it is enabled. The value for this parameter should be provided in ISO8601 format (i.e. 00-23). The time is considered to be in the same timezone as the user\u2019s time_zone setting."
            },
            {
                "type": "string",
                "name": "time_zone",
                "example": "Europe/Copenhagen",
                "required": false,
                "desc": "The timezone dates and times should be displayed in for the user. The timezone must be one of the Rails TimeZone names."
            },
            {
                "type": "int",
                "name": "trend_location_woeid",
                "example": "1",
                "required": false,
                "desc": "The Yahoo! Where On Earth ID to use as the user\u2019s default trend location. Global information is available by using 1 as the WOEID. The woeid must be one of the locations returned by [node:59]."
            },
            {
                "type": "int",
                "name": "allow_contributor_request",
                "example": "1",
                "required": false,
                "desc": "Whether to allow others to include user as contributor. Possible values include \u201call\u201d (anyone can include user), \u201cfollowing\u201d (only followers can include user) or \u201cnone\u201d."
            },
            {
                "type": "string",
                "name": "lang",
                "example": "it",
                "required": false,
                "desc": "The language which Twitter should render in for this user. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by this endpoint.\n  "
            }
        ],
        "path": "account/settings"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "string",
                "name": "name",
                "example": "Marcel Molina",
                "required": false,
                "desc": "Full name associated with the profile. Maximum of 20 characters."
            },
            {
                "type": "string",
                "name": "url",
                "example": "http://project.ioni.st",
                "required": false,
                "desc": "URL associated with the profile. Will be prepended with \u201chttp://\u201d if not present. Maximum of 100 characters."
            },
            {
                "type": "string",
                "name": "location",
                "example": "San Francisco, CA",
                "required": false,
                "desc": "The city or country describing where the user of the account is located. The contents are not normalized or geocoded in any way. Maximum of 30 characters."
            },
            {
                "type": "string",
                "name": "description",
                "example": "Flipped my wig at age 22 and it never grew back. Also: I work at Twitter.",
                "required": false,
                "desc": "A description of the user owning the account. Maximum of 160 characters."
            },
            {
                "type": "color",
                "name": "profile_link_color",
                "required": false,
                "desc": "Sets a hex value that controls the color scheme of links used on the authenticating user\u2019s profile page on twitter.com. This must be a valid hexadecimal value, and may be either three or six characters (ex: F00 or FF0000)."
            },
            {
                "type": "bool",
                "name": "include_entities",
                "example": "false",
                "required": false,
                "desc": "The entities node will not be included when set to false."
            },
            {
                "type": "string",
                "name": "skip_status",
                "required": false,
                "desc": "When set to either true, t or 1 statuses will not be included in the returned user objects."
            }
        ],
        "path": "account/update_profile"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "string",
                "name": "image",
                "required": true,
                "desc": "The avatar image for the profile, base64-encoded. Must be a valid GIF, JPG, or PNG image of less than 700 kilobytes in size. Images with width larger than 400 pixels will be scaled down. Animated GIFs will be converted to a static GIF of the first frame, removing the animation."
            },
            {
                "type": "bool",
                "name": "include_entities",
                "example": "false",
                "required": false,
                "desc": "The entities node will not be included when set to false."
            },
            {
                "type": "string",
                "name": "skip_status",
                "required": false,
                "desc": "When set to either true, t or 1 statuses will not be included in the returned user objects."
            }
        ],
        "path": "account/update_profile_image"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "bool",
                "name": "include_entities",
                "example": "false",
                "required": false,
                "desc": "The entities node will not be included when set to false."
            },
            {
                "type": "string",
                "name": "skip_status",
                "required": false,
                "desc": "When set to either true, t or 1 statuses will not be included in the returned user objects."
            },
            {
                "type": "int",
                "name": "cursor",
                "example": "12893764510938",
                "required": false,
                "desc": "Causes the list of blocked users to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \u201cpage.\u201d \nThe response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information."
            }
        ],
        "path": "blocks/list"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "bool",
                "name": "stringify_ids",
                "example": "true",
                "required": false,
                "desc": "Many programming environments will not consume our ids due to their size. Provide this option to have ids returned as strings instead. Read more about Twitter IDs."
            },
            {
                "type": "int",
                "name": "cursor",
                "example": "12893764510938",
                "required": false,
                "desc": "Causes the list of IDs to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \u201cpage.\u201d \nThe response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information."
            }
        ],
        "path": "blocks/ids"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "string",
                "name": "screen_name",
                "example": "noradio",
                "required": false,
                "desc": "The screen name of the potentially blocked user. Helpful for disambiguating when a valid screen name is also a user ID."
            },
            {
                "type": "int",
                "name": "user_id",
                "example": "12345",
                "required": false,
                "desc": "The ID of the potentially blocked user. Helpful for disambiguating when a valid user ID is also a valid screen name."
            },
            {
                "type": "bool",
                "name": "include_entities",
                "example": "false",
                "required": false,
                "desc": "The entities node will not be included when set to false."
            },
            {
                "type": "bool",
                "name": "skip_status",
                "example": "true",
                "required": false,
                "desc": "When set to either true, t or 1 statuses will not be included in the returned user objects."
            }
        ],
        "path": "blocks/create"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "string",
                "name": "screen_name",
                "example": "noradio",
                "required": false,
                "desc": "The screen name of the potentially blocked user. Helpful for disambiguating when a valid screen name is also a user ID."
            },
            {
                "type": "int",
                "name": "user_id",
                "example": "12345",
                "required": false,
                "desc": "The ID of the potentially blocked user. Helpful for disambiguating when a valid user ID is also a valid screen name."
            },
            {
                "type": "bool",
                "name": "include_entities",
                "example": "false",
                "required": false,
                "desc": "The entities node will not be included when set to false."
            },
            {
                "type": "string",
                "name": "skip_status",
                "required": false,
                "desc": "When set to either true, t or 1 statuses will not be included in the returned user objects."
            }
        ],
        "path": "blocks/destroy"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "string",
                "name": "screen_name",
                "example": "twitterapi,twitter",
                "required": false,
                "desc": "A comma separated list of screen names, up to 100 are allowed in a single request. You are strongly encouraged to use a POST for larger (up to 100 screen names) requests."
            },
            {
                "type": "user_id",
                "name": "user_id",
                "example": "783214,6253282",
                "required": false,
                "desc": "A comma separated list of user IDs, up to 100 are allowed in a single request. You are strongly encouraged to use a POST for larger requests."
            },
            {
                "type": "bool",
                "name": "include_entities",
                "example": "false",
                "required": false,
                "desc": "The entities node that may appear within embedded statuses will be disincluded when set to false."
            }
        ],
        "path": "users/lookup"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "int",
                "name": "user_id",
                "example": "12345",
                "required": true,
                "desc": "The ID of the user for whom to return results for. Either an id or screen_name is required for this method."
            },
            {
                "type": "string",
                "name": "screen_name",
                "example": "noradio",
                "required": true,
                "desc": "The screen name of the user for whom to return results for. Either a id or screen_name is required for this method."
            },
            {
                "type": "bool",
                "name": "include_entities",
                "example": "false",
                "required": false,
                "desc": "The entities node will be disincluded when set to false."
            }
        ],
        "path": "users/show"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "string",
                "name": "q",
                "example": "Twitter%20API",
                "required": true,
                "desc": "The search query to run against people search."
            },
            {
                "type": "int",
                "name": "page",
                "example": "3",
                "required": false,
                "desc": "Specifies the page of results to retrieve."
            },
            {
                "type": "int",
                "name": "count",
                "example": "5",
                "required": false,
                "desc": "The number of potential user results to retrieve per page. This value has a maximum of 20."
            },
            {
                "type": "bool",
                "name": "include_entities",
                "example": "false",
                "required": false,
                "desc": "The entities node will be disincluded from embedded tweet objects when set to false."
            }
        ],
        "path": "users/search"
    },
    {
        "method": "POST",
        "params": [],
        "path": "account/remove_profile_banner"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "string",
                "name": "banner",
                "required": true,
                "desc": "The Base64-encoded or raw image data being uploaded as the user\u2019s new profile banner."
            },
            {
                "type": "string",
                "name": "width",
                "required": false,
                "desc": "The width of the preferred section of the image being uploaded in pixels. Use with height, offset_left, and offset_top to select the desired region of the image to use."
            },
            {
                "type": "string",
                "name": "height",
                "required": false,
                "desc": "The height of the preferred section of the image being uploaded in pixels. Use with width, offset_left, and offset_top to select the desired region of the image to use."
            },
            {
                "type": "string",
                "name": "offset_left",
                "required": false,
                "desc": "The number of pixels by which to offset the uploaded image from the left. Use with height, width, and offset_top to select the desired region of the image to use."
            },
            {
                "type": "string",
                "name": "offset_top",
                "required": false,
                "desc": "The number of pixels by which to offset the uploaded image from the top. Use with height, width, and offset_left to select the desired region of the image to use."
            }
        ],
        "path": "account/update_profile_banner"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "int",
                "name": "user_id",
                "example": "12345",
                "required": false,
                "desc": "The ID of the user for whom to return results. Helpful for disambiguating when a valid user ID is also a valid screen name."
            },
            {
                "type": "string",
                "name": "screen_name",
                "example": "noradio",
                "required": false,
                "desc": "The screen name of the user for whom to return results. Helpful for disambiguating when a valid screen name is also a user ID."
            }
        ],
        "path": "users/profile_banner"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "string",
                "name": "screen_name",
                "example": "whiteleaf",
                "required": false,
                "desc": "The screen name of the potentially muted user. Helpful for disambiguating when a valid screen name is also a user ID."
            },
            {
                "type": "int",
                "name": "user_id",
                "example": "12345",
                "required": false,
                "desc": "The ID of the potentially muted user. Helpful for disambiguating when a valid user ID is also a valid screen name."
            }
        ],
        "path": "mutes/users/create"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "string",
                "name": "screen_name",
                "example": "whiteleaf",
                "required": false,
                "desc": "The screen name of the potentially muted user. Helpful for disambiguating when a valid screen name is also a user ID."
            },
            {
                "type": "int",
                "name": "user_id",
                "example": "12345",
                "required": false,
                "desc": "The ID of the potentially muted user. Helpful for disambiguating when a valid user ID is also a valid screen name."
            }
        ],
        "path": "mutes/users/destroy"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "int",
                "name": "cursor",
                "example": "2",
                "required": false,
                "desc": "Causes the list of IDs to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out. If no cursor is provided, a value of -1 will be assumed, which is the first \u201cpage.\u201d\nThe response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See [node:10362, title=\u201dUsing cursors to navigate collections\u201d] for more information."
            }
        ],
        "path": "mutes/users/ids"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "int",
                "name": "cursor",
                "example": "2",
                "required": false,
                "desc": "Causes the list of IDs to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first \u201cpage.\u201d\nThe response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See [node:10362, title=\u201dUsing cursors to navigate collections\u201d] for more information."
            },
            {
                "type": "bool",
                "name": "include_entities",
                "example": "false",
                "required": false,
                "desc": "The entities node will not be included when set to false."
            },
            {
                "type": "bool",
                "name": "skip_status",
                "example": "true",
                "required": false,
                "desc": "When set to either true, t or 1 statuses will not be included in the returned user objects."
            }
        ],
        "path": "mutes/users/list"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "string",
                "name": "slug",
                "example": "twitter",
                "required": true,
                "desc": "The short name of list or a category"
            },
            {
                "type": "string",
                "name": "lang",
                "required": false,
                "desc": "Restricts the suggested categories to the requested language. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by the GET help / languages API request. Unsupported language codes will receive English (en) results. If you use lang in this request, ensure you also include it when requesting the GET users / suggestions / :slug list."
            }
        ],
        "path": "users/suggestions/:slug"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "string",
                "name": "lang",
                "required": false,
                "desc": "Restricts the suggested categories to the requested language. The language must be specified by the appropriate two letter ISO 639-1 representation. Currently supported languages are provided by the GET help / languages API request. Unsupported language codes will receive English (en) results. If you use lang in this request, ensure you also include it when requesting the GET users / suggestions / :slug list."
            }
        ],
        "path": "users/suggestions"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "string",
                "name": "slug",
                "example": "twitter",
                "required": true,
                "desc": "The short name of list or a category"
            }
        ],
        "path": "users/suggestions/:slug/members"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "int",
                "name": "user_id",
                "example": "12345",
                "required": false,
                "desc": "The ID of the user for whom to return results for."
            },
            {
                "type": "string",
                "name": "screen_name",
                "example": "noradio",
                "required": false,
                "desc": "The screen name of the user for whom to return results for."
            },
            {
                "type": "int",
                "name": "count",
                "example": "5",
                "required": false,
                "desc": "Specifies the number of records to retrieve. Must be less than or equal to 200; defaults to 20. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied."
            },
            {
                "type": "int",
                "name": "since_id",
                "example": "12345",
                "required": false,
                "desc": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available."
            },
            {
                "type": "int",
                "name": "max_id",
                "example": "54321",
                "required": false,
                "desc": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
            },
            {
                "type": "bool",
                "name": "include_entities",
                "example": "false",
                "required": false,
                "desc": "The entities node will be omitted when set to false."
            }
        ],
        "path": "favorites/list"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "int",
                "name": "id",
                "example": "123",
                "required": true,
                "desc": "The numerical ID of the desired status."
            },
            {
                "type": "bool",
                "name": "include_entities",
                "example": "false",
                "required": false,
                "desc": "The entities node will be omitted when set to false."
            }
        ],
        "path": "favorites/destroy"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "int",
                "name": "id",
                "example": "123",
                "required": true,
                "desc": "The numerical ID of the desired status."
            },
            {
                "type": "bool",
                "name": "include_entities",
                "example": "false",
                "required": false,
                "desc": "The entities node will be omitted when set to false."
            }
        ],
        "path": "favorites/create"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "user_id",
                "name": "user_id",
                "required": false,
                "desc": "The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name."
            },
            {
                "type": "string",
                "name": "screen_name",
                "example": "noradio",
                "required": false,
                "desc": "The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID."
            },
            {
                "type": "bool",
                "name": "reverse",
                "example": "true",
                "required": false,
                "desc": "Set this to true if you would like owned lists to be returned first.  See description above for information on how this parameter works."
            }
        ],
        "path": "lists/list"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "status_id",
                "name": "list_id",
                "required": true,
                "desc": "The numerical id of the list."
            },
            {
                "type": "string",
                "name": "slug",
                "required": true,
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you\u2019ll also have to specify the list owner using the owner_id or owner_screen_name parameters."
            },
            {
                "type": "string",
                "name": "owner_screen_name",
                "required": false,
                "desc": "The screen name of the user who owns the list being requested by a slug."
            },
            {
                "type": "status_id",
                "name": "owner_id",
                "required": false,
                "desc": "The user ID of the user who owns the list being requested by a slug."
            },
            {
                "type": "status_id",
                "name": "since_id",
                "required": false,
                "desc": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available."
            },
            {
                "type": "status_id",
                "name": "max_id",
                "required": false,
                "desc": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
            },
            {
                "type": "int",
                "name": "count",
                "required": false,
                "desc": "Specifies the number of results to retrieve per \u201cpage.\u201d"
            },
            {
                "type": "string",
                "name": "include_entities",
                "required": false,
                "desc": "Entities are ON by default in API 1.1, each tweet includes a node called \u201centities\u201d. This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. You can omit entities from the result by using include_entities=false"
            },
            {
                "type": "string",
                "name": "include_rts",
                "required": false,
                "desc": "When set to either true, t or 1, the list timeline will contain native retweets (if they exist) in addition to the standard stream of tweets. The output format of retweeted tweets is identical to the representation you see in home_timeline."
            }
        ],
        "path": "lists/statuses"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "status_id",
                "name": "list_id",
                "required": false,
                "desc": "The numerical id of the list."
            },
            {
                "type": "string",
                "name": "slug",
                "required": false,
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you\u2019ll also have to specify the list owner using the owner_id or owner_screen_name parameters."
            },
            {
                "type": "user_id",
                "name": "user_id",
                "required": false,
                "desc": "The ID of the user to remove from the list. Helpful for disambiguating when a valid user ID is also a valid screen name."
            },
            {
                "type": "string",
                "name": "screen_name",
                "required": false,
                "desc": "The screen name of the user for whom to remove from the list. Helpful for disambiguating when a valid screen name is also a user ID."
            },
            {
                "type": "string",
                "name": "owner_screen_name",
                "required": false,
                "desc": "The screen name of the user who owns the list being requested by a slug."
            },
            {
                "type": "status_id",
                "name": "owner_id",
                "required": false,
                "desc": "The user ID of the user who owns the list being requested by a slug."
            }
        ],
        "path": "lists/members/destroy"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "user_id",
                "name": "user_id",
                "required": false,
                "desc": "The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name."
            },
            {
                "type": "string",
                "name": "screen_name",
                "required": false,
                "desc": "The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID."
            },
            {
                "type": "int",
                "name": "count",
                "required": false,
                "desc": "The amount of results to return per page. Defaults to 20. No more than 1000 results will ever be returned in a single page."
            },
            {
                "type": "cursor",
                "name": "cursor",
                "required": false,
                "desc": "Breaks the results into pages. Provide a value of -1 to begin paging. Provide values as returned in the response body\u2019s next_cursor and previous_cursor attributes to page back and forth in the list. It is recommended to always use cursors when the method supports them.  See [node:10362] for more information."
            },
            {
                "type": "string",
                "name": "filter_to_owned_lists",
                "required": false,
                "desc": "When set to true, t or 1, will return just lists the authenticating user owns, and the user represented by user_id or screen_name is a member of."
            }
        ],
        "path": "lists/memberships"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "status_id",
                "name": "list_id",
                "required": true,
                "desc": "The numerical id of the list."
            },
            {
                "type": "string",
                "name": "slug",
                "required": true,
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you\u2019ll also have to specify the list owner using the owner_id or owner_screen_name parameters."
            },
            {
                "type": "string",
                "name": "owner_screen_name",
                "required": false,
                "desc": "The screen name of the user who owns the list being requested by a slug."
            },
            {
                "type": "status_id",
                "name": "owner_id",
                "required": false,
                "desc": "The user ID of the user who owns the list being requested by a slug."
            },
            {
                "type": "int",
                "name": "count",
                "required": false,
                "desc": "Specifies the number of results to return per page (see cursor below). The default is 20, with a maximum of 5,000."
            },
            {
                "type": "cursor",
                "name": "cursor",
                "required": false,
                "desc": "Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned in the response body\u2019s next_cursor and previous_cursor attributes to page back and forth in the list. See Using cursors to navigate collections for more information."
            },
            {
                "type": "string",
                "name": "include_entities",
                "required": false,
                "desc": "When set to either true, t or 1, each tweet will include a node called \u201centities\u201d. This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. See Tweet Entities for more details."
            },
            {
                "type": "string",
                "name": "skip_status",
                "required": false,
                "desc": "When set to either true, t or 1 statuses will not be included in the returned user objects."
            }
        ],
        "path": "lists/subscribers"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "string",
                "name": "owner_screen_name",
                "required": false,
                "desc": "The screen name of the user who owns the list being requested by a slug."
            },
            {
                "type": "status_id",
                "name": "owner_id",
                "required": false,
                "desc": "The user ID of the user who owns the list being requested by a slug."
            },
            {
                "type": "status_id",
                "name": "list_id",
                "required": true,
                "desc": "The numerical id of the list."
            },
            {
                "type": "string",
                "name": "slug",
                "required": true,
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you\u2019ll also have to specify the list owner using the owner_id or owner_screen_name parameters."
            }
        ],
        "path": "lists/subscribers/create"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "string",
                "name": "owner_screen_name",
                "required": false,
                "desc": "The screen name of the user who owns the list being requested by a slug."
            },
            {
                "type": "status_id",
                "name": "owner_id",
                "required": false,
                "desc": "The user ID of the user who owns the list being requested by a slug."
            },
            {
                "type": "status_id",
                "name": "list_id",
                "required": true,
                "desc": "The numerical id of the list."
            },
            {
                "type": "string",
                "name": "slug",
                "required": true,
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you\u2019ll also have to specify the list owner using the owner_id or owner_screen_name parameters."
            },
            {
                "type": "user_id",
                "name": "user_id",
                "required": true,
                "desc": "The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name."
            },
            {
                "type": "string",
                "name": "screen_name",
                "required": true,
                "desc": "The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID."
            },
            {
                "type": "string",
                "name": "include_entities",
                "required": false,
                "desc": "When set to either true, t or 1, each tweet will include a node called \u201centities\u201d. This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. See Tweet Entities for more details."
            },
            {
                "type": "string",
                "name": "skip_status",
                "required": false,
                "desc": "When set to either true, t or 1 statuses will not be included in the returned user objects."
            }
        ],
        "path": "lists/subscribers/show"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "status_id",
                "name": "list_id",
                "required": true,
                "desc": "The numerical id of the list."
            },
            {
                "type": "string",
                "name": "slug",
                "required": true,
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you\u2019ll also have to specify the list owner using the owner_id or owner_screen_name parameters."
            },
            {
                "type": "string",
                "name": "owner_screen_name",
                "required": false,
                "desc": "The screen name of the user who owns the list being requested by a slug."
            },
            {
                "type": "status_id",
                "name": "owner_id",
                "required": false,
                "desc": "The user ID of the user who owns the list being requested by a slug."
            }
        ],
        "path": "lists/subscribers/destroy"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "status_id",
                "name": "list_id",
                "required": true,
                "desc": "The numerical id of the list."
            },
            {
                "type": "string",
                "name": "slug",
                "required": true,
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you\u2019ll also have to specify the list owner using the owner_id or owner_screen_name parameters."
            },
            {
                "type": "user_id",
                "name": "user_id",
                "required": false,
                "desc": "A comma separated list of user IDs, up to 100 are allowed in a single request."
            },
            {
                "type": "string",
                "name": "screen_name",
                "required": false,
                "desc": "A comma separated list of screen names, up to 100 are allowed in a single request."
            },
            {
                "type": "string",
                "name": "owner_screen_name",
                "required": false,
                "desc": "The screen name of the user who owns the list being requested by a slug."
            },
            {
                "type": "status_id",
                "name": "owner_id",
                "required": false,
                "desc": "The user ID of the user who owns the list being requested by a slug."
            }
        ],
        "path": "lists/members/create_all"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "status_id",
                "name": "list_id",
                "required": true,
                "desc": "The numerical id of the list."
            },
            {
                "type": "string",
                "name": "slug",
                "required": true,
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you\u2019ll also have to specify the list owner using the owner_id or owner_screen_name parameters."
            },
            {
                "type": "user_id",
                "name": "user_id",
                "required": true,
                "desc": "The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name."
            },
            {
                "type": "string",
                "name": "screen_name",
                "required": true,
                "desc": "The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID."
            },
            {
                "type": "string",
                "name": "owner_screen_name",
                "required": false,
                "desc": "The screen name of the user who owns the list being requested by a slug."
            },
            {
                "type": "status_id",
                "name": "owner_id",
                "required": false,
                "desc": "The user ID of the user who owns the list being requested by a slug."
            },
            {
                "type": "string",
                "name": "include_entities",
                "required": false,
                "desc": "When set to either true, t or 1, each tweet will include a node called \u201centities\u201d. This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. See Tweet Entities for more details."
            },
            {
                "type": "string",
                "name": "skip_status",
                "required": false,
                "desc": "When set to either true, t or 1 statuses will not be included in the returned user objects."
            }
        ],
        "path": "lists/members/show"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "status_id",
                "name": "list_id",
                "required": true,
                "desc": "The numerical id of the list."
            },
            {
                "type": "string",
                "name": "slug",
                "required": true,
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you\u2019ll also have to specify the list owner using the owner_id or owner_screen_name parameters."
            },
            {
                "type": "string",
                "name": "owner_screen_name",
                "required": false,
                "desc": "The screen name of the user who owns the list being requested by a slug."
            },
            {
                "type": "status_id",
                "name": "owner_id",
                "required": false,
                "desc": "The user ID of the user who owns the list being requested by a slug."
            },
            {
                "type": "int",
                "name": "count",
                "required": false,
                "desc": "Specifies the number of results to return per page (see cursor below). The default is 20, with a maximum of 5,000."
            },
            {
                "type": "int",
                "name": "cursor",
                "example": "12893764510938",
                "required": false,
                "desc": "Causes the collection of list members to be broken into \u201cpages\u201d of consistent sizes (specified by the count parameter). If no cursor is provided, a value of -1 will be assumed, which is the first \u201cpage.\u201d \nThe response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information."
            },
            {
                "type": "bool",
                "name": "include_entities",
                "example": "false",
                "required": false,
                "desc": "The entities node will be disincluded when set to false."
            },
            {
                "type": "string",
                "name": "skip_status",
                "required": false,
                "desc": "When set to either true, t or 1 statuses will not be included in the returned user objects."
            }
        ],
        "path": "lists/members"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "status_id",
                "name": "list_id",
                "required": true,
                "desc": "The numerical id of the list."
            },
            {
                "type": "string",
                "name": "slug",
                "required": true,
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you\u2019ll also have to specify the list owner using the owner_id or owner_screen_name parameters."
            },
            {
                "type": "user_id",
                "name": "user_id",
                "required": true,
                "desc": "The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name."
            },
            {
                "type": "string",
                "name": "screen_name",
                "required": true,
                "desc": "The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID."
            },
            {
                "type": "string",
                "name": "owner_screen_name",
                "required": false,
                "desc": "The screen name of the user who owns the list being requested by a slug."
            },
            {
                "type": "status_id",
                "name": "owner_id",
                "required": false,
                "desc": "The user ID of the user who owns the list being requested by a slug."
            }
        ],
        "path": "lists/members/create"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "string",
                "name": "owner_screen_name",
                "required": false,
                "desc": "The screen name of the user who owns the list being requested by a slug."
            },
            {
                "type": "status_id",
                "name": "owner_id",
                "required": false,
                "desc": "The user ID of the user who owns the list being requested by a slug."
            },
            {
                "type": "status_id",
                "name": "list_id",
                "required": true,
                "desc": "The numerical id of the list."
            },
            {
                "type": "string",
                "name": "slug",
                "required": true,
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you\u2019ll also have to specify the list owner using the owner_id or owner_screen_name parameters."
            }
        ],
        "path": "lists/destroy"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "status_id",
                "name": "list_id",
                "required": true,
                "desc": "The numerical id of the list."
            },
            {
                "type": "string",
                "name": "slug",
                "required": true,
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you\u2019ll also have to specify the list owner using the owner_id or owner_screen_name parameters."
            },
            {
                "type": "string",
                "name": "name",
                "required": false,
                "desc": "The name for the list."
            },
            {
                "type": "string",
                "name": "mode",
                "required": false,
                "desc": "Whether your list is public or private. Values can be public or private. If no mode is specified the list will be public."
            },
            {
                "type": "string",
                "name": "description",
                "required": false,
                "desc": "The description to give the list."
            },
            {
                "type": "string",
                "name": "owner_screen_name",
                "required": false,
                "desc": "The screen name of the user who owns the list being requested by a slug."
            },
            {
                "type": "status_id",
                "name": "owner_id",
                "required": false,
                "desc": "The user ID of the user who owns the list being requested by a slug."
            }
        ],
        "path": "lists/update"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "string",
                "name": "name",
                "required": true,
                "desc": "The name for the list."
            },
            {
                "type": "string",
                "name": "mode",
                "required": false,
                "desc": "Whether your list is public or private. Values can be public or private. If no mode is specified the list will be public."
            },
            {
                "type": "string",
                "name": "description",
                "required": false,
                "desc": "The description to give the list."
            }
        ],
        "path": "lists/create"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "status_id",
                "name": "list_id",
                "required": true,
                "desc": "The numerical id of the list."
            },
            {
                "type": "string",
                "name": "slug",
                "required": true,
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you\u2019ll also have to specify the list owner using the owner_id or owner_screen_name parameters."
            },
            {
                "type": "string",
                "name": "owner_screen_name",
                "required": false,
                "desc": "The screen name of the user who owns the list being requested by a slug."
            },
            {
                "type": "status_id",
                "name": "owner_id",
                "required": false,
                "desc": "The user ID of the user who owns the list being requested by a slug."
            }
        ],
        "path": "lists/show"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "user_id",
                "name": "user_id",
                "required": false,
                "desc": "The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID is also a valid screen name."
            },
            {
                "type": "string",
                "name": "screen_name",
                "required": false,
                "desc": "The screen name of the user for whom to return results for. Helpful for disambiguating when a valid screen name is also a user ID."
            },
            {
                "type": "int",
                "name": "count",
                "required": false,
                "desc": "The amount of results to return per page. Defaults to 20. No more than 1000 results will ever be returned in a single page."
            },
            {
                "type": "cursor",
                "name": "cursor",
                "required": false,
                "desc": "Breaks the results into pages. Provide a value of -1 to begin paging. Provide values as returned in the response body\u2019s next_cursor and previous_cursor attributes to page back and forth in the list. It is recommended to always use cursors when the method supports them.  See [node:10362] for more information."
            }
        ],
        "path": "lists/subscriptions"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "status_id",
                "name": "list_id",
                "required": true,
                "desc": "The numerical id of the list."
            },
            {
                "type": "string",
                "name": "slug",
                "required": true,
                "desc": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you\u2019ll also have to specify the list owner using the owner_id or owner_screen_name parameters."
            },
            {
                "type": "user_id",
                "name": "user_id",
                "required": false,
                "desc": "A comma separated list of user IDs, up to 100 are allowed in a single request."
            },
            {
                "type": "string",
                "name": "screen_name",
                "required": false,
                "desc": "A comma separated list of screen names, up to 100 are allowed in a single request."
            },
            {
                "type": "string",
                "name": "owner_screen_name",
                "required": false,
                "desc": "The screen name of the user who owns the list being requested by a slug."
            },
            {
                "type": "status_id",
                "name": "owner_id",
                "required": false,
                "desc": "The user ID of the user who owns the list being requested by a slug."
            }
        ],
        "path": "lists/members/destroy_all"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "user_id",
                "name": "user_id",
                "required": false,
                "desc": "The ID of the user for whom to return results for."
            },
            {
                "type": "string",
                "name": "screen_name",
                "required": false,
                "desc": "The screen name of the user for whom to return results for."
            },
            {
                "type": "int",
                "name": "count",
                "required": false,
                "desc": "The amount of results to return per page. Defaults to 20. No more than 1000 results will ever be returned in a single page."
            },
            {
                "type": "cursor",
                "name": "cursor",
                "required": false,
                "desc": "Breaks the results into pages. Provide a value of -1 to begin paging. Provide values as returned in the response body\u2019s next_cursor and previous_cursor attributes to page back and forth in the list. It is recommended to always use cursors when the method supports them.  See [node:10362] for more information."
            }
        ],
        "path": "lists/ownerships"
    },
    {
        "method": "GET",
        "params": [],
        "path": "saved_searches/list"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "int",
                "name": "id",
                "example": "313006",
                "required": true,
                "desc": "The ID of the saved search."
            }
        ],
        "path": "saved_searches/show/:id"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "string",
                "name": "query",
                "required": true,
                "desc": "The query of the search the user would like to save. The query must be 100 characters or less."
            }
        ],
        "path": "saved_searches/create"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "int",
                "name": "id",
                "example": "313006",
                "required": true,
                "desc": "The ID of the saved search."
            }
        ],
        "path": "saved_searches/destroy/:id"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "place_id",
                "name": "place_id",
                "example": "df51dec6f4ee2b2c",
                "required": true,
                "desc": "A place in the world. These IDs can be retrieved from geo/reverse_geocode."
            }
        ],
        "path": "geo/id/:place_id"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "string",
                "name": "lat",
                "example": "37.7821120598956",
                "required": true,
                "desc": "The latitude to search around. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn\u2019t a corresponding long parameter."
            },
            {
                "type": "string",
                "name": "long",
                "example": "-122.400612831116",
                "required": true,
                "desc": "The longitude to search around. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter."
            },
            {
                "type": "string",
                "name": "accuracy",
                "example": "5ft",
                "required": false,
                "desc": "A hint on the \u201cregion\u201d in which to search. If a number, then this is a radius in meters, but it can also take a string that is suffixed with ft to specify feet. If this is not passed in, then it is assumed to be 0m. If coming from a device, in practice, this value is whatever accuracy the device has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.)."
            },
            {
                "type": "string",
                "name": "granularity",
                "example": "city",
                "required": false,
                "desc": "This is the minimal granularity of place types to return and must be one of: poi, neighborhood, city, admin or country. If no granularity is provided for the request neighborhood is assumed. Setting this to city, for example, will find places which have a type of city, admin or country."
            },
            {
                "type": "int",
                "name": "max_results",
                "example": "3",
                "required": false,
                "desc": "A hint as to the number of results to return. This does not guarantee that the number of results returned will equal max_results, but instead informs how many \u201cnearby\u201d results to return. Ideally, only pass in the number of places you intend to display to the user here."
            },
            {
                "type": "string",
                "name": "callback",
                "required": false,
                "desc": "If supplied, the response will use the JSONP format with a callback of the given name."
            }
        ],
        "path": "geo/reverse_geocode"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "string",
                "name": "lat",
                "example": "37.7821120598956",
                "required": false,
                "desc": "The latitude to search around. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn\u2019t a corresponding long parameter."
            },
            {
                "type": "string",
                "name": "long",
                "example": "-122.400612831116",
                "required": false,
                "desc": "The longitude to search around. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter."
            },
            {
                "type": "string",
                "name": "query",
                "example": "Twitter%20HQ",
                "required": false,
                "desc": "Free-form text to match against while executing a geo-based query, best suited for finding nearby locations by name. Remember to URL encode the query."
            },
            {
                "type": "string",
                "name": "ip",
                "example": "74.125.19.104",
                "required": false,
                "desc": "An IP address. Used when attempting to fix geolocation based off of the user\u2019s IP address."
            },
            {
                "type": "string",
                "name": "granularity",
                "example": "city",
                "required": false,
                "desc": "This is the minimal granularity of place types to return and must be one of: poi, neighborhood, city, admin or country. If no granularity is provided for the request neighborhood is assumed. Setting this to city, for example, will find places which have a type of city, admin or country."
            },
            {
                "type": "string",
                "name": "accuracy",
                "example": "5ft",
                "required": false,
                "desc": "A hint on the \u201cregion\u201d in which to search. If a number, then this is a radius in meters, but it can also take a string that is suffixed with ft to specify feet. If this is not passed in, then it is assumed to be 0m. If coming from a device, in practice, this value is whatever accuracy the device has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.)."
            },
            {
                "type": "int",
                "name": "max_results",
                "example": "3",
                "required": false,
                "desc": "A hint as to the number of results to return. This does not guarantee that the number of results returned will equal max_results, but instead informs how many \u201cnearby\u201d results to return. Ideally, only pass in the number of places you intend to display to the user here."
            },
            {
                "type": "string",
                "name": "contained_within",
                "example": "247f43d441defc03",
                "required": false,
                "desc": "This is the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found. Specify a place_id. For example, to scope all results to places within \u201cSan Francisco, CA USA\u201d, you would specify a place_id of \u201c5a110d312052166f\u201d"
            },
            {
                "type": "string",
                "name": "attribute:street_address",
                "example": "795%20Folsom%20St",
                "required": false,
                "desc": "This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted. Learn more about [node:208, title=\u201dPlace Attributes\u201d]."
            },
            {
                "type": "string",
                "name": "callback",
                "required": false,
                "desc": "If supplied, the response will use the JSONP format with a callback of the given name."
            }
        ],
        "path": "geo/search"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "string",
                "name": "name",
                "example": "Twitter%20HQ",
                "required": true,
                "desc": "The name a place is known as."
            },
            {
                "type": "string",
                "name": "contained_within",
                "example": "247f43d441defc03",
                "required": true,
                "desc": "The place_id within which the new place can be found. Try and be as close as possible with the containing place. For example, for a room in a building, set the contained_within as the building place_id."
            },
            {
                "type": "string",
                "name": "token",
                "example": "36179c9bf78835898ebf521c1defd4be",
                "required": true,
                "desc": "The token found in the response from geo/similar_places."
            },
            {
                "type": "string",
                "name": "lat",
                "example": "37.7821120598956",
                "required": true,
                "desc": "The latitude the place is located at. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn\u2019t a corresponding long parameter."
            },
            {
                "type": "string",
                "name": "long",
                "example": "-122.400612831116",
                "required": true,
                "desc": "The longitude the place is located at. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter."
            },
            {
                "type": "string",
                "name": "attribute:street_address",
                "example": "795%20Folsom%20St",
                "required": false,
                "desc": "This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted. Learn more here."
            },
            {
                "type": "string",
                "name": "callback",
                "required": false,
                "desc": "If supplied, the response will use the JSONP format with a callback of the given name."
            }
        ],
        "path": "geo/place"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "int",
                "name": "id",
                "example": "1",
                "required": true,
                "desc": "The Yahoo! Where On Earth ID of the location to return trending information for. Global information is available by using 1 as the WOEID."
            },
            {
                "type": "string",
                "name": "exclude",
                "required": false,
                "desc": "Setting this equal to hashtags will remove all hashtags from the trends list."
            }
        ],
        "path": "trends/place"
    },
    {
        "method": "GET",
        "params": [],
        "path": "trends/available"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "string",
                "name": "resources",
                "example": "statuses,friends,trends,help",
                "required": false,
                "desc": "A comma-separated list of resource families you want to know the current rate limit disposition for. For best performance, only specify the resource families pertinent to your application."
            }
        ],
        "path": "application/rate_limit_status"
    },
    {
        "method": "GET",
        "params": [],
        "path": "help/configuration"
    },
    {
        "method": "GET",
        "params": [],
        "path": "help/languages"
    },
    {
        "method": "GET",
        "params": [],
        "path": "help/privacy"
    },
    {
        "method": "GET",
        "params": [],
        "path": "help/tos"
    },
    {
        "method": "GET",
        "params": [
            {
                "type": "string",
                "name": "lat",
                "example": "37.781157",
                "required": true,
                "desc": "If provided with a long parameter the available trend locations will be sorted by distance, nearest to furthest, to the co-ordinate pair. The valid ranges for longitude is -180.0 to +180.0 (West is negative, East is positive) inclusive."
            },
            {
                "type": "string",
                "name": "long",
                "example": "-122.400612831116",
                "required": true,
                "desc": "If provided with a lat parameter the available trend locations will be sorted by distance, nearest to furthest, to the co-ordinate pair. The valid ranges for longitude is -180.0 to +180.0 (West is negative, East is positive) inclusive."
            }
        ],
        "path": "trends/closest"
    },
    {
        "method": "POST",
        "params": [
            {
                "type": "string",
                "name": "screen_name",
                "example": "noradio",
                "required": false,
                "desc": "The ID or screen_name of the user you want to report as a spammer. Helpful for disambiguating when a valid screen name is also a user ID."
            },
            {
                "type": "int",
                "name": "user_id",
                "example": "12345",
                "required": false,
                "desc": "The ID of the user you want to report as a spammer. Helpful for disambiguating when a valid user ID is also a valid screen name."
            }
        ],
        "path": "users/report_spam"
    }
]
